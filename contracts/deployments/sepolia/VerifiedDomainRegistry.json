{
  "address": "0x15EF83EBB422B4AC8e3b8393d016Ed076dc50CB7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "domainName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "name": "DomainVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IVerifyDomainProcessor",
          "name": "newVerifyDomainProcessor",
          "type": "address"
        }
      ],
      "name": "VerifyDomainProcessorUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "domains",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_domainName",
          "type": "string"
        }
      ],
      "name": "getDomainId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_domainId",
          "type": "bytes32"
        }
      ],
      "name": "getDomainOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_domains",
          "type": "bytes32[]"
        }
      ],
      "name": "getDomains",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "domainId",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "expiryTime",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IVerifiedDomainRegistry.Domain",
              "name": "domain",
              "type": "tuple"
            }
          ],
          "internalType": "struct IVerifiedDomainRegistry.DomainWithId[]",
          "name": "domainInfo",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserDomains",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "domainId",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "expiryTime",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IVerifiedDomainRegistry.Domain",
              "name": "domain",
              "type": "tuple"
            }
          ],
          "internalType": "struct IVerifiedDomainRegistry.DomainWithId[]",
          "name": "domainInfo",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVerifyDomainProcessor",
          "name": "_verifyDomainProcessor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVerifyDomainProcessor",
          "name": "_verifyDomainProcessor",
          "type": "address"
        }
      ],
      "name": "updateVerifyDomainProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userDomains",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifyDomainProcessor",
      "outputs": [
        {
          "internalType": "contract IVerifyDomainProcessor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "provider",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "parameters",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "context",
                  "type": "string"
                }
              ],
              "internalType": "struct Claims.ClaimInfo",
              "name": "claimInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "identifier",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "owner",
                      "type": "address"
                    },
                    {
                      "internalType": "uint32",
                      "name": "timestampS",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "epoch",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct Claims.CompleteClaimData",
                  "name": "claim",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes[]",
                  "name": "signatures",
                  "type": "bytes[]"
                }
              ],
              "internalType": "struct Claims.SignedClaim",
              "name": "signedClaim",
              "type": "tuple"
            }
          ],
          "internalType": "struct IProxyBaseProcessor.Proof[]",
          "name": "_proofs",
          "type": "tuple[]"
        }
      ],
      "name": "verifyDomains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9793f16db1b5130daf9b0cb16d8c519398190ae0b948d62bdd63ef2aca9a1175",
  "receipt": {
    "to": null,
    "from": "0x84e113087C97Cd80eA9D78983D4B8Ff61ECa1929",
    "contractAddress": "0x15EF83EBB422B4AC8e3b8393d016Ed076dc50CB7",
    "transactionIndex": 25,
    "gasUsed": "1660025",
    "logsBloom": "0x
    "blockHash": "0xb05cbb76096fbd0b87a208359b6c98b8c309eea448b8d796441fe40541040ba9",
    "transactionHash": "0x9793f16db1b5130daf9b0cb16d8c519398190ae0b948d62bdd63ef2aca9a1175",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 6619856,
        "transactionHash": "0x9793f16db1b5130daf9b0cb16d8c519398190ae0b948d62bdd63ef2aca9a1175",
        "address": "0x15EF83EBB422B4AC8e3b8393d016Ed076dc50CB7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0xb05cbb76096fbd0b87a208359b6c98b8c309eea448b8d796441fe40541040ba9"
      }
    ],
    "blockNumber": 6619856,
    "cumulativeGasUsed": "6112961",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2d5447dc2e8fb3a2517c08b948266497",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"domainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"DomainVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IVerifyDomainProcessor\",\"name\":\"newVerifyDomainProcessor\",\"type\":\"address\"}],\"name\":\"VerifyDomainProcessorUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domainName\",\"type\":\"string\"}],\"name\":\"getDomainId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_domainId\",\"type\":\"bytes32\"}],\"name\":\"getDomainOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_domains\",\"type\":\"bytes32[]\"}],\"name\":\"getDomains\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IVerifiedDomainRegistry.Domain\",\"name\":\"domain\",\"type\":\"tuple\"}],\"internalType\":\"struct IVerifiedDomainRegistry.DomainWithId[]\",\"name\":\"domainInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDomains\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IVerifiedDomainRegistry.Domain\",\"name\":\"domain\",\"type\":\"tuple\"}],\"internalType\":\"struct IVerifiedDomainRegistry.DomainWithId[]\",\"name\":\"domainInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVerifyDomainProcessor\",\"name\":\"_verifyDomainProcessor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVerifyDomainProcessor\",\"name\":\"_verifyDomainProcessor\",\"type\":\"address\"}],\"name\":\"updateVerifyDomainProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDomains\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyDomainProcessor\",\"outputs\":[{\"internalType\":\"contract IVerifyDomainProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parameters\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"internalType\":\"struct Claims.ClaimInfo\",\"name\":\"claimInfo\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"internalType\":\"struct Claims.CompleteClaimData\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Claims.SignedClaim\",\"name\":\"signedClaim\",\"type\":\"tuple\"}],\"internalType\":\"struct IProxyBaseProcessor.Proof[]\",\"name\":\"_proofs\",\"type\":\"tuple[]\"}],\"name\":\"verifyDomains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(address)\":{\"params\":{\"_verifyDomainProcessor\":\"Address of the VerifyDomainProcessor contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateVerifyDomainProcessor(address)\":{\"params\":{\"_verifyDomainProcessor\":\"Address of the new VerifyDomainProcessor contract\"}},\"verifyDomains(((string,string,string),((bytes32,address,uint32,uint32),bytes[]))[])\":{\"params\":{\"_proofs\":\"Array of domain ownership TLS proofs\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address)\":{\"notice\":\"ONLY OWNER: Initialize the contract with the VerifyDomainProcessor and exchange contracts. This can only be called once.\"},\"updateVerifyDomainProcessor(address)\":{\"notice\":\"ONLY OWNER: Update the verify domain processor\"},\"verifyDomains(((string,string,string),((bytes32,address,uint32,uint32),bytes[]))[])\":{\"notice\":\"Verify domains and add them to the registry. If domain is transferred off-chain to another party  then they can re-verify the domain and claim ownership of the domain and previous ownership is removed. The existing owner can re-verify the domain, say after the domain has expired to update the expiry time on the domain. Function reverts if: - Domain ownership TLS proofs are invalid \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VerifiedDomainRegistry.sol\":\"VerifiedDomainRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@reclaimprotocol/verifier-solidity-sdk/contracts/Claims.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\n\\n/**\\n * Library to assist with requesting,\\n * serialising & verifying credentials\\n */\\nlibrary Claims {\\n\\t/** Data required to describe a claim */\\n\\tstruct CompleteClaimData {\\n\\t\\tbytes32 identifier;\\n\\t\\taddress owner;\\n\\t\\tuint32 timestampS;\\n\\t\\tuint32 epoch;\\n\\t}\\n\\n\\tstruct ClaimInfo {\\n\\t\\tstring provider;\\n\\t\\tstring parameters;\\n\\t\\tstring context;\\n\\t}\\n\\n\\t/** Claim with signatures & signer */\\n\\tstruct SignedClaim {\\n\\t\\tCompleteClaimData claim;\\n\\t\\tbytes[] signatures;\\n\\t}\\n\\n\\t/**\\n\\t * Asserts that the claim is signed by the expected witnesses\\n\\t */\\n\\tfunction assertValidSignedClaim(\\n\\t\\tSignedClaim memory self,\\n\\t\\taddress[] memory expectedWitnessAddresses\\n\\t) internal pure {\\n\\t\\trequire(self.signatures.length > 0, \\\"No signatures\\\");\\n\\t\\taddress[] memory signedWitnesses = recoverSignersOfSignedClaim(self);\\n\\t\\tfor (uint256 i = 0; i < expectedWitnessAddresses.length; i++) {\\n\\t\\t\\tbool found = false;\\n\\t\\t\\tfor (uint256 j = 0; j < signedWitnesses.length; j++) {\\n\\t\\t\\t\\tif (signedWitnesses[j] == expectedWitnessAddresses[i]) {\\n\\t\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\trequire(found, \\\"Missing witness signature\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev recovers the signer of the claim\\n\\t */\\n\\tfunction recoverSignersOfSignedClaim(\\n\\t\\tSignedClaim memory self\\n\\t) internal pure returns (address[] memory) {\\n\\t\\tbytes memory serialised = serialise(self.claim);\\n\\t\\taddress[] memory signers = new address[](self.signatures.length);\\n\\t\\tfor (uint256 i = 0; i < self.signatures.length; i++) {\\n\\t\\t\\tsigners[i] = verifySignature(serialised, self.signatures[i]);\\n\\t\\t}\\n\\n\\t\\treturn signers;\\n\\t}\\n\\n\\t/**\\n\\t * @dev serialises the credential into a string;\\n\\t * the string is used to verify the signature\\n\\t *\\n\\t * the serialisation is the same as done by the TS library\\n\\t */\\n\\tfunction serialise(\\n\\t\\tCompleteClaimData memory self\\n\\t) internal pure returns (bytes memory) {\\n\\t\\treturn\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tStringUtils.bytes2str(abi.encodePacked(self.identifier)),\\n\\t\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.address2str(self.owner),\\n\\t\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.uint2str(self.timestampS),\\n\\t\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.uint2str(self.epoch)\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns the address of the user that generated the signature\\n\\t */\\n\\tfunction verifySignature(\\n\\t\\tbytes memory content,\\n\\t\\tbytes memory signature\\n\\t) internal pure returns (address signer) {\\n\\t\\tbytes32 signedHash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.uint2str(content.length),\\n\\t\\t\\t\\tcontent\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn ECDSA.recover(signedHash, signature);\\n\\t}\\n\\n\\tfunction hashClaimInfo(ClaimInfo memory claimInfo) internal pure returns (bytes32) {\\n\\t\\tbytes memory serialised = abi.encodePacked(\\n\\t\\t\\tclaimInfo.provider,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\tclaimInfo.parameters,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\tclaimInfo.context\\n\\t\\t);\\n\\t\\treturn keccak256(serialised);\\n\\t}\\n}\\n\",\"keccak256\":\"0x87a41e75d358e86798456ad45e03446cde8f1519c8af17905f6c8b852a5f2da7\",\"license\":\"MIT\"},\"@reclaimprotocol/verifier-solidity-sdk/contracts/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * Utilities for string manipulation & conversion\\n */\\nlibrary StringUtils {\\n\\tfunction address2str(address x) internal pure returns (string memory) {\\n\\t\\tbytes memory s = new bytes(40);\\n\\t\\tfor (uint i = 0; i < 20; i++) {\\n\\t\\t\\tbytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\\n\\t\\t\\tbytes1 hi = bytes1(uint8(b) / 16);\\n\\t\\t\\tbytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n\\t\\t\\ts[2 * i] = getChar(hi);\\n\\t\\t\\ts[2 * i + 1] = getChar(lo);\\n\\t\\t}\\n\\t\\treturn string(abi.encodePacked(\\\"0x\\\", s));\\n\\t}\\n\\n\\tfunction bytes2str(bytes memory buffer) internal pure returns (string memory) {\\n\\t\\t// Fixed buffer size for hexadecimal convertion\\n\\t\\tbytes memory converted = new bytes(buffer.length * 2);\\n\\t\\tbytes memory _base = \\\"0123456789abcdef\\\";\\n\\n\\t\\tfor (uint256 i = 0; i < buffer.length; i++) {\\n\\t\\t\\tconverted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n\\t\\t\\tconverted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n\\t\\t}\\n\\n\\t\\treturn string(abi.encodePacked(\\\"0x\\\", converted));\\n\\t}\\n\\n\\tfunction getChar(bytes1 b) internal pure returns (bytes1 c) {\\n\\t\\tif (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n\\t\\telse return bytes1(uint8(b) + 0x57);\\n\\t}\\n\\n\\tfunction bool2str(bool _b) internal pure returns (string memory _uintAsString) {\\n\\t\\tif (_b) {\\n\\t\\t\\treturn \\\"true\\\";\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"false\\\";\\n\\t\\t}\\n\\t}\\n\\n\\tfunction uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n\\t\\tif (_i == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint j = _i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len;\\n\\t\\twhile (_i != 0) {\\n\\t\\t\\tk = k - 1;\\n\\t\\t\\tuint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n\\t\\t\\tbytes1 b1 = bytes1(temp);\\n\\t\\t\\tbstr[k] = b1;\\n\\t\\t\\t_i /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n\\n\\tfunction areEqual(\\n\\t\\tstring calldata _a,\\n\\t\\tstring storage _b\\n\\t) internal pure returns (bool) {\\n\\t\\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\\n\\t}\\n\\n\\tfunction areEqual(string memory _a, string memory _b) internal pure returns (bool) {\\n\\t\\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\\n\\t}\\n\\n\\tfunction toLower(string memory str) internal pure returns (string memory) {\\n\\t\\tbytes memory bStr = bytes(str);\\n\\t\\tbytes memory bLower = new bytes(bStr.length);\\n\\t\\tfor (uint i = 0; i < bStr.length; i++) {\\n\\t\\t\\t// Uppercase character...\\n\\t\\t\\tif ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\n\\t\\t\\t\\t// So we add 32 to make it lowercase\\n\\t\\t\\t\\tbLower[i] = bytes1(uint8(bStr[i]) + 32);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbLower[i] = bStr[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn string(bLower);\\n\\t}\\n\\n\\tfunction substring(\\n\\t\\tstring memory str,\\n\\t\\tuint startIndex,\\n\\t\\tuint endIndex\\n\\t) internal pure returns (string memory) {\\n\\t\\tbytes memory strBytes = bytes(str);\\n\\t\\tbytes memory result = new bytes(endIndex - startIndex);\\n\\t\\tfor (uint i = startIndex; i < endIndex; i++) {\\n\\t\\t\\tresult[i - startIndex] = strBytes[i];\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n}\\n\",\"keccak256\":\"0x15feebafef16d4c74c043b39e652ddae0e121987ceca74b663f6a2d2d7ba8b4b\",\"license\":\"MIT\"},\"contracts/VerifiedDomainRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Bytes32ArrayUtils } from \\\"./external/lib/Bytes32ArrayUtils.sol\\\";\\n\\nimport { IVerifiedDomainRegistry } from \\\"./interfaces/IVerifiedDomainRegistry.sol\\\";\\nimport { IVerifyDomainProcessor } from \\\"./interfaces/IVerifyDomainProcessor.sol\\\";\\n\\n\\npragma solidity ^0.8.18;\\n\\ncontract VerifiedDomainRegistry is IVerifiedDomainRegistry, Ownable {\\n\\n    using Bytes32ArrayUtils for bytes32[];\\n\\n    /* ============ Events ============ */\\n    event DomainVerified(\\n        bytes32 indexed domainId,\\n        address indexed owner,\\n        string domainName,\\n        uint256 expiryTime\\n    );\\n\\n    event VerifyDomainProcessorUpdated(\\n        IVerifyDomainProcessor indexed newVerifyDomainProcessor\\n    );\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyInitialized() {\\n        require(isInitialized, \\\"Contract must be initialized\\\");\\n        _;\\n    }\\n\\n    /* ============ Public Variables ============ */\\n    IVerifyDomainProcessor public verifyDomainProcessor;\\n\\n    bool public isInitialized;\\n\\n    mapping(bytes32 => Domain) public domains;\\n    mapping(address => bytes32[]) public userDomains;\\n\\n    /* ============ Constructor ============ */\\n    \\n    constructor() Ownable() {}\\n\\n    /* ============ Public Functions ============ */\\n\\n    /**\\n     * @notice Verify domains and add them to the registry. If domain is transferred off-chain to another party \\n     * then they can re-verify the domain and claim ownership of the domain and previous ownership is removed.\\n     * The existing owner can re-verify the domain, say after the domain has expired to update the expiry time on\\n     * the domain. Function reverts if:\\n     * - Domain ownership TLS proofs are invalid\\n     * \\n     * @param _proofs           Array of domain ownership TLS proofs\\n     */\\n    function verifyDomains(IVerifyDomainProcessor.Proof[] memory _proofs) external override\\n        onlyInitialized\\n    {\\n        IVerifyDomainProcessor.DomainRaw[] memory rawDomains = verifyDomainProcessor.verifyProofs(\\n            _proofs\\n        );\\n\\n        for (uint256 i = 0; i < rawDomains.length; i++) {\\n            IVerifyDomainProcessor.DomainRaw memory rawDomain = rawDomains[i];\\n            bytes32 domainId = getDomainId(rawDomain.name);\\n\\n            Domain storage domain = domains[domainId];\\n            if (domain.owner == address(0)) {\\n                // Case 1.1: Domain has no owner\\n                // Add caller as owner\\n                userDomains[msg.sender].push(domainId);\\n            } else {\\n                // Case 2: Domain has owner\\n                // Case 2.1: Caller is owner; skip\\n                // Case 2.2: Caller is NOT owner\\n                if (domain.owner != msg.sender) {\\n                    // Remove ownership from old owner and add caller as new owner\\n                    userDomains[domain.owner].removeStorage(domainId);\\n                    userDomains[msg.sender].push(domainId);\\n                }\\n            }\\n\\n            domains[domainId] = Domain({\\n                owner: msg.sender,\\n                name: rawDomain.name,\\n                expiryTime: rawDomain.expiryTime\\n            });\\n            \\n            emit DomainVerified(domainId, msg.sender, rawDomain.name, rawDomain.expiryTime);\\n        }\\n    }\\n\\n    /* ============ Admin Functions ============ */\\n\\n    /**\\n     * @notice ONLY OWNER: Initialize the contract with the VerifyDomainProcessor and exchange contracts.\\n     * This can only be called once.\\n     *\\n     * @param _verifyDomainProcessor    Address of the VerifyDomainProcessor contract\\n     */\\n    function initialize(\\n        IVerifyDomainProcessor _verifyDomainProcessor\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(!isInitialized, \\\"Already initialized\\\");\\n\\n        verifyDomainProcessor = _verifyDomainProcessor;\\n\\n        isInitialized = true;\\n\\n        emit VerifyDomainProcessorUpdated(_verifyDomainProcessor);\\n    }\\n\\n    /**\\n     * @notice ONLY OWNER: Update the verify domain processor\\n     *\\n     * @param _verifyDomainProcessor    Address of the new VerifyDomainProcessor contract\\n     */\\n    function updateVerifyDomainProcessor(IVerifyDomainProcessor _verifyDomainProcessor) external onlyOwner {\\n        require(address(_verifyDomainProcessor) != address(0), \\\"Invalid address\\\");\\n\\n        verifyDomainProcessor = _verifyDomainProcessor;\\n        emit VerifyDomainProcessorUpdated(_verifyDomainProcessor);\\n    }\\n\\n    /* ============ View Functions ============ */\\n\\n    function getDomainId(string memory _domainName) public pure override returns (bytes32) {\\n        return keccak256(abi.encodePacked(_domainName));\\n    }\\n\\n    function getDomainOwner(bytes32 _domainId) external view override returns (address) {        \\n        return domains[_domainId].owner;\\n    }\\n\\n    function getUserDomains(address _user) external view returns (DomainWithId[] memory domainInfo) {\\n        bytes32[] memory domainIds = userDomains[_user];\\n        \\n        domainInfo = new DomainWithId[](domainIds.length);\\n        for (uint256 i = 0; i < domainIds.length; i++) {\\n            bytes32 domainId = domainIds[i];\\n            domainInfo[i] = DomainWithId({\\n                domainId: domainId,\\n                domain: domains[domainId]\\n            });\\n        }\\n    }\\n\\n    function getDomains(bytes32[] memory _domains) external view returns (DomainWithId[] memory domainInfo) {\\n        domainInfo = new DomainWithId[](_domains.length);\\n        for (uint256 i = 0; i < _domains.length; i++) {\\n            bytes32 domainId = _domains[i];\\n            domainInfo[i] = DomainWithId({\\n                domainId: domainId,\\n                domain: domains[domainId]\\n            });\\n        }\\n    }\\n}\",\"keccak256\":\"0xe675a99aeb36973bc73f775944ecbf978fffe1b7f09be0361f9b91ea45616979\",\"license\":\"MIT\"},\"contracts/external/interfaces/IProxyBaseProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Claims } from \\\"@reclaimprotocol/verifier-solidity-sdk/contracts/Claims.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ninterface IProxyBaseProcessor {\\n    \\n    struct Proof {\\n        Claims.ClaimInfo claimInfo;\\n        Claims.SignedClaim signedClaim;\\n    }\\n}\\n\",\"keccak256\":\"0x65aa00301110dfdf8333bd9bb71ebad241d66ea5840a2db3ac6d4f6037083cb8\",\"license\":\"MIT\"},\"contracts/external/lib/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"},\"contracts/interfaces/IVerifiedDomainRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { IVerifyDomainProcessor } from \\\"./IVerifyDomainProcessor.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ninterface IVerifiedDomainRegistry {\\n\\n    struct Domain {\\n        address owner;\\n        string name;\\n        uint256 expiryTime;\\n    }\\n\\n    struct DomainWithId {\\n        bytes32 domainId;\\n        Domain domain;\\n    }\\n\\n    function verifyDomains(IVerifyDomainProcessor.Proof[] memory _proofs) external;\\n    function getDomainId(string memory _domainName) external pure returns (bytes32);\\n    function getDomainOwner(bytes32 _domainId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe8a0bf48e0710f8a91dc0deffe6efc6cd276b6c2953684cac7c5ac29452d1100\",\"license\":\"MIT\"},\"contracts/interfaces/IVerifyDomainProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\nimport { IProxyBaseProcessor } from \\\"../external/interfaces/IProxyBaseProcessor.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ninterface IVerifyDomainProcessor is IProxyBaseProcessor {\\n    \\n    struct DomainRaw {\\n        string name;\\n        uint256 expiryTime;\\n    }\\n\\n    function verifyProofs(\\n        Proof[] memory _proofs\\n    ) \\n        external  \\n        returns (DomainRaw[] memory domains);\\n}\",\"keccak256\":\"0xe66335a9d8fb3d03a9ee76bf44fbec775311aeed3f6666862f06124b6605a123\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346200002657620000146200002b565b604051611c89620001268239611c8990f35b600080fd5b6200003562000037565b565b6200003533620000c3565b62000054905b6001600160a01b031690565b90565b62000054905462000042565b620000549062000048906001600160a01b031682565b620000549062000063565b620000549062000079565b90620000a362000054620000bf9262000084565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b620000cf600062000057565b90620000dd8160006200008f565b620001146200010d7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09362000084565b9162000084565b916200011f60405190565b600090a356fe6080604052600436101561001257600080fd5b60003560e01c80630183196b146100f257806311d4c3a2146100ed578063392e53cd146100e85780635e8441d3146100e3578063715018a6146100de5780637f200269146100d95780638da5cb5b146100d45780639f4cb8f0146100cf5780639f6eb88c146100ca578063a9c56e91146100c5578063b3533dfe146100c0578063c4d66de8146100bb578063c722f177146100b65763f2fde38b0361011857610b95565b610b6b565b6109ed565b6109c6565b610971565b6106a6565b6105e6565b6104d7565b6104bf565b610472565b610447565b610333565b6102cd565b61027b565b6001600160a01b031690565b90565b6001600160a01b0381165b0361011857565b600080fd5b9050359061012a82610106565b565b90602082820312610118576101039161011d565b9052565b60005b8381106101575750506000910152565b8181015183820152602001610147565b61018861019160209361019b9361017c815190565b80835293849260200190565b95869101610144565b601f01601f191690565b0190565b80516001600160a01b0316825290610103906040806101cd6060840160208701518582036020870152610167565b940151910152565b805182526101039160408101916020015190602081840391015261019f565b90610103916101d5565b9061021461020a835190565b8083529160200190565b90816102266020830284019460200190565b926000915b83831061023a57505050505090565b9091929394602061025d610256838560019503875289516101f4565b9760200190565b930193019193929061022b565b6020808252610103929101906101fe565b34610118576102a261029661029136600461012c565b611986565b6040519182918261026a565b0390f35b80610111565b9050359061012a826102a6565b9060208282031261011857610103916102ac565b34610118576102a26102e86102e33660046102b9565b6117ca565b604051918291826001600160a01b03909116815260200190565b600091031261011857565b610103916008021c5b60ff1690565b90610103915461030d565b6101036014600161031c565b3461011857610343366004610302565b6102a261034e610327565b60405191829182901515815260200190565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761039757604052565b610360565b9061012a6103a960405190565b9283610376565b6001600160401b03811161039757602090601f01601f19160190565b90826000939282370152565b909291926103ed6103e8826103b0565b61039c565b938185526020850190828401116101185761012a926103cc565b9080601f8301121561011857816020610103933591016103d8565b906020828203126101185781356001600160401b038111610118576101039201610407565b34610118576102a261046261045d366004610422565b61178c565b6040519182918290815260200190565b3461011857610482366004610302565b61048a610be5565b604051005b6001600160a01b038116610111565b9050359061012a8261048f565b90602082820312610118576101039161049e565b346101185761048a6104d23660046104ab565b611759565b34610118576104e7366004610302565b6102a26102e86000546001600160a01b031690565b91906040838203126101185761010390610516818561011d565b936020016102ac565b610103906100f7906001600160a01b031682565b6101039061051f565b61010390610533565b9061054f9061053c565b600052602052604060002090565b634e487b7160e01b600052603260045260246000fd5b80548210156105965761058d600191600052602060002090565b91020190600090565b61055d565b610103916008021c81565b90610103915461059b565b6105bf600391600092610545565b906105c8825490565b8310156105e35750610103916105dd91610573565b906105a6565b80fd5b34610118576102a26104626105fc3660046104fc565b906105b1565b6001600160401b0381116103975760208091020190565b909291926106296103e882610602565b938185526020808601920283019281841161011857915b83831061064d5750505050565b6020809161065b84866102ac565b815201920191610640565b9080601f830112156101185781602061010393359101610619565b906020828203126101185781356001600160401b038111610118576101039201610666565b34610118576102a26102966106bc366004610681565b611a37565b919091606081840312610118576106d8606061039c565b9281356001600160401b03811161011857816106f5918401610407565b845260208201356001600160401b0381116101185781610716918401610407565b602085015260408201356001600160401b038111610118576107389201610407565b6040830152565b63ffffffff8116610111565b9050359061012a8261073f565b919091608081840312610118576107b1610772608061039c565b93600061077f82856102ac565b9086015260206107918282860161011d565b9086015260406107a38282860161074b565b90860152606080930161074b565b90830152565b9291906107c66103e882610602565b93818552602080860192028101918383116101185781905b8382106107ec575050505050565b81356001600160401b0381116101185760209161080c8784938701610407565b8152019101906107de565b9080601f8301121561011857816020610103933591016107b7565b91909160a08184031261011857610849604061039c565b9260006108568284610758565b9085015260808201356001600160401b038111610118576108779201610817565b6020830152565b91909160408184031261011857610895604061039c565b9281356001600160401b03811161011857816108b29184016106c1565b845260208201356001600160401b038111610118576108779201610832565b9291906108e06103e882610602565b93818552602080860192028101918383116101185781905b838210610906575050505050565b81356001600160401b03811161011857602091610926878493870161087e565b8152019101906108f8565b9080601f8301121561011857816020610103933591016108d1565b906020828203126101185781356001600160401b038111610118576101039201610931565b346101185761048a61098436600461094c565b6115e8565b610103916008021c6100f7565b906101039154610989565b61010360006001610996565b6101409061053c565b60208101929161012a91906109ad565b34610118576109d6366004610302565b6102a26109e16109a1565b604051918291826109b6565b346101185761048a610a003660046104ab565b6116d3565b9061054f565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610a41575b6020831014610a3c57565b610a0b565b91607f1691610a31565b80546000939291610a68610a5e83610a21565b8085529360200190565b9160018116908115610aba5750600114610a8157505050565b610a949192939450600052602060002090565b916000925b818410610aa65750500190565b805484840152602090930192600101610a99565b92949550505060ff1916825215156020020190565b9061010391610a4b565b9061012a610af392610aea60405190565b93848092610acf565b0383610376565b6101039081565b6101039054610afa565b610b16906002610a05565b80546001600160a01b0316916101036002610b3360018501610ad9565b9301610b01565b6001600160a01b039091168152929161012a91604090610b669060608701908782036020890152610167565b940152565b34610118576102a2610b86610b813660046102b9565b610b0b565b60405191939193849384610b3a565b346101185761048a610ba836600461012c565b610d06565b610bb5610c41565b61012a610bd3565b6100f76101036101039290565b61010390610bbd565b61012a610be06000610bca565b610d3f565b61012a610bad565b15610bf457565b60405162461bcd60e51b815280610c3d600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b61012a610c566000546001600160a01b031690565b610c6f610c62336100f7565b916001600160a01b031690565b14610bed565b61012a90610c81610c41565b610ce1565b15610c8d57565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b61012a90610be0610cf56100f76000610bca565b6001600160a01b0383161415610c86565b61012a90610c75565b906001600160a01b03905b9181191691161790565b90610d34610103610d3b9261053c565b8254610d0f565b9055565b6000546001600160a01b031690610d57816000610d24565b610d8a610d847f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361053c565b9161053c565b91610d9460405190565b600090a3565b6101039060a01c610316565b6101039054610d9a565b15610db757565b60405162461bcd60e51b815260206004820152601c60248201527f436f6e7472616374206d75737420626520696e697469616c697a6564000000006044820152606490fd5b61012a90610e12610e0d6001610da6565b610db0565b6113bc565b90929192610e276103e8826103b0565b938185526020850190828401116101185761012a92610144565b9080601f8301121561011857815161010392602001610e17565b9050519061012a826102a6565b91909160408184031261011857610e7f604061039c565b815190936001600160401b03821161011857610ea0816107b1938501610e41565b85526020928301610e5b565b929190610ebb6103e882610602565b93818552602080860192028101918383116101185781905b838210610ee1575050505050565b81516001600160401b03811161011857602091610f018784938701610e68565b815201910190610ed3565b9080601f8301121561011857815161010392602001610eac565b906020828203126101185781516001600160401b038111610118576101039201610f0c565b805160608084526101039391604091610f7c91610f6a91850190610167565b60208501518482036020860152610167565b920151906040818403910152610167565b805182526020808201516001600160a01b03169083015261012a9190606090819060408181015163ffffffff1690850152015163ffffffff16910152565b9061010391610167565b90610fe161020a835190565b9081610ff36020830284019460200190565b926000915b83831061100757505050505090565b9091929394602061102361025683856001950387528951610fcb565b9301930191939290610ff8565b61010391602060a082019261104d60008201516000850190610f8d565b0151906080818403910152610fd5565b8051604080845261010393916020916110799190840190610f4b565b920151906020818403910152611030565b906101039161105d565b906110a061020a835190565b90816110b26020830284019460200190565b926000915b8383106110c657505050505090565b909192939460206110e26102568385600195038752895161108a565b93019301919392906110b7565b602080825261010392910190611094565b6040513d6000823e3d90fd5b6101036101036101039290565b634e487b7160e01b600052601160045260246000fd5b600019811461113e5760010190565b611119565b9061114c825190565b811015610596576020809102010190565b9160001960089290920291821b911b610d1a565b9190611180610103610d3b9390565b90835461115d565b908154916801000000000000000083101561039757826111b091600161012a95018155610573565b90611171565b610103606061039c565b9190611180610103610d3b9361110c565b61012a916000916111c0565b8181106111e8575050565b806111f660006001936111d1565b016111dd565b9190601f811161120b57505050565b61121d61012a93600052602060002090565b906020601f84018190048301931061123f575b6020601f9091010401906111dd565b9091508190611230565b90611252815190565b906001600160401b038211610397576112758261126f8554610a21565b856111fc565b602090601f83116001146112b057610d3b9291600091836112a5575b5050600019600883021c1916906002021790565b015190503880611291565b601f198316916112c585600052602060002090565b9260005b818110611303575091600293918560019694106112ea575b50505002019055565b01516000196008601f8516021c191690553880806112e1565b919360206001819287870151815501950192016112c9565b9061012a91611249565b9060001990610d1a565b9061133f610103610d3b9261110c565b8254611325565b61012a919061138f906040906002906113708161136a87516001600160a01b031690565b90610d24565b61138860018201611382602088015190565b9061131b565b0192015190565b9061132f565b9061012a91611346565b92916020610b6661012a9360408701908782036000890152610167565b906000611407926113dd6113d86001546001600160a01b031690565b61053c565b6113fc83637de24fcf6113ef60405190565b9788958694859360e01b90565b8352600483016110ef565b03925af19182156115e3576000926115c0575b5060006114268161110c565b611431610103855190565b8110156115ba578061144661154a9286611143565b51838101611454815161178c565b6114fb600292876114686101038587610a05565b0180546001600160a01b0316611483610c626100f78c610bca565b0361154f57506114a08361149b610103336003610545565b611188565b6114f5886114f08533976114eb602087519b019a6114e46114bf8d5190565b916114dd8d6114cc6111b6565b998a01906001600160a01b03169052565b6020880152565b6040860152565b610a05565b611395565b51935190565b61152c6115267f04c47544b62d97fc6d744e7cc21ed4a24af06a46427efcfd15a0db261dbb27d69390565b9361053c565b9361154261153960405190565b9283928361139f565b0390a361112f565b611426565b8361156182546001600160a01b031690565b339061156c82610c62565b0361157a575b5050506114a0565b61010361149b916115b2946115ad856115a86101036115a2600395546001600160a01b031690565b85610545565b611b3a565b610545565b388381611572565b50509050565b6115dc91923d8091833e6115d48183610376565b810190610f26565b903861141a565b611100565b61012a90610dfc565b61012a906115fd610c41565b61166a565b1561160957565b60405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606490fd5b9060ff60a01b9060a01b610d1a565b90611663610103610d3b92151590565b8254611644565b61168361167e61167a6001610da6565b1590565b611602565b61168e816001610d24565b611699600180611653565b6116c37f9b7c520e9e227a011fa79baf4082565a9fd780e2bcb20889c0fe36eba4b5c8db9161053c565b906116cd60405190565b600090a2565b61012a906115f1565b61012a906116e8610c41565b61172b565b156116f457565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b61174e6117378261053c565b611747610c626100f76000610bca565b14156116ed565b611699816001610d24565b61012a906116dc565b61019b61177a92602092611774815190565b94859290565b93849101610144565b61010391611762565b6117b461179860405190565b80926117a8602083019182611783565b90810382520382610376565b6117c66117bf825190565b9160200190565b2090565b60006117e3610103926117db600090565b506002610a05565b01546001600160a01b031690565b9061181661180a611800845490565b8084529260200190565b92600052602060002090565b9060005b8181106118275750505090565b90919261184b61184460019261183c87610b01565b815260200190565b9460010190565b92910161181a565b90610103916117f1565b9061012a610af39261186e60405190565b93848092611853565b6101039061185d565b9061188d6103e883610602565b918252565b610103604061039c565b6118a46111b6565b600080825260606020830152604082015290565b905250565b61010361189c565b6118cd611892565b906000825260208083016118b86118bd565b6101036118c5565b60005b8281106118f657505050565b6020906119016118df565b81840152016118ea565b9061012a61192161191b84611880565b93610602565b601f1901602084016118e7565b9061012a611976600261193f6111b6565b9461196161195482546001600160a01b031690565b6001600160a01b03168752565b6119706114dd60018301610ad9565b01610b01565b6040840152565b6101039061192e565b61199d6119a291611995606090565b506003610545565b611877565b906119b36119ae835190565b61190b565b91600090836119c18361110c565b6119cc610103845190565b811015611a3057806119e86119e4611a2b9386611143565b5190565b611a106108776119f9836002610a05565b611a0b611a04611892565b948a860152565b61197d565b611a1a8289611143565b52611a258188611143565b5061112f565b6119c1565b5093505050565b90611a436119ae835190565b9160009083611a518361110c565b611a5c610103845190565b811015611a3057806119e86119e4611a749386611143565b611a51565b90611a8861180a611800845490565b9060005b818110611a995750505090565b909192611aae61184460019261183c87610b01565b929101611a8c565b9061010391611a79565b9061012a610af392611ad160405190565b93848092611ab6565b61010390611ac0565b9190820391821161113e57565b634e487b7160e01b600052603160045260246000fd5b61012a91600091611171565b80548015611b35576000190190611b32611b2c8383610573565b90611b06565b55565b611af0565b611b4f611b5692611b4a83611ada565b611bf3565b9092901590565b15611b985760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b6044820152606490fd5b61012a91611bb7611ba7835490565b611bb1600161110c565b90611ae3565b90818103611bc7575b5050611b12565b6111b0611bda6105dd611be19486610573565b9184610573565b3880611bc0565b61010360001961110c565b91908251926000611c038161110c565b855b811015611c4657611c196119e48285611143565b8490611c24565b9190565b14611c3c57611c35611c059161112f565b9050611c03565b9450505050600190565b5093505050611c20611be856fea264697066735822122068a21773be6670efa65e1f0a1d0daaf76454ebcf047be10f0668c8a78dba33c364736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80630183196b146100f257806311d4c3a2146100ed578063392e53cd146100e85780635e8441d3146100e3578063715018a6146100de5780637f200269146100d95780638da5cb5b146100d45780639f4cb8f0146100cf5780639f6eb88c146100ca578063a9c56e91146100c5578063b3533dfe146100c0578063c4d66de8146100bb578063c722f177146100b65763f2fde38b0361011857610b95565b610b6b565b6109ed565b6109c6565b610971565b6106a6565b6105e6565b6104d7565b6104bf565b610472565b610447565b610333565b6102cd565b61027b565b6001600160a01b031690565b90565b6001600160a01b0381165b0361011857565b600080fd5b9050359061012a82610106565b565b90602082820312610118576101039161011d565b9052565b60005b8381106101575750506000910152565b8181015183820152602001610147565b61018861019160209361019b9361017c815190565b80835293849260200190565b95869101610144565b601f01601f191690565b0190565b80516001600160a01b0316825290610103906040806101cd6060840160208701518582036020870152610167565b940151910152565b805182526101039160408101916020015190602081840391015261019f565b90610103916101d5565b9061021461020a835190565b8083529160200190565b90816102266020830284019460200190565b926000915b83831061023a57505050505090565b9091929394602061025d610256838560019503875289516101f4565b9760200190565b930193019193929061022b565b6020808252610103929101906101fe565b34610118576102a261029661029136600461012c565b611986565b6040519182918261026a565b0390f35b80610111565b9050359061012a826102a6565b9060208282031261011857610103916102ac565b34610118576102a26102e86102e33660046102b9565b6117ca565b604051918291826001600160a01b03909116815260200190565b600091031261011857565b610103916008021c5b60ff1690565b90610103915461030d565b6101036014600161031c565b3461011857610343366004610302565b6102a261034e610327565b60405191829182901515815260200190565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761039757604052565b610360565b9061012a6103a960405190565b9283610376565b6001600160401b03811161039757602090601f01601f19160190565b90826000939282370152565b909291926103ed6103e8826103b0565b61039c565b938185526020850190828401116101185761012a926103cc565b9080601f8301121561011857816020610103933591016103d8565b906020828203126101185781356001600160401b038111610118576101039201610407565b34610118576102a261046261045d366004610422565b61178c565b6040519182918290815260200190565b3461011857610482366004610302565b61048a610be5565b604051005b6001600160a01b038116610111565b9050359061012a8261048f565b90602082820312610118576101039161049e565b346101185761048a6104d23660046104ab565b611759565b34610118576104e7366004610302565b6102a26102e86000546001600160a01b031690565b91906040838203126101185761010390610516818561011d565b936020016102ac565b610103906100f7906001600160a01b031682565b6101039061051f565b61010390610533565b9061054f9061053c565b600052602052604060002090565b634e487b7160e01b600052603260045260246000fd5b80548210156105965761058d600191600052602060002090565b91020190600090565b61055d565b610103916008021c81565b90610103915461059b565b6105bf600391600092610545565b906105c8825490565b8310156105e35750610103916105dd91610573565b906105a6565b80fd5b34610118576102a26104626105fc3660046104fc565b906105b1565b6001600160401b0381116103975760208091020190565b909291926106296103e882610602565b938185526020808601920283019281841161011857915b83831061064d5750505050565b6020809161065b84866102ac565b815201920191610640565b9080601f830112156101185781602061010393359101610619565b906020828203126101185781356001600160401b038111610118576101039201610666565b34610118576102a26102966106bc366004610681565b611a37565b919091606081840312610118576106d8606061039c565b9281356001600160401b03811161011857816106f5918401610407565b845260208201356001600160401b0381116101185781610716918401610407565b602085015260408201356001600160401b038111610118576107389201610407565b6040830152565b63ffffffff8116610111565b9050359061012a8261073f565b919091608081840312610118576107b1610772608061039c565b93600061077f82856102ac565b9086015260206107918282860161011d565b9086015260406107a38282860161074b565b90860152606080930161074b565b90830152565b9291906107c66103e882610602565b93818552602080860192028101918383116101185781905b8382106107ec575050505050565b81356001600160401b0381116101185760209161080c8784938701610407565b8152019101906107de565b9080601f8301121561011857816020610103933591016107b7565b91909160a08184031261011857610849604061039c565b9260006108568284610758565b9085015260808201356001600160401b038111610118576108779201610817565b6020830152565b91909160408184031261011857610895604061039c565b9281356001600160401b03811161011857816108b29184016106c1565b845260208201356001600160401b038111610118576108779201610832565b9291906108e06103e882610602565b93818552602080860192028101918383116101185781905b838210610906575050505050565b81356001600160401b03811161011857602091610926878493870161087e565b8152019101906108f8565b9080601f8301121561011857816020610103933591016108d1565b906020828203126101185781356001600160401b038111610118576101039201610931565b346101185761048a61098436600461094c565b6115e8565b610103916008021c6100f7565b906101039154610989565b61010360006001610996565b6101409061053c565b60208101929161012a91906109ad565b34610118576109d6366004610302565b6102a26109e16109a1565b604051918291826109b6565b346101185761048a610a003660046104ab565b6116d3565b9061054f565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610a41575b6020831014610a3c57565b610a0b565b91607f1691610a31565b80546000939291610a68610a5e83610a21565b8085529360200190565b9160018116908115610aba5750600114610a8157505050565b610a949192939450600052602060002090565b916000925b818410610aa65750500190565b805484840152602090930192600101610a99565b92949550505060ff1916825215156020020190565b9061010391610a4b565b9061012a610af392610aea60405190565b93848092610acf565b0383610376565b6101039081565b6101039054610afa565b610b16906002610a05565b80546001600160a01b0316916101036002610b3360018501610ad9565b9301610b01565b6001600160a01b039091168152929161012a91604090610b669060608701908782036020890152610167565b940152565b34610118576102a2610b86610b813660046102b9565b610b0b565b60405191939193849384610b3a565b346101185761048a610ba836600461012c565b610d06565b610bb5610c41565b61012a610bd3565b6100f76101036101039290565b61010390610bbd565b61012a610be06000610bca565b610d3f565b61012a610bad565b15610bf457565b60405162461bcd60e51b815280610c3d600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b61012a610c566000546001600160a01b031690565b610c6f610c62336100f7565b916001600160a01b031690565b14610bed565b61012a90610c81610c41565b610ce1565b15610c8d57565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b61012a90610be0610cf56100f76000610bca565b6001600160a01b0383161415610c86565b61012a90610c75565b906001600160a01b03905b9181191691161790565b90610d34610103610d3b9261053c565b8254610d0f565b9055565b6000546001600160a01b031690610d57816000610d24565b610d8a610d847f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361053c565b9161053c565b91610d9460405190565b600090a3565b6101039060a01c610316565b6101039054610d9a565b15610db757565b60405162461bcd60e51b815260206004820152601c60248201527f436f6e7472616374206d75737420626520696e697469616c697a6564000000006044820152606490fd5b61012a90610e12610e0d6001610da6565b610db0565b6113bc565b90929192610e276103e8826103b0565b938185526020850190828401116101185761012a92610144565b9080601f8301121561011857815161010392602001610e17565b9050519061012a826102a6565b91909160408184031261011857610e7f604061039c565b815190936001600160401b03821161011857610ea0816107b1938501610e41565b85526020928301610e5b565b929190610ebb6103e882610602565b93818552602080860192028101918383116101185781905b838210610ee1575050505050565b81516001600160401b03811161011857602091610f018784938701610e68565b815201910190610ed3565b9080601f8301121561011857815161010392602001610eac565b906020828203126101185781516001600160401b038111610118576101039201610f0c565b805160608084526101039391604091610f7c91610f6a91850190610167565b60208501518482036020860152610167565b920151906040818403910152610167565b805182526020808201516001600160a01b03169083015261012a9190606090819060408181015163ffffffff1690850152015163ffffffff16910152565b9061010391610167565b90610fe161020a835190565b9081610ff36020830284019460200190565b926000915b83831061100757505050505090565b9091929394602061102361025683856001950387528951610fcb565b9301930191939290610ff8565b61010391602060a082019261104d60008201516000850190610f8d565b0151906080818403910152610fd5565b8051604080845261010393916020916110799190840190610f4b565b920151906020818403910152611030565b906101039161105d565b906110a061020a835190565b90816110b26020830284019460200190565b926000915b8383106110c657505050505090565b909192939460206110e26102568385600195038752895161108a565b93019301919392906110b7565b602080825261010392910190611094565b6040513d6000823e3d90fd5b6101036101036101039290565b634e487b7160e01b600052601160045260246000fd5b600019811461113e5760010190565b611119565b9061114c825190565b811015610596576020809102010190565b9160001960089290920291821b911b610d1a565b9190611180610103610d3b9390565b90835461115d565b908154916801000000000000000083101561039757826111b091600161012a95018155610573565b90611171565b610103606061039c565b9190611180610103610d3b9361110c565b61012a916000916111c0565b8181106111e8575050565b806111f660006001936111d1565b016111dd565b9190601f811161120b57505050565b61121d61012a93600052602060002090565b906020601f84018190048301931061123f575b6020601f9091010401906111dd565b9091508190611230565b90611252815190565b906001600160401b038211610397576112758261126f8554610a21565b856111fc565b602090601f83116001146112b057610d3b9291600091836112a5575b5050600019600883021c1916906002021790565b015190503880611291565b601f198316916112c585600052602060002090565b9260005b818110611303575091600293918560019694106112ea575b50505002019055565b01516000196008601f8516021c191690553880806112e1565b919360206001819287870151815501950192016112c9565b9061012a91611249565b9060001990610d1a565b9061133f610103610d3b9261110c565b8254611325565b61012a919061138f906040906002906113708161136a87516001600160a01b031690565b90610d24565b61138860018201611382602088015190565b9061131b565b0192015190565b9061132f565b9061012a91611346565b92916020610b6661012a9360408701908782036000890152610167565b906000611407926113dd6113d86001546001600160a01b031690565b61053c565b6113fc83637de24fcf6113ef60405190565b9788958694859360e01b90565b8352600483016110ef565b03925af19182156115e3576000926115c0575b5060006114268161110c565b611431610103855190565b8110156115ba578061144661154a9286611143565b51838101611454815161178c565b6114fb600292876114686101038587610a05565b0180546001600160a01b0316611483610c626100f78c610bca565b0361154f57506114a08361149b610103336003610545565b611188565b6114f5886114f08533976114eb602087519b019a6114e46114bf8d5190565b916114dd8d6114cc6111b6565b998a01906001600160a01b03169052565b6020880152565b6040860152565b610a05565b611395565b51935190565b61152c6115267f04c47544b62d97fc6d744e7cc21ed4a24af06a46427efcfd15a0db261dbb27d69390565b9361053c565b9361154261153960405190565b9283928361139f565b0390a361112f565b611426565b8361156182546001600160a01b031690565b339061156c82610c62565b0361157a575b5050506114a0565b61010361149b916115b2946115ad856115a86101036115a2600395546001600160a01b031690565b85610545565b611b3a565b610545565b388381611572565b50509050565b6115dc91923d8091833e6115d48183610376565b810190610f26565b903861141a565b611100565b61012a90610dfc565b61012a906115fd610c41565b61166a565b1561160957565b60405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606490fd5b9060ff60a01b9060a01b610d1a565b90611663610103610d3b92151590565b8254611644565b61168361167e61167a6001610da6565b1590565b611602565b61168e816001610d24565b611699600180611653565b6116c37f9b7c520e9e227a011fa79baf4082565a9fd780e2bcb20889c0fe36eba4b5c8db9161053c565b906116cd60405190565b600090a2565b61012a906115f1565b61012a906116e8610c41565b61172b565b156116f457565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b61174e6117378261053c565b611747610c626100f76000610bca565b14156116ed565b611699816001610d24565b61012a906116dc565b61019b61177a92602092611774815190565b94859290565b93849101610144565b61010391611762565b6117b461179860405190565b80926117a8602083019182611783565b90810382520382610376565b6117c66117bf825190565b9160200190565b2090565b60006117e3610103926117db600090565b506002610a05565b01546001600160a01b031690565b9061181661180a611800845490565b8084529260200190565b92600052602060002090565b9060005b8181106118275750505090565b90919261184b61184460019261183c87610b01565b815260200190565b9460010190565b92910161181a565b90610103916117f1565b9061012a610af39261186e60405190565b93848092611853565b6101039061185d565b9061188d6103e883610602565b918252565b610103604061039c565b6118a46111b6565b600080825260606020830152604082015290565b905250565b61010361189c565b6118cd611892565b906000825260208083016118b86118bd565b6101036118c5565b60005b8281106118f657505050565b6020906119016118df565b81840152016118ea565b9061012a61192161191b84611880565b93610602565b601f1901602084016118e7565b9061012a611976600261193f6111b6565b9461196161195482546001600160a01b031690565b6001600160a01b03168752565b6119706114dd60018301610ad9565b01610b01565b6040840152565b6101039061192e565b61199d6119a291611995606090565b506003610545565b611877565b906119b36119ae835190565b61190b565b91600090836119c18361110c565b6119cc610103845190565b811015611a3057806119e86119e4611a2b9386611143565b5190565b611a106108776119f9836002610a05565b611a0b611a04611892565b948a860152565b61197d565b611a1a8289611143565b52611a258188611143565b5061112f565b6119c1565b5093505050565b90611a436119ae835190565b9160009083611a518361110c565b611a5c610103845190565b811015611a3057806119e86119e4611a749386611143565b611a51565b90611a8861180a611800845490565b9060005b818110611a995750505090565b909192611aae61184460019261183c87610b01565b929101611a8c565b9061010391611a79565b9061012a610af392611ad160405190565b93848092611ab6565b61010390611ac0565b9190820391821161113e57565b634e487b7160e01b600052603160045260246000fd5b61012a91600091611171565b80548015611b35576000190190611b32611b2c8383610573565b90611b06565b55565b611af0565b611b4f611b5692611b4a83611ada565b611bf3565b9092901590565b15611b985760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b6044820152606490fd5b61012a91611bb7611ba7835490565b611bb1600161110c565b90611ae3565b90818103611bc7575b5050611b12565b6111b0611bda6105dd611be19486610573565b9184610573565b3880611bc0565b61010360001961110c565b91908251926000611c038161110c565b855b811015611c4657611c196119e48285611143565b8490611c24565b9190565b14611c3c57611c35611c059161112f565b9050611c03565b9450505050600190565b5093505050611c20611be856fea264697066735822122068a21773be6670efa65e1f0a1d0daaf76454ebcf047be10f0668c8a78dba33c364736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize(address)": {
        "params": {
          "_verifyDomainProcessor": "Address of the VerifyDomainProcessor contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateVerifyDomainProcessor(address)": {
        "params": {
          "_verifyDomainProcessor": "Address of the new VerifyDomainProcessor contract"
        }
      },
      "verifyDomains(((string,string,string),((bytes32,address,uint32,uint32),bytes[]))[])": {
        "params": {
          "_proofs": "Array of domain ownership TLS proofs"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address)": {
        "notice": "ONLY OWNER: Initialize the contract with the VerifyDomainProcessor and exchange contracts. This can only be called once."
      },
      "updateVerifyDomainProcessor(address)": {
        "notice": "ONLY OWNER: Update the verify domain processor"
      },
      "verifyDomains(((string,string,string),((bytes32,address,uint32,uint32),bytes[]))[])": {
        "notice": "Verify domains and add them to the registry. If domain is transferred off-chain to another party  then they can re-verify the domain and claim ownership of the domain and previous ownership is removed. The existing owner can re-verify the domain, say after the domain has expired to update the expiry time on the domain. Function reverts if: - Domain ownership TLS proofs are invalid "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6979,
        "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
        "label": "verifyDomainProcessor",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVerifyDomainProcessor)11319"
      },
      {
        "astId": 6981,
        "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
        "label": "isInitialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6986,
        "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
        "label": "domains",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Domain)11268_storage)"
      },
      {
        "astId": 6991,
        "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
        "label": "userDomains",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVerifyDomainProcessor)11319": {
        "encoding": "inplace",
        "label": "contract IVerifyDomainProcessor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(Domain)11268_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IVerifiedDomainRegistry.Domain)",
        "numberOfBytes": "32",
        "value": "t_struct(Domain)11268_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Domain)11268_storage": {
        "encoding": "inplace",
        "label": "struct IVerifiedDomainRegistry.Domain",
        "members": [
          {
            "astId": 11263,
            "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11265,
            "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 11267,
            "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
            "label": "expiryTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}