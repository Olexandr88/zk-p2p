{
  "address": "0xf491470B2459d65C92D0E6673A7672E2FFB26F02",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "DomainListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "DomainListingRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "DomainTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "domainId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "domainName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "name": "DomainVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "ExchangeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        }
      ],
      "name": "ExchangeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IVerifyDomainProcessor",
          "name": "newVerifyDomainProcessor",
          "type": "address"
        }
      ],
      "name": "VerifyDomainProcessorUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchange",
          "type": "address"
        }
      ],
      "name": "addExchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "domains",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "exchange",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exchanges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_domainId",
          "type": "bytes32"
        }
      ],
      "name": "getDomain",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "domainId",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "expiryTime",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "exchange",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "listingId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IVerifiedDomainRegistry.Domain",
              "name": "domain",
              "type": "tuple"
            }
          ],
          "internalType": "struct IVerifiedDomainRegistry.DomainWithId",
          "name": "domainInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_domainName",
          "type": "string"
        }
      ],
      "name": "getDomainId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_domainId",
          "type": "bytes32"
        }
      ],
      "name": "getDomainOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_domains",
          "type": "bytes32[]"
        }
      ],
      "name": "getDomains",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "domainId",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "expiryTime",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "exchange",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "listingId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IVerifiedDomainRegistry.Domain",
              "name": "domain",
              "type": "tuple"
            }
          ],
          "internalType": "struct IVerifiedDomainRegistry.DomainWithId[]",
          "name": "domainInfo",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchanges",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserDomains",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "domainId",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "expiryTime",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "exchange",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "listingId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IVerifiedDomainRegistry.Domain",
              "name": "domain",
              "type": "tuple"
            }
          ],
          "internalType": "struct IVerifiedDomainRegistry.DomainWithId[]",
          "name": "domainInfo",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVerifyDomainProcessor",
          "name": "_verifyDomainProcessor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isExchange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_domainId",
          "type": "bytes32"
        }
      ],
      "name": "removeDomainListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchange",
          "type": "address"
        }
      ],
      "name": "removeExchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_domainId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_listingId",
          "type": "uint256"
        }
      ],
      "name": "setDomainListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_domainId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "updateDomainOnSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVerifyDomainProcessor",
          "name": "_verifyDomainProcessor",
          "type": "address"
        }
      ],
      "name": "updateVerifyDomainProcessor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userDomains",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifyDomainProcessor",
      "outputs": [
        {
          "internalType": "contract IVerifyDomainProcessor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "provider",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "parameters",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "context",
                  "type": "string"
                }
              ],
              "internalType": "struct Claims.ClaimInfo",
              "name": "claimInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "identifier",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "address",
                      "name": "owner",
                      "type": "address"
                    },
                    {
                      "internalType": "uint32",
                      "name": "timestampS",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "epoch",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct Claims.CompleteClaimData",
                  "name": "claim",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes[]",
                  "name": "signatures",
                  "type": "bytes[]"
                }
              ],
              "internalType": "struct Claims.SignedClaim",
              "name": "signedClaim",
              "type": "tuple"
            }
          ],
          "internalType": "struct IProxyBaseProcessor.Proof[]",
          "name": "_proofs",
          "type": "tuple[]"
        }
      ],
      "name": "verifyDomains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0c08f32d0b1f5b5711571d1bacc5c9d152ff56efffadb21209f64f45f98e9c7",
  "receipt": {
    "to": null,
    "from": "0x84e113087C97Cd80eA9D78983D4B8Ff61ECa1929",
    "contractAddress": "0xf491470B2459d65C92D0E6673A7672E2FFB26F02",
    "transactionIndex": 29,
    "gasUsed": "2387918",
    "logsBloom": "0x
    "blockHash": "0xb10e7252f1a7df41ea047166f97b90eb31a8e2bdc4482781dc04e76df0731072",
    "transactionHash": "0xd0c08f32d0b1f5b5711571d1bacc5c9d152ff56efffadb21209f64f45f98e9c7",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 6678944,
        "transactionHash": "0xd0c08f32d0b1f5b5711571d1bacc5c9d152ff56efffadb21209f64f45f98e9c7",
        "address": "0xf491470B2459d65C92D0E6673A7672E2FFB26F02",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929"
        ],
        "data": "0x",
        "logIndex": 54,
        "blockHash": "0xb10e7252f1a7df41ea047166f97b90eb31a8e2bdc4482781dc04e76df0731072"
      }
    ],
    "blockNumber": 6678944,
    "cumulativeGasUsed": "5480459",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5430ec5a2a9a288ed108e648fd68abb0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"DomainListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"DomainListingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"DomainTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"domainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"DomainVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"ExchangeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"}],\"name\":\"ExchangeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IVerifyDomainProcessor\",\"name\":\"newVerifyDomainProcessor\",\"type\":\"address\"}],\"name\":\"VerifyDomainProcessorUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"addExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchanges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_domainId\",\"type\":\"bytes32\"}],\"name\":\"getDomain\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"internalType\":\"struct IVerifiedDomainRegistry.Domain\",\"name\":\"domain\",\"type\":\"tuple\"}],\"internalType\":\"struct IVerifiedDomainRegistry.DomainWithId\",\"name\":\"domainInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domainName\",\"type\":\"string\"}],\"name\":\"getDomainId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_domainId\",\"type\":\"bytes32\"}],\"name\":\"getDomainOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_domains\",\"type\":\"bytes32[]\"}],\"name\":\"getDomains\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"internalType\":\"struct IVerifiedDomainRegistry.Domain\",\"name\":\"domain\",\"type\":\"tuple\"}],\"internalType\":\"struct IVerifiedDomainRegistry.DomainWithId[]\",\"name\":\"domainInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchanges\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDomains\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"internalType\":\"struct IVerifiedDomainRegistry.Domain\",\"name\":\"domain\",\"type\":\"tuple\"}],\"internalType\":\"struct IVerifiedDomainRegistry.DomainWithId[]\",\"name\":\"domainInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVerifyDomainProcessor\",\"name\":\"_verifyDomainProcessor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_domainId\",\"type\":\"bytes32\"}],\"name\":\"removeDomainListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"removeExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_domainId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"}],\"name\":\"setDomainListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_domainId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"updateDomainOnSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVerifyDomainProcessor\",\"name\":\"_verifyDomainProcessor\",\"type\":\"address\"}],\"name\":\"updateVerifyDomainProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDomains\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyDomainProcessor\",\"outputs\":[{\"internalType\":\"contract IVerifyDomainProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parameters\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"context\",\"type\":\"string\"}],\"internalType\":\"struct Claims.ClaimInfo\",\"name\":\"claimInfo\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestampS\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"internalType\":\"struct Claims.CompleteClaimData\",\"name\":\"claim\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Claims.SignedClaim\",\"name\":\"signedClaim\",\"type\":\"tuple\"}],\"internalType\":\"struct IProxyBaseProcessor.Proof[]\",\"name\":\"_proofs\",\"type\":\"tuple[]\"}],\"name\":\"verifyDomains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addExchange(address)\":{\"params\":{\"_exchange\":\"Address of the exchange contract\"}},\"initialize(address)\":{\"params\":{\"_verifyDomainProcessor\":\"Address of the VerifyDomainProcessor contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeDomainListing(bytes32)\":{\"params\":{\"_domainId\":\"Domain ID to update listing status for\"}},\"removeExchange(address)\":{\"params\":{\"_exchange\":\"Address of the exchange contract\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDomainListing(bytes32,uint256)\":{\"params\":{\"_domainId\":\"Domain to set listed status for\",\"_listingId\":\"Listing Id of domain on calling exchange\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateDomainOnSale(bytes32,address)\":{\"params\":{\"_domainId\":\"Domain ID to update listing status for\",\"_newOwner\":\"New owner of the domain\"}},\"updateVerifyDomainProcessor(address)\":{\"params\":{\"_verifyDomainProcessor\":\"Address of the new VerifyDomainProcessor contract\"}},\"verifyDomains(((string,string,string),((bytes32,address,uint32,uint32),bytes[]))[])\":{\"params\":{\"_proofs\":\"Array of domain ownership TLS proofs\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addExchange(address)\":{\"notice\":\"ONLY OWNER: Add an exchange to the registry. This can only be called after the contract has been initialized. Exchange must not already exist in the registry. \"},\"initialize(address)\":{\"notice\":\"ONLY OWNER: Initialize the contract with the VerifyDomainProcessor and exchange contracts. This can only be called once.\"},\"removeDomainListing(bytes32)\":{\"notice\":\"ONLY EXCHANGE: Remove a listing status from domain. We check that the calling exchange is the one that the domain is listed on. This removes the exchange and listingId from the domain. \"},\"removeExchange(address)\":{\"notice\":\"ONLY OWNER: Remove an exchange from the registry. Exchange must exist in the registry. \"},\"setDomainListing(bytes32,uint256)\":{\"notice\":\"ONLY EXCHANGE: Add a listing status to domain. We check that the domain has been verified and is listed on the calling exchange. This sets the exchange and listingId of the domain. \"},\"updateDomainOnSale(bytes32,address)\":{\"notice\":\"ONLY EXCHANGE: Update domain on sale. We check that the calling exchange is the one that the domain is listed on. This updates the ownership of the domain to the new owner as well as removes the listing status from the domain. \"},\"updateVerifyDomainProcessor(address)\":{\"notice\":\"ONLY OWNER: Update the verify domain processor\"},\"verifyDomains(((string,string,string),((bytes32,address,uint32,uint32),bytes[]))[])\":{\"notice\":\"Verify domains and add them to the registry. If domain is transferred off-chain to another party  then they can re-verify the domain and claim ownership of the domain and previous ownership is removed. The existing owner can re-verify the domain, say after the domain has expired to update the expiry time on the domain. Function reverts if: - Domain ownership TLS proofs are invalid \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VerifiedDomainRegistry.sol\":\"VerifiedDomainRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@reclaimprotocol/verifier-solidity-sdk/contracts/Claims.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\n\\n/**\\n * Library to assist with requesting,\\n * serialising & verifying credentials\\n */\\nlibrary Claims {\\n\\t/** Data required to describe a claim */\\n\\tstruct CompleteClaimData {\\n\\t\\tbytes32 identifier;\\n\\t\\taddress owner;\\n\\t\\tuint32 timestampS;\\n\\t\\tuint32 epoch;\\n\\t}\\n\\n\\tstruct ClaimInfo {\\n\\t\\tstring provider;\\n\\t\\tstring parameters;\\n\\t\\tstring context;\\n\\t}\\n\\n\\t/** Claim with signatures & signer */\\n\\tstruct SignedClaim {\\n\\t\\tCompleteClaimData claim;\\n\\t\\tbytes[] signatures;\\n\\t}\\n\\n\\t/**\\n\\t * Asserts that the claim is signed by the expected witnesses\\n\\t */\\n\\tfunction assertValidSignedClaim(\\n\\t\\tSignedClaim memory self,\\n\\t\\taddress[] memory expectedWitnessAddresses\\n\\t) internal pure {\\n\\t\\trequire(self.signatures.length > 0, \\\"No signatures\\\");\\n\\t\\taddress[] memory signedWitnesses = recoverSignersOfSignedClaim(self);\\n\\t\\tfor (uint256 i = 0; i < expectedWitnessAddresses.length; i++) {\\n\\t\\t\\tbool found = false;\\n\\t\\t\\tfor (uint256 j = 0; j < signedWitnesses.length; j++) {\\n\\t\\t\\t\\tif (signedWitnesses[j] == expectedWitnessAddresses[i]) {\\n\\t\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\trequire(found, \\\"Missing witness signature\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev recovers the signer of the claim\\n\\t */\\n\\tfunction recoverSignersOfSignedClaim(\\n\\t\\tSignedClaim memory self\\n\\t) internal pure returns (address[] memory) {\\n\\t\\tbytes memory serialised = serialise(self.claim);\\n\\t\\taddress[] memory signers = new address[](self.signatures.length);\\n\\t\\tfor (uint256 i = 0; i < self.signatures.length; i++) {\\n\\t\\t\\tsigners[i] = verifySignature(serialised, self.signatures[i]);\\n\\t\\t}\\n\\n\\t\\treturn signers;\\n\\t}\\n\\n\\t/**\\n\\t * @dev serialises the credential into a string;\\n\\t * the string is used to verify the signature\\n\\t *\\n\\t * the serialisation is the same as done by the TS library\\n\\t */\\n\\tfunction serialise(\\n\\t\\tCompleteClaimData memory self\\n\\t) internal pure returns (bytes memory) {\\n\\t\\treturn\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tStringUtils.bytes2str(abi.encodePacked(self.identifier)),\\n\\t\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.address2str(self.owner),\\n\\t\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.uint2str(self.timestampS),\\n\\t\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.uint2str(self.epoch)\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns the address of the user that generated the signature\\n\\t */\\n\\tfunction verifySignature(\\n\\t\\tbytes memory content,\\n\\t\\tbytes memory signature\\n\\t) internal pure returns (address signer) {\\n\\t\\tbytes32 signedHash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.uint2str(content.length),\\n\\t\\t\\t\\tcontent\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn ECDSA.recover(signedHash, signature);\\n\\t}\\n\\n\\tfunction hashClaimInfo(ClaimInfo memory claimInfo) internal pure returns (bytes32) {\\n\\t\\tbytes memory serialised = abi.encodePacked(\\n\\t\\t\\tclaimInfo.provider,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\tclaimInfo.parameters,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\tclaimInfo.context\\n\\t\\t);\\n\\t\\treturn keccak256(serialised);\\n\\t}\\n}\\n\",\"keccak256\":\"0x87a41e75d358e86798456ad45e03446cde8f1519c8af17905f6c8b852a5f2da7\",\"license\":\"MIT\"},\"@reclaimprotocol/verifier-solidity-sdk/contracts/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * Utilities for string manipulation & conversion\\n */\\nlibrary StringUtils {\\n\\tfunction address2str(address x) internal pure returns (string memory) {\\n\\t\\tbytes memory s = new bytes(40);\\n\\t\\tfor (uint i = 0; i < 20; i++) {\\n\\t\\t\\tbytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\\n\\t\\t\\tbytes1 hi = bytes1(uint8(b) / 16);\\n\\t\\t\\tbytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n\\t\\t\\ts[2 * i] = getChar(hi);\\n\\t\\t\\ts[2 * i + 1] = getChar(lo);\\n\\t\\t}\\n\\t\\treturn string(abi.encodePacked(\\\"0x\\\", s));\\n\\t}\\n\\n\\tfunction bytes2str(bytes memory buffer) internal pure returns (string memory) {\\n\\t\\t// Fixed buffer size for hexadecimal convertion\\n\\t\\tbytes memory converted = new bytes(buffer.length * 2);\\n\\t\\tbytes memory _base = \\\"0123456789abcdef\\\";\\n\\n\\t\\tfor (uint256 i = 0; i < buffer.length; i++) {\\n\\t\\t\\tconverted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n\\t\\t\\tconverted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n\\t\\t}\\n\\n\\t\\treturn string(abi.encodePacked(\\\"0x\\\", converted));\\n\\t}\\n\\n\\tfunction getChar(bytes1 b) internal pure returns (bytes1 c) {\\n\\t\\tif (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n\\t\\telse return bytes1(uint8(b) + 0x57);\\n\\t}\\n\\n\\tfunction bool2str(bool _b) internal pure returns (string memory _uintAsString) {\\n\\t\\tif (_b) {\\n\\t\\t\\treturn \\\"true\\\";\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"false\\\";\\n\\t\\t}\\n\\t}\\n\\n\\tfunction uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n\\t\\tif (_i == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint j = _i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len;\\n\\t\\twhile (_i != 0) {\\n\\t\\t\\tk = k - 1;\\n\\t\\t\\tuint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n\\t\\t\\tbytes1 b1 = bytes1(temp);\\n\\t\\t\\tbstr[k] = b1;\\n\\t\\t\\t_i /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n\\n\\tfunction areEqual(\\n\\t\\tstring calldata _a,\\n\\t\\tstring storage _b\\n\\t) internal pure returns (bool) {\\n\\t\\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\\n\\t}\\n\\n\\tfunction areEqual(string memory _a, string memory _b) internal pure returns (bool) {\\n\\t\\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\\n\\t}\\n\\n\\tfunction toLower(string memory str) internal pure returns (string memory) {\\n\\t\\tbytes memory bStr = bytes(str);\\n\\t\\tbytes memory bLower = new bytes(bStr.length);\\n\\t\\tfor (uint i = 0; i < bStr.length; i++) {\\n\\t\\t\\t// Uppercase character...\\n\\t\\t\\tif ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\n\\t\\t\\t\\t// So we add 32 to make it lowercase\\n\\t\\t\\t\\tbLower[i] = bytes1(uint8(bStr[i]) + 32);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbLower[i] = bStr[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn string(bLower);\\n\\t}\\n\\n\\tfunction substring(\\n\\t\\tstring memory str,\\n\\t\\tuint startIndex,\\n\\t\\tuint endIndex\\n\\t) internal pure returns (string memory) {\\n\\t\\tbytes memory strBytes = bytes(str);\\n\\t\\tbytes memory result = new bytes(endIndex - startIndex);\\n\\t\\tfor (uint i = startIndex; i < endIndex; i++) {\\n\\t\\t\\tresult[i - startIndex] = strBytes[i];\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n}\\n\",\"keccak256\":\"0x15feebafef16d4c74c043b39e652ddae0e121987ceca74b663f6a2d2d7ba8b4b\",\"license\":\"MIT\"},\"contracts/VerifiedDomainRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Bytes32ArrayUtils } from \\\"./external/lib/Bytes32ArrayUtils.sol\\\";\\nimport { AddressArrayUtils } from \\\"./external/lib/AddressArrayUtils.sol\\\";\\n\\nimport { IDomainExchange } from \\\"./interfaces/IDomainExchange.sol\\\";\\nimport { IVerifiedDomainRegistry } from \\\"./interfaces/IVerifiedDomainRegistry.sol\\\";\\nimport { IVerifyDomainProcessor } from \\\"./interfaces/IVerifyDomainProcessor.sol\\\";\\n\\n\\npragma solidity ^0.8.18;\\n\\ncontract VerifiedDomainRegistry is IVerifiedDomainRegistry, Ownable {\\n\\n    using Bytes32ArrayUtils for bytes32[];\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Events ============ */\\n    event DomainVerified(\\n        bytes32 indexed domainId,\\n        address indexed owner,\\n        string domainName,\\n        uint256 expiryTime\\n    );\\n\\n    event DomainListed(\\n        bytes32 indexed domainId,\\n        address indexed exchange,\\n        uint256 indexed listingId\\n    );\\n\\n    event DomainListingRemoved(\\n        bytes32 indexed domainId,\\n        address indexed exchange\\n    );\\n\\n    event DomainTransferred(\\n        bytes32 indexed domainId,\\n        address indexed oldOwner,\\n        address indexed newOwner\\n    );\\n\\n\\n    event VerifyDomainProcessorUpdated(\\n        IVerifyDomainProcessor indexed newVerifyDomainProcessor\\n    );\\n\\n    event ExchangeAdded(address indexed exchange);\\n    event ExchangeRemoved(address indexed exchange);\\n\\n    /* ============ Modifiers ============ */\\n    modifier onlyExchange() {\\n        require(isExchange[msg.sender], \\\"Caller must be exchange\\\");\\n        _;\\n    }\\n\\n    modifier onlyInitialized() {\\n        require(isInitialized, \\\"Contract must be initialized\\\");\\n        _;\\n    }\\n\\n    /* ============ Public Variables ============ */\\n    IVerifyDomainProcessor public verifyDomainProcessor;\\n    address[] public exchanges;\\n    mapping(address=>bool) public isExchange;\\n\\n    bool public isInitialized;\\n\\n    mapping(bytes32 => Domain) public domains;\\n    mapping(address => bytes32[]) public userDomains;\\n\\n    /* ============ Constructor ============ */\\n    \\n    constructor() Ownable() {}\\n\\n    /* ============ Public Functions ============ */\\n\\n    /**\\n     * @notice Verify domains and add them to the registry. If domain is transferred off-chain to another party \\n     * then they can re-verify the domain and claim ownership of the domain and previous ownership is removed.\\n     * The existing owner can re-verify the domain, say after the domain has expired to update the expiry time on\\n     * the domain. Function reverts if:\\n     * - Domain ownership TLS proofs are invalid\\n     * \\n     * @param _proofs           Array of domain ownership TLS proofs\\n     */\\n    function verifyDomains(IVerifyDomainProcessor.Proof[] memory _proofs) external override\\n        onlyInitialized\\n    {\\n        IVerifyDomainProcessor.DomainRaw[] memory rawDomains = verifyDomainProcessor.verifyProofs(\\n            _proofs\\n        );\\n\\n        for (uint256 i = 0; i < rawDomains.length; i++) {\\n            IVerifyDomainProcessor.DomainRaw memory rawDomain = rawDomains[i];\\n            bytes32 domainId = getDomainId(rawDomain.name);\\n\\n            Domain storage domain = domains[domainId];\\n            if (domain.owner == address(0)) {\\n                // Case 1.1: Domain has no owner\\n                // Add caller as owner\\n                userDomains[msg.sender].push(domainId);\\n\\n                // Set domain details\\n                domains[domainId] = Domain({\\n                    owner: msg.sender,\\n                    name: rawDomain.name,\\n                    expiryTime: rawDomain.expiryTime,\\n                    exchange: address(0),\\n                    listingId: 0\\n                });\\n            } else {\\n                // Case 2: Domain has owner\\n                // Case 2.1: Caller is owner; skip\\n                if (domain.owner == msg.sender) {\\n                    // No updates to userDomains\\n\\n                    // Update domain details; Only expiry time can change\\n                    // Owner and domain name cannot change\\n                    // Exchange and listingId are kept as is\\n                    domain.expiryTime = rawDomain.expiryTime;\\n                }\\n                // Case 2.2: Caller is NOT owner\\n                if (domain.owner != msg.sender) {\\n                    // Remove ownership from old owner\\n                    userDomains[domain.owner].removeStorage(domainId);\\n\\n                    // Remove listing on exchange if it exists\\n                    if (domain.exchange != address(0)) {\\n                        IDomainExchange(domain.exchange).registryRemoveListing(domain.listingId);\\n                    }\\n\\n                    // Add domain to new owner\\n                    userDomains[msg.sender].push(domainId);\\n\\n                    // Set domain details except for domain name as it cannot change\\n                    domain.owner = msg.sender;\\n                    domain.expiryTime = rawDomain.expiryTime;\\n                    domain.exchange = address(0);\\n                    domain.listingId = 0;\\n                }\\n            }\\n\\n            emit DomainVerified(domainId, msg.sender, rawDomain.name, rawDomain.expiryTime);\\n        }\\n    }\\n\\n    // Todo: Add function for relinquishing ownership of domain\\n\\n    /**\\n     * @notice ONLY EXCHANGE: Add a listing status to domain. We check that the domain has been verified and is\\n     * listed on the calling exchange. This sets the exchange and listingId of the domain.\\n     * \\n     * @param _domainId     Domain to set listed status for\\n     * @param _listingId    Listing Id of domain on calling exchange\\n     */\\n    function setDomainListing(bytes32 _domainId, uint256 _listingId)\\n        external\\n        override\\n        onlyInitialized\\n        onlyExchange\\n    {\\n        Domain storage domain = domains[_domainId];\\n\\n        require(domain.owner != address(0), \\\"Domain must be verified\\\");\\n        require(domain.exchange == address(0), \\\"Domain already listed on another exchange\\\");\\n\\n        domain.exchange = msg.sender;\\n        domain.listingId = _listingId;\\n\\n        emit DomainListed(_domainId, msg.sender, _listingId);\\n    }\\n\\n    /**\\n     * @notice ONLY EXCHANGE: Remove a listing status from domain. We check that the calling exchange is the one\\n     * that the domain is listed on. This removes the exchange and listingId from the domain.\\n     * \\n     * @param _domainId            Domain ID to update listing status for\\n     */\\n    function removeDomainListing(bytes32 _domainId) external override onlyInitialized onlyExchange {\\n        Domain storage domain = domains[_domainId];\\n        require(domain.exchange == msg.sender, \\\"Domain not listed on calling exchange\\\");\\n\\n        _removeDomainListing(domain);\\n\\n        emit DomainListingRemoved(_domainId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice ONLY EXCHANGE: Update domain on sale. We check that the calling exchange is the one that the domain\\n     * is listed on. This updates the ownership of the domain to the new owner as well as removes the listing status\\n     * from the domain.\\n     * \\n     * @param _domainId            Domain ID to update listing status for\\n     * @param _newOwner            New owner of the domain\\n     */\\n    function updateDomainOnSale(bytes32 _domainId, address _newOwner) \\n        external \\n        override \\n        onlyInitialized \\n        onlyExchange \\n    {\\n        Domain storage domain = domains[_domainId];\\n        require(domain.exchange == msg.sender, \\\"Domain not listed on calling exchange\\\");\\n\\n        _removeDomainListing(domain);\\n\\n        // Update ownership\\n        address oldOwner = domain.owner;\\n        domain.owner = _newOwner;\\n        userDomains[oldOwner].removeStorage(_domainId);\\n        userDomains[_newOwner].push(_domainId);\\n\\n        emit DomainTransferred(_domainId, oldOwner, _newOwner);\\n    }\\n\\n    /* ============ Admin Functions ============ */\\n\\n    /**\\n     * @notice ONLY OWNER: Initialize the contract with the VerifyDomainProcessor and exchange contracts.\\n     * This can only be called once.\\n     *\\n     * @param _verifyDomainProcessor    Address of the VerifyDomainProcessor contract\\n     */\\n    function initialize(\\n        IVerifyDomainProcessor _verifyDomainProcessor\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(!isInitialized, \\\"Already initialized\\\");\\n\\n        verifyDomainProcessor = _verifyDomainProcessor;\\n\\n        isInitialized = true;\\n\\n        emit VerifyDomainProcessorUpdated(_verifyDomainProcessor);\\n    }\\n\\n    /**\\n     * @notice ONLY OWNER: Add an exchange to the registry. This can only be called after the contract has been initialized.\\n     * Exchange must not already exist in the registry.\\n     * \\n     * @param _exchange     Address of the exchange contract\\n     */\\n    function addExchange(address _exchange) external onlyOwner onlyInitialized {\\n        require(!isExchange[_exchange], \\\"Duplicate exchange\\\");\\n\\n        isExchange[_exchange] = true;\\n        exchanges.push(_exchange);\\n\\n        emit ExchangeAdded(_exchange);\\n    }\\n\\n    /**\\n     * @notice ONLY OWNER: Remove an exchange from the registry. Exchange must exist in the registry.\\n     * \\n     * @param _exchange     Address of the exchange contract\\n     */\\n    function removeExchange(address _exchange) external onlyOwner onlyInitialized {\\n        require(isExchange[_exchange], \\\"Exchange does not exist\\\");\\n\\n        isExchange[_exchange] = false;\\n        exchanges.removeStorage(_exchange);\\n\\n        emit ExchangeRemoved(_exchange);\\n    }\\n\\n    /**\\n     * @notice ONLY OWNER: Update the verify domain processor\\n     *\\n     * @param _verifyDomainProcessor    Address of the new VerifyDomainProcessor contract\\n     */\\n    function updateVerifyDomainProcessor(IVerifyDomainProcessor _verifyDomainProcessor) external onlyOwner {\\n        require(address(_verifyDomainProcessor) != address(0), \\\"Invalid address\\\");\\n\\n        verifyDomainProcessor = _verifyDomainProcessor;\\n        emit VerifyDomainProcessorUpdated(_verifyDomainProcessor);\\n    }\\n\\n    /* ============ View Functions ============ */\\n\\n    function getDomainId(string memory _domainName) public pure override returns (bytes32) {\\n        return keccak256(abi.encodePacked(_domainName));\\n    }\\n\\n    function getDomainOwner(bytes32 _domainId) external view override returns (address) {        \\n        return domains[_domainId].owner;\\n    }\\n\\n    function getUserDomains(address _user) external view returns (DomainWithId[] memory domainInfo) {\\n        bytes32[] memory domainIds = userDomains[_user];\\n        \\n        domainInfo = new DomainWithId[](domainIds.length);\\n        for (uint256 i = 0; i < domainIds.length; i++) {\\n            bytes32 domainId = domainIds[i];\\n            domainInfo[i] = DomainWithId({\\n                domainId: domainId,\\n                domain: domains[domainId]\\n            });\\n        }\\n    }\\n\\n    function getDomain(bytes32 _domainId) external view override returns (DomainWithId memory domainInfo) {\\n        return DomainWithId({\\n            domainId: _domainId,\\n            domain: domains[_domainId]\\n        });\\n    }\\n\\n    function getDomains(bytes32[] memory _domains) external view returns (DomainWithId[] memory domainInfo) {\\n        domainInfo = new DomainWithId[](_domains.length);\\n        for (uint256 i = 0; i < _domains.length; i++) {\\n            bytes32 domainId = _domains[i];\\n            domainInfo[i] = DomainWithId({\\n                domainId: domainId,\\n                domain: domains[domainId]\\n            });\\n        }\\n    }\\n\\n    function getExchanges() external view returns (address[] memory) {\\n        return exchanges;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _removeDomainListing(Domain storage _domain) internal {\\n        delete _domain.exchange;\\n        delete _domain.listingId;\\n    }\\n}\",\"keccak256\":\"0x8162cd31c4aa35caa77d08e3115681bbe33e842a9640b0106816e2ca09137ea8\",\"license\":\"MIT\"},\"contracts/external/interfaces/IProxyBaseProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Claims } from \\\"@reclaimprotocol/verifier-solidity-sdk/contracts/Claims.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ninterface IProxyBaseProcessor {\\n    \\n    struct Proof {\\n        Claims.ClaimInfo claimInfo;\\n        Claims.SignedClaim signedClaim;\\n    }\\n}\\n\",\"keccak256\":\"0x65aa00301110dfdf8333bd9bb71ebad241d66ea5840a2db3ac6d4f6037083cb8\",\"license\":\"MIT\"},\"contracts/external/lib/AddressArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: MIT\\n*/\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG:\\n * - 4/21/21: Added validatePairsWithArray methods\\n */\\nlibrary AddressArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x486f1a373f33aa167227600ac2d0bf95b37685413d98a3e745107188f00ae405\",\"license\":\"MIT\"},\"contracts/external/lib/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"},\"contracts/interfaces/IDomainExchange.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n\\ninterface IDomainExchange {\\n    function registryRemoveListing(uint256 _listingId) external;\\n}\",\"keccak256\":\"0xe9deda400c359c1b42d10c518dc1f01605ea3a466e1be110f1f7c9be4af8253b\",\"license\":\"MIT\"},\"contracts/interfaces/IVerifiedDomainRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { IVerifyDomainProcessor } from \\\"./IVerifyDomainProcessor.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ninterface IVerifiedDomainRegistry {\\n\\n    struct Domain {\\n        address owner;\\n        string name;\\n        uint256 expiryTime;\\n        address exchange;\\n        uint256 listingId;\\n    }\\n\\n    struct DomainWithId {\\n        bytes32 domainId;\\n        Domain domain;\\n    }\\n\\n    function verifyDomains(IVerifyDomainProcessor.Proof[] memory _proofs) external;\\n    \\n    function getDomainId(string memory _domainName) external pure returns (bytes32);\\n    function getDomainOwner(bytes32 _domainId) external view returns (address);\\n    function getDomain(bytes32 _domainId) external view returns (DomainWithId memory);\\n    function getDomains(bytes32[] memory _domainId) external view returns (DomainWithId[] memory);\\n    \\n    function setDomainListing(bytes32 _domainId, uint256 _listingId) external;\\n    function removeDomainListing(bytes32 _domainId) external;\\n    function updateDomainOnSale(bytes32 _domainId, address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xcc45329e6720b7b9df3c67985b16f8d778528f756c045ba6c2196831b40afe92\",\"license\":\"MIT\"},\"contracts/interfaces/IVerifyDomainProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\nimport { IProxyBaseProcessor } from \\\"../external/interfaces/IProxyBaseProcessor.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ninterface IVerifyDomainProcessor is IProxyBaseProcessor {\\n    \\n    struct DomainRaw {\\n        string name;\\n        uint256 expiryTime;\\n    }\\n\\n    function verifyProofs(\\n        Proof[] memory _proofs\\n    ) \\n        external  \\n        returns (DomainRaw[] memory domains);\\n}\",\"keccak256\":\"0xe66335a9d8fb3d03a9ee76bf44fbec775311aeed3f6666862f06124b6605a123\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346200002657620000146200002b565b6040516129b06200012682396129b090f35b600080fd5b6200003562000037565b565b6200003533620000c3565b62000054905b6001600160a01b031690565b90565b62000054905462000042565b620000549062000048906001600160a01b031682565b620000549062000063565b620000549062000079565b90620000a362000054620000bf9262000084565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b620000cf600062000057565b90620000dd8160006200008f565b620001146200010d7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09362000084565b9162000084565b916200011f60405190565b600090a356fe6080604052600436101561001257600080fd5b60003560e01c806236d2d3146101815780630183196b1461017c57806311d4c3a2146101775780631a242547146101725780631e2e3a6b1461016d57806327d335a8146101685780632839fc29146101635780632b8a80021461015e578063392e53cd146101595780635e8441d3146101545780636e74da681461014f578063715018a61461014a5780637f200269146101455780638da5cb5b146101405780638e0be3691461013b5780639f4cb8f0146101365780639f6eb88c14610131578063a9c56e911461012c578063aa10ce2214610127578063b3533dfe14610122578063c4d66de81461011d578063c722f177146101185763f2fde38b036101a757610e91565b610e60565b610c98565b610c71565b610c34565b610c1c565b610951565b610891565b610817565b6107f2565b6107da565b610792565b61077a565b61074f565b61064d565b610628565b6105ea565b61054c565b610502565b610460565b61041a565b6103cc565b610242565b6001600160a01b031690565b90565b6001600160a01b0381165b036101a757565b600080fd5b905035906101b982610195565b565b906020828203126101a757610192916101ac565b61019290610186906001600160a01b031682565b610192906101cf565b610192906101e3565b906101ff906101ec565b600052602052604060002090565b610192916008021c5b60ff1690565b90610192915461020d565b610192906102396003916000926101f5565b61021c565b9052565b346101a75761026f61025d6102583660046101bb565b610227565b60405191829182901515815260200190565b0390f35b60005b8381106102865750506000910152565b8181015183820152602001610276565b6102b76102c06020936102ca936102ab815190565b80835293849260200190565b95869101610273565b601f01601f191690565b0190565b80516001600160a01b0316825290610192906080806102fc60a0840160208701518582036020870152610296565b9461030c60408201516040860152565b6060818101516001600160a01b0316908501520151910152565b80518252610192916040810191602001519060208184039101526102ce565b9061019291610326565b9061036561035b835190565b8083529160200190565b90816103776020830284019460200190565b926000915b83831061038b57505050505090565b909192939460206103ae6103a783856001950387528951610345565b9760200190565b930193019193929061037c565b60208082526101929291019061034f565b346101a75761026f6103e76103e23660046101bb565b612456565b604051918291826103bb565b806101a0565b905035906101b9826103f3565b906020828203126101a757610192916103f9565b346101a75761026f610435610430366004610406565b612258565b604051918291826001600160a01b03909116815260200190565b602080825261019292910190610326565b346101a75761026f61047b610476366004610406565b612507565b6040519182918261044f565b60009103126101a757565b906104b26104ab6104a1845190565b8084529260200190565b9260200190565b9060005b8181106104c35750505090565b9091926104e96104e260019286516001600160a01b0316815260200190565b9460200190565b9291016104b6565b602080825261019292910190610492565b346101a757610512366004610487565b61026f61051d6125f6565b604051918291826104f1565b91906040838203126101a7576101929061054381856103f9565b936020016103f9565b346101a75761056561055f366004610529565b90611cac565b604051005b634e487b7160e01b600052603260045260246000fd5b80548210156105a35761059a600191600052602060002090565b91020190600090565b61056a565b610192916008021c610186565b9061019291546105a8565b600260006105cc825490565b8310156105e75750610192916105e191610580565b906105b5565b80fd5b346101a75761026f610435610600366004610406565b6105c0565b91906040838203126101a7576101929061061f81856103f9565b936020016101ac565b346101a75761056561063b366004610605565b90611e7e565b6101926000600461021c565b346101a75761065d366004610487565b61026f61025d610641565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761069f57604052565b610668565b906101b96106b160405190565b928361067e565b6001600160401b03811161069f57602090601f01601f19160190565b90826000939282370152565b909291926106f56106f0826106b8565b6106a4565b938185526020850190828401116101a7576101b9926106d4565b9080601f830112156101a757816020610192933591016106e0565b906020828203126101a75781356001600160401b0381116101a757610192920161070f565b346101a75761026f61076a61076536600461072a565b61221a565b6040519182918290815260200190565b346101a75761056561078d366004610406565b611da6565b346101a7576107a2366004610487565b610565610ee1565b6001600160a01b0381166101a0565b905035906101b9826107aa565b906020828203126101a757610192916107b9565b346101a7576105656107ed3660046107c6565b6121e7565b346101a757610802366004610487565b61026f6104356000546001600160a01b031690565b346101a75761056561082a3660046101bb565b612161565b91906040838203126101a7576101929061054381856101ac565b610192916008021c81565b906101929154610849565b61086d6006916000926101f5565b90610876825490565b8310156105e757506101929161088b91610580565b90610854565b346101a75761026f61076a6108a736600461082f565b9061085f565b6001600160401b03811161069f5760208091020190565b909291926108d46106f0826108ad565b93818552602080860192028301928184116101a757915b8383106108f85750505050565b6020809161090684866103f9565b8152019201916108eb565b9080601f830112156101a757816020610192933591016108c4565b906020828203126101a75781356001600160401b0381116101a7576101929201610911565b346101a75761026f6103e761096736600461092c565b612531565b9190916060818403126101a75761098360606106a4565b9281356001600160401b0381116101a757816109a091840161070f565b845260208201356001600160401b0381116101a757816109c191840161070f565b602085015260408201356001600160401b0381116101a7576109e3920161070f565b6040830152565b63ffffffff81166101a0565b905035906101b9826109ea565b9190916080818403126101a757610a5c610a1d60806106a4565b936000610a2a82856103f9565b908601526020610a3c828286016101ac565b908601526040610a4e828286016109f6565b9086015260608093016109f6565b90830152565b929190610a716106f0826108ad565b93818552602080860192028101918383116101a75781905b838210610a97575050505050565b81356001600160401b0381116101a757602091610ab7878493870161070f565b815201910190610a89565b9080601f830112156101a75781602061019293359101610a62565b91909160a0818403126101a757610af460406106a4565b926000610b018284610a03565b9085015260808201356001600160401b0381116101a757610b229201610ac2565b6020830152565b9190916040818403126101a757610b4060406106a4565b9281356001600160401b0381116101a75781610b5d91840161096c565b845260208201356001600160401b0381116101a757610b229201610add565b929190610b8b6106f0826108ad565b93818552602080860192028101918383116101a75781905b838210610bb1575050505050565b81356001600160401b0381116101a757602091610bd18784938701610b29565b815201910190610ba3565b9080601f830112156101a75781602061019293359101610b7c565b906020828203126101a75781356001600160401b0381116101a7576101929201610bdc565b346101a757610565610c2f366004610bf7565b611a96565b346101a757610565610c473660046101bb565b61208f565b610192600060016105b5565b61023e906101ec565b6020810192916101b99190610c58565b346101a757610c81366004610487565b61026f610c8c610c4c565b60405191829182610c61565b346101a757610565610cab3660046107c6565b611f65565b906101ff565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610cec575b6020831014610ce757565b610cb6565b91607f1691610cdc565b80546000939291610d13610d0983610ccc565b8085529360200190565b9160018116908115610d655750600114610d2c57505050565b610d3f9192939450600052602060002090565b916000925b818410610d515750500190565b805484840152602090930192600101610d44565b92949550505060ff1916825215156020020190565b9061019291610cf6565b906101b9610d9e92610d9560405190565b93848092610d7a565b038361067e565b6101929081565b6101929054610da5565b610dc1906005610cb0565b80546001600160a01b031691610dd960018301610d84565b91610de660028201610dac565b916101926004610e0060038501546001600160a01b031690565b9301610dac565b906101b994610e4c610e44610e5c936080969a99979a610e3760a088019260008901906001600160a01b03169052565b8682036020880152610296565b986040850152565b6001600160a01b03166060830152565b0152565b346101a75761026f610e7b610e76366004610406565b610db6565b91610e8895939560405190565b95869586610e07565b346101a757610565610ea43660046101bb565b611002565b610eb1610f3d565b6101b9610ecf565b6101866101926101929290565b61019290610eb9565b6101b9610edc6000610ec6565b61103b565b6101b9610ea9565b15610ef057565b60405162461bcd60e51b815280610f39600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6101b9610f526000546001600160a01b031690565b610f6b610f5e33610186565b916001600160a01b031690565b14610ee9565b6101b990610f7d610f3d565b610fdd565b15610f8957565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6101b990610edc610ff16101866000610ec6565b6001600160a01b0383161415610f82565b6101b990610f71565b906001600160a01b03905b9181191691161790565b90611030610192611037926101ec565b825461100b565b9055565b6000546001600160a01b031690611053816000611020565b6110866110807f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936101ec565b916101ec565b9161109060405190565b600090a3565b61019290610216565b6101929054611096565b156110b057565b60405162461bcd60e51b815260206004820152601c60248201527f436f6e7472616374206d75737420626520696e697469616c697a6564000000006044820152606490fd5b6101b99061110b611106600461109f565b6110a9565b6116e2565b909291926111206106f0826106b8565b938185526020850190828401116101a7576101b992610273565b9080601f830112156101a757815161019292602001611110565b905051906101b9826103f3565b9190916040818403126101a75761117860406106a4565b815190936001600160401b0382116101a75761119981610a5c93850161113a565b85526020928301611154565b9291906111b46106f0826108ad565b93818552602080860192028101918383116101a75781905b8382106111da575050505050565b81516001600160401b0381116101a7576020916111fa8784938701611161565b8152019101906111cc565b9080601f830112156101a7578151610192926020016111a5565b906020828203126101a75781516001600160401b0381116101a7576101929201611205565b8051606080845261019293916040916112759161126391850190610296565b60208501518482036020860152610296565b920151906040818403910152610296565b805182526020808201516001600160a01b0316908301526101b99190606090819060408181015163ffffffff1690850152015163ffffffff16910152565b9061019291610296565b906112da61035b835190565b90816112ec6020830284019460200190565b926000915b83831061130057505050505090565b9091929394602061131c6103a7838560019503875289516112c4565b93019301919392906112f1565b61019291602060a082019261134660008201516000850190611286565b01519060808184039101526112ce565b8051604080845261019293916020916113729190840190611244565b920151906020818403910152611329565b9061019291611356565b9061139961035b835190565b90816113ab6020830284019460200190565b926000915b8383106113bf57505050505090565b909192939460206113db6103a783856001950387528951611383565b93019301919392906113b0565b60208082526101929291019061138d565b6040513d6000823e3d90fd5b6101926101926101929290565b634e487b7160e01b600052601160045260246000fd5b60001981146114375760010190565b611412565b90611445825190565b8110156105a3576020809102010190565b9060001990611016565b9061147061019261103792611405565b8254611456565b9160001960089290920291821b911b611016565b919061149a6101926110379390565b908354611477565b90815491600160401b83101561069f57826114c59160016101b995018155610580565b9061148b565b61019260a06106a4565b919061149a61019261103793611405565b6101b9916000916114d5565b8181106114fd575050565b8061150b60006001936114e6565b016114f2565b9190601f811161152057505050565b6115326101b993600052602060002090565b906020601f840181900483019310611554575b6020601f9091010401906114f2565b9091508190611545565b90611567815190565b906001600160401b03821161069f5761158a826115848554610ccc565b85611511565b602090601f83116001146115c5576110379291600091836115ba575b5050600019600883021c1916906002021790565b0151905038806115a6565b601f198316916115da85600052602060002090565b9260005b818110611618575091600293918560019694106115ff575b50505002019055565b01516000196008601f8516021c191690553880806115f6565b919360206001819287870151815501950192016115de565b906101b99161155e565b6101b9919061168e906080906004906116648161165e87516001600160a01b031690565b90611020565b61167c60018201611676602088015190565b90611630565b6116946002820161168e604088015190565b90611460565b6116af6003820161165e60608801516001600160a01b031690565b0192015190565b906101b99161163a565b929160206116dd6101b99360408701908782036000890152610296565b940152565b600061172c916117026116fd6001546001600160a01b031690565b6101ec565b61172183637de24fcf61171460405190565b9687958694859360e01b90565b8352600483016113e8565b03925af1908115611a5057600091611a75575b5061174a6000611405565b611755610192835190565b811015611a7157611766818361143c565b5190611775600083015161221a565b916005926117866101928286610cb0565b9361179885546001600160a01b031690565b946117a36000610ec6565b956117b66001600160a01b038816610f5e565b036118b657506118b19461184b83611850936118326006946117e5846117e061019233809a6101f5565b6114a2565b88516118229061181b6117f960208d015190565b916118146118056114cb565b6001600160a01b03909b168b52565b60208a0152565b6040880152565b6001600160a01b03166060860152565b61184661183f6000611405565b6080860152565b610cb0565b6116b6565b33906118626020600085015194015190565b61189361188d7f04c47544b62d97fc6d744e7cc21ed4a24af06a46427efcfd15a0db261dbb27d69390565b936101ec565b936118a96118a060405190565b928392836116c0565b0390a3611428565b61174a565b90506118c981546001600160a01b031690565b6118d233610f5e565b14611a55575b80546001600160a01b03166118ec33610f5e565b036118fd575b506118b19350611850565b6119248261191f61019261191885546001600160a01b031690565b60066101f5565b6128ab565b60038101546001600160a01b03166119446001600160a01b038716610f5e565b036119aa575b6119a4906119916118b196611967856117e06101923360066101f5565b6119713384611020565b61198861197f602088015190565b60028501611460565b60038301611020565b600461199d6000611405565b9101611460565b386118f2565b6119c46116fd6116fd60038401546001600160a01b031690565b90631756c30e6119d660048301610dac565b833b156101a757611a0c936119fe600080946119f160405190565b9788958694859360e01b90565b835260048301526024820190565b03925af18015611a50576118b1966119a49361199192611a32575b50965050905061194a565b611a4a906000611a42818361067e565b810190610487565b38611a27565b6113f9565b611a6c611a63602085015190565b60028301611460565b6118d8565b5050565b611a90913d8091833e611a88818361067e565b81019061121f565b3861173f565b6101b9906110f5565b906101b991611ab1611106600461109f565b611b02565b15611abd57565b60405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206d7573742062652065786368616e67650000000000000000006044820152606490fd5b6101b99190611b22611b1d611b183360036101f5565b61109f565b611ab6565b611bd1565b15611b2e57565b60405162461bcd60e51b815260206004820152601760248201527f446f6d61696e206d7573742062652076657269666965640000000000000000006044820152606490fd5b15611b7a57565b60405162461bcd60e51b815260206004820152602960248201527f446f6d61696e20616c7265616479206c6973746564206f6e20616e6f746865726044820152682065786368616e676560b81b6064820152608490fd5b90611be0610192836005610cb0565b611c62826004611bf784546001600160a01b031690565b93611c1f611c056000610ec6565b95611c186001600160a01b038816610f5e565b1415611b27565b611c516003820195611c4b610f5e611c3e89546001600160a01b031690565b926001600160a01b031690565b14611b73565b611c5c338096611020565b01611460565b611c9c611c96611c907f94ec80928933a86cc2847706c09c43fa58866b537c8fce8eef172af4036af5209590565b926101ec565b92611405565b92611ca660405190565b600090a4565b906101b991611a9f565b6101b990611cc7611106600461109f565b6101b990611cdc611b1d611b183360036101f5565b611d3b565b15611ce857565b60405162461bcd60e51b815260206004820152602560248201527f446f6d61696e206e6f74206c6973746564206f6e2063616c6c696e672065786360448201526468616e676560d81b6064820152608490fd5b611d49610192826005610cb0565b611d7b611d6060038301546001600160a01b031690565b339290611d7690611d7085610f5e565b14611ce1565b61260c565b6110866110807ff27bc8e4c954bf9eead2d99629d460313da75ee401666af4d3cb1eb821ddb1f69390565b6101b990611cb6565b906101b991611dc1611106600461109f565b6101b99190611dd7611b1d611b183360036101f5565b906000611de8610192846005610cb0565b611e08611dff60038301546001600160a01b031690565b611d7033610f5e565b611e118161260c565b01611e2d82611e2783546001600160a01b031690565b92611020565b611e50836117e0610192856006611e4b8561191f6101928a856101f5565b6101f5565b611c9c611c90611c907f3275c4afb1638bd20394301d401c788e5091157ddca135fd84970904da6541af9590565b906101b991611daf565b6101b990611e94610f3d565b611efb565b15611ea057565b60405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606490fd5b9060ff90611016565b90611ef461019261103792151590565b8254611edb565b611f14611f0f611f0b600461109f565b1590565b611e99565b611f1f816001611020565b611f2b60016004611ee4565b611f557f9b7c520e9e227a011fa79baf4082565a9fd780e2bcb20889c0fe36eba4b5c8db916101ec565b90611f5f60405190565b600090a2565b6101b990611e88565b6101b990611f7a610f3d565b6101b990611f8b611106600461109f565b61202c565b15611f9757565b60405162461bcd60e51b81526020600482015260126024820152714475706c69636174652065786368616e676560701b6044820152606490fd5b916001600160a01b0360089290920291821b911b611016565b9190611ffb610192611037936101ec565b908354611fd1565b90815491600160401b83101561069f57826120269160016101b995018155610580565b90611fea565b61205a6003612049612044611f0b611b1886856101f5565b611f90565b612055836001926101f5565b611ee4565b612065816002612003565b611f557f3e535d1ab441ef41c268fd9b52b478aee02d693c5ca2a84b5d26b89e0922e5e1916101ec565b6101b990611f6e565b6101b9906120a4610f3d565b6101b9906120b5611106600461109f565b612106565b156120c157565b60405162461bcd60e51b815260206004820152601760248201527f45786368616e676520646f6573206e6f742065786973740000000000000000006044820152606490fd5b61212c600361212061211b611b1885846101f5565b6120ba565b612055836000926101f5565b6121378160026126e4565b611f557ff50d0d312d501878616eb5e78ebf3ed6dcd3955aaef8165af9c6b057cc4832fb916101ec565b6101b990612098565b6101b990612176610f3d565b6121b9565b1561218257565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b6121dc6121c5826101ec565b6121d5610f5e6101866000610ec6565b141561217b565b611f2b816001611020565b6101b99061216a565b6102ca61220892602092612202815190565b94859290565b93849101610273565b610192916121f0565b61224261222660405190565b8092612236602083019182612211565b9081038252038261067e565b61225461224d825190565b9160200190565b2090565b600061227161019292612269600090565b506005610cb0565b01546001600160a01b031690565b9061229a61228e6104a1845490565b92600052602060002090565b9060005b8181106122ab5750505090565b9091926122cf6122c86001926122c087610dac565b815260200190565b9460010190565b92910161229e565b906101929161227f565b906101b9610d9e926122f260405190565b938480926122d7565b610192906122e1565b906123116106f0836108ad565b918252565b61019260406106a4565b6123286114cb565b906000825260208080808086016060815201600081520160008152016000905250565b905250565b610192612320565b612360612316565b9060008252602080830161234b612350565b610192612358565b60005b82811061238957505050565b602090612394612372565b818401520161237d565b906101b96123b46123ae84612304565b936108ad565b601f19016020840161237a565b906101b961244660046123d26114cb565b946123f46123e782546001600160a01b031690565b6001600160a01b03168752565b61240a61240360018301610d84565b6020880152565b61241961181b60028301610dac565b61244061243060038301546001600160a01b031690565b6001600160a01b03166060880152565b01610dac565b6080840152565b610192906123c1565b61246d61247291612465606090565b5060066101f5565b6122fb565b9061248361247e835190565b61239e565b916000908361249183611405565b61249c610192845190565b81101561250057806124b86124b46124fb938661143c565b5190565b6124e0610b226124c9836005610cb0565b6124db6124d4612316565b948a860152565b61244d565b6124ea828961143c565b526124f5818861143c565b50611428565b612491565b5093505050565b61250f612372565b50610192610b22612521836005610cb0565b6124db61252c612316565b948552565b9061253d61247e835190565b916000908361254b83611405565b612556610192845190565b81101561250057806124b86124b461256e938661143c565b61254b565b9061258261228e6104a1845490565b9060005b8181106125935750505090565b9091926125c16122c86001926125b087546001600160a01b031690565b6001600160a01b0316815260200190565b929101612586565b9061019291612573565b906101b9610d9e926125e460405190565b938480926125c9565b610192906125d3565b61019260026125ed565b6101b991600091611fea565b600060046101b9926126218360038301612600565b016114e6565b9061263661228e6104a1845490565b9060005b8181106126475750505090565b9091926126646122c86001926125b087546001600160a01b031690565b92910161263a565b9061019291612627565b906101b9610d9e9261268760405190565b9384809261266c565b61019290612676565b9190820391821161143757565b634e487b7160e01b600052603160045260246000fd5b805480156126df5760001901906126dc6126d68383610580565b90612600565b55565b6126a6565b6126f9612700926126f483612690565b61279d565b9092901590565b156127425760405162461bcd60e51b815260206004820152601560248201527420b2323932b9b9903737ba1034b71030b93930bc9760591b6044820152606490fd5b6101b991612761612751835490565b61275b6001611405565b90612699565b90818103612771575b50506126bc565b6120266127846105e161278b9486610580565b9184610580565b388061276a565b610192600019611405565b919082519260006127ad81611405565b855b811015612804576127d06127c3828561143c565b516001600160a01b031690565b6127e26001600160a01b038616610f5e565b146127fa576127f36127af91611428565b90506127ad565b9450505050600190565b5093505050612811612792565b9190565b9061282461228e6104a1845490565b9060005b8181106128355750505090565b90919261284a6122c86001926122c087610dac565b929101612828565b9061019291612815565b906101b9610d9e9261286d60405190565b93848092612852565b6101929061285c565b6101b99160009161148b565b805480156126df5760001901906126dc6128a58383610580565b9061287f565b6126f96128c0926128bb83612876565b61293b565b156129025760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b6044820152606490fd5b6101b991612911612751835490565b90818103612921575b505061288b565b6114c561278461088b6129349486610580565b388061291a565b9190825192600061294b81611405565b855b811015612804576129616124b4828561143c565b84146127fa5761297361294d91611428565b905061294b56fea2646970667358221220a6032f571ac9fa51b48f09a32827ab67ff828148f9996dd432fe8f26a821634c64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806236d2d3146101815780630183196b1461017c57806311d4c3a2146101775780631a242547146101725780631e2e3a6b1461016d57806327d335a8146101685780632839fc29146101635780632b8a80021461015e578063392e53cd146101595780635e8441d3146101545780636e74da681461014f578063715018a61461014a5780637f200269146101455780638da5cb5b146101405780638e0be3691461013b5780639f4cb8f0146101365780639f6eb88c14610131578063a9c56e911461012c578063aa10ce2214610127578063b3533dfe14610122578063c4d66de81461011d578063c722f177146101185763f2fde38b036101a757610e91565b610e60565b610c98565b610c71565b610c34565b610c1c565b610951565b610891565b610817565b6107f2565b6107da565b610792565b61077a565b61074f565b61064d565b610628565b6105ea565b61054c565b610502565b610460565b61041a565b6103cc565b610242565b6001600160a01b031690565b90565b6001600160a01b0381165b036101a757565b600080fd5b905035906101b982610195565b565b906020828203126101a757610192916101ac565b61019290610186906001600160a01b031682565b610192906101cf565b610192906101e3565b906101ff906101ec565b600052602052604060002090565b610192916008021c5b60ff1690565b90610192915461020d565b610192906102396003916000926101f5565b61021c565b9052565b346101a75761026f61025d6102583660046101bb565b610227565b60405191829182901515815260200190565b0390f35b60005b8381106102865750506000910152565b8181015183820152602001610276565b6102b76102c06020936102ca936102ab815190565b80835293849260200190565b95869101610273565b601f01601f191690565b0190565b80516001600160a01b0316825290610192906080806102fc60a0840160208701518582036020870152610296565b9461030c60408201516040860152565b6060818101516001600160a01b0316908501520151910152565b80518252610192916040810191602001519060208184039101526102ce565b9061019291610326565b9061036561035b835190565b8083529160200190565b90816103776020830284019460200190565b926000915b83831061038b57505050505090565b909192939460206103ae6103a783856001950387528951610345565b9760200190565b930193019193929061037c565b60208082526101929291019061034f565b346101a75761026f6103e76103e23660046101bb565b612456565b604051918291826103bb565b806101a0565b905035906101b9826103f3565b906020828203126101a757610192916103f9565b346101a75761026f610435610430366004610406565b612258565b604051918291826001600160a01b03909116815260200190565b602080825261019292910190610326565b346101a75761026f61047b610476366004610406565b612507565b6040519182918261044f565b60009103126101a757565b906104b26104ab6104a1845190565b8084529260200190565b9260200190565b9060005b8181106104c35750505090565b9091926104e96104e260019286516001600160a01b0316815260200190565b9460200190565b9291016104b6565b602080825261019292910190610492565b346101a757610512366004610487565b61026f61051d6125f6565b604051918291826104f1565b91906040838203126101a7576101929061054381856103f9565b936020016103f9565b346101a75761056561055f366004610529565b90611cac565b604051005b634e487b7160e01b600052603260045260246000fd5b80548210156105a35761059a600191600052602060002090565b91020190600090565b61056a565b610192916008021c610186565b9061019291546105a8565b600260006105cc825490565b8310156105e75750610192916105e191610580565b906105b5565b80fd5b346101a75761026f610435610600366004610406565b6105c0565b91906040838203126101a7576101929061061f81856103f9565b936020016101ac565b346101a75761056561063b366004610605565b90611e7e565b6101926000600461021c565b346101a75761065d366004610487565b61026f61025d610641565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761069f57604052565b610668565b906101b96106b160405190565b928361067e565b6001600160401b03811161069f57602090601f01601f19160190565b90826000939282370152565b909291926106f56106f0826106b8565b6106a4565b938185526020850190828401116101a7576101b9926106d4565b9080601f830112156101a757816020610192933591016106e0565b906020828203126101a75781356001600160401b0381116101a757610192920161070f565b346101a75761026f61076a61076536600461072a565b61221a565b6040519182918290815260200190565b346101a75761056561078d366004610406565b611da6565b346101a7576107a2366004610487565b610565610ee1565b6001600160a01b0381166101a0565b905035906101b9826107aa565b906020828203126101a757610192916107b9565b346101a7576105656107ed3660046107c6565b6121e7565b346101a757610802366004610487565b61026f6104356000546001600160a01b031690565b346101a75761056561082a3660046101bb565b612161565b91906040838203126101a7576101929061054381856101ac565b610192916008021c81565b906101929154610849565b61086d6006916000926101f5565b90610876825490565b8310156105e757506101929161088b91610580565b90610854565b346101a75761026f61076a6108a736600461082f565b9061085f565b6001600160401b03811161069f5760208091020190565b909291926108d46106f0826108ad565b93818552602080860192028301928184116101a757915b8383106108f85750505050565b6020809161090684866103f9565b8152019201916108eb565b9080601f830112156101a757816020610192933591016108c4565b906020828203126101a75781356001600160401b0381116101a7576101929201610911565b346101a75761026f6103e761096736600461092c565b612531565b9190916060818403126101a75761098360606106a4565b9281356001600160401b0381116101a757816109a091840161070f565b845260208201356001600160401b0381116101a757816109c191840161070f565b602085015260408201356001600160401b0381116101a7576109e3920161070f565b6040830152565b63ffffffff81166101a0565b905035906101b9826109ea565b9190916080818403126101a757610a5c610a1d60806106a4565b936000610a2a82856103f9565b908601526020610a3c828286016101ac565b908601526040610a4e828286016109f6565b9086015260608093016109f6565b90830152565b929190610a716106f0826108ad565b93818552602080860192028101918383116101a75781905b838210610a97575050505050565b81356001600160401b0381116101a757602091610ab7878493870161070f565b815201910190610a89565b9080601f830112156101a75781602061019293359101610a62565b91909160a0818403126101a757610af460406106a4565b926000610b018284610a03565b9085015260808201356001600160401b0381116101a757610b229201610ac2565b6020830152565b9190916040818403126101a757610b4060406106a4565b9281356001600160401b0381116101a75781610b5d91840161096c565b845260208201356001600160401b0381116101a757610b229201610add565b929190610b8b6106f0826108ad565b93818552602080860192028101918383116101a75781905b838210610bb1575050505050565b81356001600160401b0381116101a757602091610bd18784938701610b29565b815201910190610ba3565b9080601f830112156101a75781602061019293359101610b7c565b906020828203126101a75781356001600160401b0381116101a7576101929201610bdc565b346101a757610565610c2f366004610bf7565b611a96565b346101a757610565610c473660046101bb565b61208f565b610192600060016105b5565b61023e906101ec565b6020810192916101b99190610c58565b346101a757610c81366004610487565b61026f610c8c610c4c565b60405191829182610c61565b346101a757610565610cab3660046107c6565b611f65565b906101ff565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610cec575b6020831014610ce757565b610cb6565b91607f1691610cdc565b80546000939291610d13610d0983610ccc565b8085529360200190565b9160018116908115610d655750600114610d2c57505050565b610d3f9192939450600052602060002090565b916000925b818410610d515750500190565b805484840152602090930192600101610d44565b92949550505060ff1916825215156020020190565b9061019291610cf6565b906101b9610d9e92610d9560405190565b93848092610d7a565b038361067e565b6101929081565b6101929054610da5565b610dc1906005610cb0565b80546001600160a01b031691610dd960018301610d84565b91610de660028201610dac565b916101926004610e0060038501546001600160a01b031690565b9301610dac565b906101b994610e4c610e44610e5c936080969a99979a610e3760a088019260008901906001600160a01b03169052565b8682036020880152610296565b986040850152565b6001600160a01b03166060830152565b0152565b346101a75761026f610e7b610e76366004610406565b610db6565b91610e8895939560405190565b95869586610e07565b346101a757610565610ea43660046101bb565b611002565b610eb1610f3d565b6101b9610ecf565b6101866101926101929290565b61019290610eb9565b6101b9610edc6000610ec6565b61103b565b6101b9610ea9565b15610ef057565b60405162461bcd60e51b815280610f39600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6101b9610f526000546001600160a01b031690565b610f6b610f5e33610186565b916001600160a01b031690565b14610ee9565b6101b990610f7d610f3d565b610fdd565b15610f8957565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6101b990610edc610ff16101866000610ec6565b6001600160a01b0383161415610f82565b6101b990610f71565b906001600160a01b03905b9181191691161790565b90611030610192611037926101ec565b825461100b565b9055565b6000546001600160a01b031690611053816000611020565b6110866110807f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936101ec565b916101ec565b9161109060405190565b600090a3565b61019290610216565b6101929054611096565b156110b057565b60405162461bcd60e51b815260206004820152601c60248201527f436f6e7472616374206d75737420626520696e697469616c697a6564000000006044820152606490fd5b6101b99061110b611106600461109f565b6110a9565b6116e2565b909291926111206106f0826106b8565b938185526020850190828401116101a7576101b992610273565b9080601f830112156101a757815161019292602001611110565b905051906101b9826103f3565b9190916040818403126101a75761117860406106a4565b815190936001600160401b0382116101a75761119981610a5c93850161113a565b85526020928301611154565b9291906111b46106f0826108ad565b93818552602080860192028101918383116101a75781905b8382106111da575050505050565b81516001600160401b0381116101a7576020916111fa8784938701611161565b8152019101906111cc565b9080601f830112156101a7578151610192926020016111a5565b906020828203126101a75781516001600160401b0381116101a7576101929201611205565b8051606080845261019293916040916112759161126391850190610296565b60208501518482036020860152610296565b920151906040818403910152610296565b805182526020808201516001600160a01b0316908301526101b99190606090819060408181015163ffffffff1690850152015163ffffffff16910152565b9061019291610296565b906112da61035b835190565b90816112ec6020830284019460200190565b926000915b83831061130057505050505090565b9091929394602061131c6103a7838560019503875289516112c4565b93019301919392906112f1565b61019291602060a082019261134660008201516000850190611286565b01519060808184039101526112ce565b8051604080845261019293916020916113729190840190611244565b920151906020818403910152611329565b9061019291611356565b9061139961035b835190565b90816113ab6020830284019460200190565b926000915b8383106113bf57505050505090565b909192939460206113db6103a783856001950387528951611383565b93019301919392906113b0565b60208082526101929291019061138d565b6040513d6000823e3d90fd5b6101926101926101929290565b634e487b7160e01b600052601160045260246000fd5b60001981146114375760010190565b611412565b90611445825190565b8110156105a3576020809102010190565b9060001990611016565b9061147061019261103792611405565b8254611456565b9160001960089290920291821b911b611016565b919061149a6101926110379390565b908354611477565b90815491600160401b83101561069f57826114c59160016101b995018155610580565b9061148b565b61019260a06106a4565b919061149a61019261103793611405565b6101b9916000916114d5565b8181106114fd575050565b8061150b60006001936114e6565b016114f2565b9190601f811161152057505050565b6115326101b993600052602060002090565b906020601f840181900483019310611554575b6020601f9091010401906114f2565b9091508190611545565b90611567815190565b906001600160401b03821161069f5761158a826115848554610ccc565b85611511565b602090601f83116001146115c5576110379291600091836115ba575b5050600019600883021c1916906002021790565b0151905038806115a6565b601f198316916115da85600052602060002090565b9260005b818110611618575091600293918560019694106115ff575b50505002019055565b01516000196008601f8516021c191690553880806115f6565b919360206001819287870151815501950192016115de565b906101b99161155e565b6101b9919061168e906080906004906116648161165e87516001600160a01b031690565b90611020565b61167c60018201611676602088015190565b90611630565b6116946002820161168e604088015190565b90611460565b6116af6003820161165e60608801516001600160a01b031690565b0192015190565b906101b99161163a565b929160206116dd6101b99360408701908782036000890152610296565b940152565b600061172c916117026116fd6001546001600160a01b031690565b6101ec565b61172183637de24fcf61171460405190565b9687958694859360e01b90565b8352600483016113e8565b03925af1908115611a5057600091611a75575b5061174a6000611405565b611755610192835190565b811015611a7157611766818361143c565b5190611775600083015161221a565b916005926117866101928286610cb0565b9361179885546001600160a01b031690565b946117a36000610ec6565b956117b66001600160a01b038816610f5e565b036118b657506118b19461184b83611850936118326006946117e5846117e061019233809a6101f5565b6114a2565b88516118229061181b6117f960208d015190565b916118146118056114cb565b6001600160a01b03909b168b52565b60208a0152565b6040880152565b6001600160a01b03166060860152565b61184661183f6000611405565b6080860152565b610cb0565b6116b6565b33906118626020600085015194015190565b61189361188d7f04c47544b62d97fc6d744e7cc21ed4a24af06a46427efcfd15a0db261dbb27d69390565b936101ec565b936118a96118a060405190565b928392836116c0565b0390a3611428565b61174a565b90506118c981546001600160a01b031690565b6118d233610f5e565b14611a55575b80546001600160a01b03166118ec33610f5e565b036118fd575b506118b19350611850565b6119248261191f61019261191885546001600160a01b031690565b60066101f5565b6128ab565b60038101546001600160a01b03166119446001600160a01b038716610f5e565b036119aa575b6119a4906119916118b196611967856117e06101923360066101f5565b6119713384611020565b61198861197f602088015190565b60028501611460565b60038301611020565b600461199d6000611405565b9101611460565b386118f2565b6119c46116fd6116fd60038401546001600160a01b031690565b90631756c30e6119d660048301610dac565b833b156101a757611a0c936119fe600080946119f160405190565b9788958694859360e01b90565b835260048301526024820190565b03925af18015611a50576118b1966119a49361199192611a32575b50965050905061194a565b611a4a906000611a42818361067e565b810190610487565b38611a27565b6113f9565b611a6c611a63602085015190565b60028301611460565b6118d8565b5050565b611a90913d8091833e611a88818361067e565b81019061121f565b3861173f565b6101b9906110f5565b906101b991611ab1611106600461109f565b611b02565b15611abd57565b60405162461bcd60e51b815260206004820152601760248201527f43616c6c6572206d7573742062652065786368616e67650000000000000000006044820152606490fd5b6101b99190611b22611b1d611b183360036101f5565b61109f565b611ab6565b611bd1565b15611b2e57565b60405162461bcd60e51b815260206004820152601760248201527f446f6d61696e206d7573742062652076657269666965640000000000000000006044820152606490fd5b15611b7a57565b60405162461bcd60e51b815260206004820152602960248201527f446f6d61696e20616c7265616479206c6973746564206f6e20616e6f746865726044820152682065786368616e676560b81b6064820152608490fd5b90611be0610192836005610cb0565b611c62826004611bf784546001600160a01b031690565b93611c1f611c056000610ec6565b95611c186001600160a01b038816610f5e565b1415611b27565b611c516003820195611c4b610f5e611c3e89546001600160a01b031690565b926001600160a01b031690565b14611b73565b611c5c338096611020565b01611460565b611c9c611c96611c907f94ec80928933a86cc2847706c09c43fa58866b537c8fce8eef172af4036af5209590565b926101ec565b92611405565b92611ca660405190565b600090a4565b906101b991611a9f565b6101b990611cc7611106600461109f565b6101b990611cdc611b1d611b183360036101f5565b611d3b565b15611ce857565b60405162461bcd60e51b815260206004820152602560248201527f446f6d61696e206e6f74206c6973746564206f6e2063616c6c696e672065786360448201526468616e676560d81b6064820152608490fd5b611d49610192826005610cb0565b611d7b611d6060038301546001600160a01b031690565b339290611d7690611d7085610f5e565b14611ce1565b61260c565b6110866110807ff27bc8e4c954bf9eead2d99629d460313da75ee401666af4d3cb1eb821ddb1f69390565b6101b990611cb6565b906101b991611dc1611106600461109f565b6101b99190611dd7611b1d611b183360036101f5565b906000611de8610192846005610cb0565b611e08611dff60038301546001600160a01b031690565b611d7033610f5e565b611e118161260c565b01611e2d82611e2783546001600160a01b031690565b92611020565b611e50836117e0610192856006611e4b8561191f6101928a856101f5565b6101f5565b611c9c611c90611c907f3275c4afb1638bd20394301d401c788e5091157ddca135fd84970904da6541af9590565b906101b991611daf565b6101b990611e94610f3d565b611efb565b15611ea057565b60405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606490fd5b9060ff90611016565b90611ef461019261103792151590565b8254611edb565b611f14611f0f611f0b600461109f565b1590565b611e99565b611f1f816001611020565b611f2b60016004611ee4565b611f557f9b7c520e9e227a011fa79baf4082565a9fd780e2bcb20889c0fe36eba4b5c8db916101ec565b90611f5f60405190565b600090a2565b6101b990611e88565b6101b990611f7a610f3d565b6101b990611f8b611106600461109f565b61202c565b15611f9757565b60405162461bcd60e51b81526020600482015260126024820152714475706c69636174652065786368616e676560701b6044820152606490fd5b916001600160a01b0360089290920291821b911b611016565b9190611ffb610192611037936101ec565b908354611fd1565b90815491600160401b83101561069f57826120269160016101b995018155610580565b90611fea565b61205a6003612049612044611f0b611b1886856101f5565b611f90565b612055836001926101f5565b611ee4565b612065816002612003565b611f557f3e535d1ab441ef41c268fd9b52b478aee02d693c5ca2a84b5d26b89e0922e5e1916101ec565b6101b990611f6e565b6101b9906120a4610f3d565b6101b9906120b5611106600461109f565b612106565b156120c157565b60405162461bcd60e51b815260206004820152601760248201527f45786368616e676520646f6573206e6f742065786973740000000000000000006044820152606490fd5b61212c600361212061211b611b1885846101f5565b6120ba565b612055836000926101f5565b6121378160026126e4565b611f557ff50d0d312d501878616eb5e78ebf3ed6dcd3955aaef8165af9c6b057cc4832fb916101ec565b6101b990612098565b6101b990612176610f3d565b6121b9565b1561218257565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b6121dc6121c5826101ec565b6121d5610f5e6101866000610ec6565b141561217b565b611f2b816001611020565b6101b99061216a565b6102ca61220892602092612202815190565b94859290565b93849101610273565b610192916121f0565b61224261222660405190565b8092612236602083019182612211565b9081038252038261067e565b61225461224d825190565b9160200190565b2090565b600061227161019292612269600090565b506005610cb0565b01546001600160a01b031690565b9061229a61228e6104a1845490565b92600052602060002090565b9060005b8181106122ab5750505090565b9091926122cf6122c86001926122c087610dac565b815260200190565b9460010190565b92910161229e565b906101929161227f565b906101b9610d9e926122f260405190565b938480926122d7565b610192906122e1565b906123116106f0836108ad565b918252565b61019260406106a4565b6123286114cb565b906000825260208080808086016060815201600081520160008152016000905250565b905250565b610192612320565b612360612316565b9060008252602080830161234b612350565b610192612358565b60005b82811061238957505050565b602090612394612372565b818401520161237d565b906101b96123b46123ae84612304565b936108ad565b601f19016020840161237a565b906101b961244660046123d26114cb565b946123f46123e782546001600160a01b031690565b6001600160a01b03168752565b61240a61240360018301610d84565b6020880152565b61241961181b60028301610dac565b61244061243060038301546001600160a01b031690565b6001600160a01b03166060880152565b01610dac565b6080840152565b610192906123c1565b61246d61247291612465606090565b5060066101f5565b6122fb565b9061248361247e835190565b61239e565b916000908361249183611405565b61249c610192845190565b81101561250057806124b86124b46124fb938661143c565b5190565b6124e0610b226124c9836005610cb0565b6124db6124d4612316565b948a860152565b61244d565b6124ea828961143c565b526124f5818861143c565b50611428565b612491565b5093505050565b61250f612372565b50610192610b22612521836005610cb0565b6124db61252c612316565b948552565b9061253d61247e835190565b916000908361254b83611405565b612556610192845190565b81101561250057806124b86124b461256e938661143c565b61254b565b9061258261228e6104a1845490565b9060005b8181106125935750505090565b9091926125c16122c86001926125b087546001600160a01b031690565b6001600160a01b0316815260200190565b929101612586565b9061019291612573565b906101b9610d9e926125e460405190565b938480926125c9565b610192906125d3565b61019260026125ed565b6101b991600091611fea565b600060046101b9926126218360038301612600565b016114e6565b9061263661228e6104a1845490565b9060005b8181106126475750505090565b9091926126646122c86001926125b087546001600160a01b031690565b92910161263a565b9061019291612627565b906101b9610d9e9261268760405190565b9384809261266c565b61019290612676565b9190820391821161143757565b634e487b7160e01b600052603160045260246000fd5b805480156126df5760001901906126dc6126d68383610580565b90612600565b55565b6126a6565b6126f9612700926126f483612690565b61279d565b9092901590565b156127425760405162461bcd60e51b815260206004820152601560248201527420b2323932b9b9903737ba1034b71030b93930bc9760591b6044820152606490fd5b6101b991612761612751835490565b61275b6001611405565b90612699565b90818103612771575b50506126bc565b6120266127846105e161278b9486610580565b9184610580565b388061276a565b610192600019611405565b919082519260006127ad81611405565b855b811015612804576127d06127c3828561143c565b516001600160a01b031690565b6127e26001600160a01b038616610f5e565b146127fa576127f36127af91611428565b90506127ad565b9450505050600190565b5093505050612811612792565b9190565b9061282461228e6104a1845490565b9060005b8181106128355750505090565b90919261284a6122c86001926122c087610dac565b929101612828565b9061019291612815565b906101b9610d9e9261286d60405190565b93848092612852565b6101929061285c565b6101b99160009161148b565b805480156126df5760001901906126dc6128a58383610580565b9061287f565b6126f96128c0926128bb83612876565b61293b565b156129025760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b6044820152606490fd5b6101b991612911612751835490565b90818103612921575b505061288b565b6114c561278461088b6129349486610580565b388061291a565b9190825192600061294b81611405565b855b811015612804576129616124b4828561143c565b84146127fa5761297361294d91611428565b905061294b56fea2646970667358221220a6032f571ac9fa51b48f09a32827ab67ff828148f9996dd432fe8f26a821634c64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addExchange(address)": {
        "params": {
          "_exchange": "Address of the exchange contract"
        }
      },
      "initialize(address)": {
        "params": {
          "_verifyDomainProcessor": "Address of the VerifyDomainProcessor contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeDomainListing(bytes32)": {
        "params": {
          "_domainId": "Domain ID to update listing status for"
        }
      },
      "removeExchange(address)": {
        "params": {
          "_exchange": "Address of the exchange contract"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDomainListing(bytes32,uint256)": {
        "params": {
          "_domainId": "Domain to set listed status for",
          "_listingId": "Listing Id of domain on calling exchange"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateDomainOnSale(bytes32,address)": {
        "params": {
          "_domainId": "Domain ID to update listing status for",
          "_newOwner": "New owner of the domain"
        }
      },
      "updateVerifyDomainProcessor(address)": {
        "params": {
          "_verifyDomainProcessor": "Address of the new VerifyDomainProcessor contract"
        }
      },
      "verifyDomains(((string,string,string),((bytes32,address,uint32,uint32),bytes[]))[])": {
        "params": {
          "_proofs": "Array of domain ownership TLS proofs"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addExchange(address)": {
        "notice": "ONLY OWNER: Add an exchange to the registry. This can only be called after the contract has been initialized. Exchange must not already exist in the registry. "
      },
      "initialize(address)": {
        "notice": "ONLY OWNER: Initialize the contract with the VerifyDomainProcessor and exchange contracts. This can only be called once."
      },
      "removeDomainListing(bytes32)": {
        "notice": "ONLY EXCHANGE: Remove a listing status from domain. We check that the calling exchange is the one that the domain is listed on. This removes the exchange and listingId from the domain. "
      },
      "removeExchange(address)": {
        "notice": "ONLY OWNER: Remove an exchange from the registry. Exchange must exist in the registry. "
      },
      "setDomainListing(bytes32,uint256)": {
        "notice": "ONLY EXCHANGE: Add a listing status to domain. We check that the domain has been verified and is listed on the calling exchange. This sets the exchange and listingId of the domain. "
      },
      "updateDomainOnSale(bytes32,address)": {
        "notice": "ONLY EXCHANGE: Update domain on sale. We check that the calling exchange is the one that the domain is listed on. This updates the ownership of the domain to the new owner as well as removes the listing status from the domain. "
      },
      "updateVerifyDomainProcessor(address)": {
        "notice": "ONLY OWNER: Update the verify domain processor"
      },
      "verifyDomains(((string,string,string),((bytes32,address,uint32,uint32),bytes[]))[])": {
        "notice": "Verify domains and add them to the registry. If domain is transferred off-chain to another party  then they can re-verify the domain and claim ownership of the domain and previous ownership is removed. The existing owner can re-verify the domain, say after the domain has expired to update the expiry time on the domain. Function reverts if: - Domain ownership TLS proofs are invalid "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5199,
        "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
        "label": "verifyDomainProcessor",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IVerifyDomainProcessor)7202"
      },
      {
        "astId": 5202,
        "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
        "label": "exchanges",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5206,
        "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
        "label": "isExchange",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5208,
        "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
        "label": "isInitialized",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 5213,
        "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
        "label": "domains",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Domain)7114_storage)"
      },
      {
        "astId": 5218,
        "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
        "label": "userDomains",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IVerifyDomainProcessor)7202": {
        "encoding": "inplace",
        "label": "contract IVerifyDomainProcessor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Domain)7114_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IVerifiedDomainRegistry.Domain)",
        "numberOfBytes": "32",
        "value": "t_struct(Domain)7114_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Domain)7114_storage": {
        "encoding": "inplace",
        "label": "struct IVerifiedDomainRegistry.Domain",
        "members": [
          {
            "astId": 7105,
            "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7107,
            "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 7109,
            "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
            "label": "expiryTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7111,
            "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
            "label": "exchange",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 7113,
            "contract": "contracts/VerifiedDomainRegistry.sol:VerifiedDomainRegistry",
            "label": "listingId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}