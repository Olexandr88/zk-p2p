{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@reclaimprotocol/verifier-solidity-sdk/contracts/Claims.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./StringUtils.sol\";\n\n/**\n * Library to assist with requesting,\n * serialising & verifying credentials\n */\nlibrary Claims {\n\t/** Data required to describe a claim */\n\tstruct CompleteClaimData {\n\t\tbytes32 identifier;\n\t\taddress owner;\n\t\tuint32 timestampS;\n\t\tuint32 epoch;\n\t}\n\n\tstruct ClaimInfo {\n\t\tstring provider;\n\t\tstring parameters;\n\t\tstring context;\n\t}\n\n\t/** Claim with signatures & signer */\n\tstruct SignedClaim {\n\t\tCompleteClaimData claim;\n\t\tbytes[] signatures;\n\t}\n\n\t/**\n\t * Asserts that the claim is signed by the expected witnesses\n\t */\n\tfunction assertValidSignedClaim(\n\t\tSignedClaim memory self,\n\t\taddress[] memory expectedWitnessAddresses\n\t) internal pure {\n\t\trequire(self.signatures.length > 0, \"No signatures\");\n\t\taddress[] memory signedWitnesses = recoverSignersOfSignedClaim(self);\n\t\tfor (uint256 i = 0; i < expectedWitnessAddresses.length; i++) {\n\t\t\tbool found = false;\n\t\t\tfor (uint256 j = 0; j < signedWitnesses.length; j++) {\n\t\t\t\tif (signedWitnesses[j] == expectedWitnessAddresses[i]) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\trequire(found, \"Missing witness signature\");\n\t\t}\n\t}\n\n\t/**\n\t * @dev recovers the signer of the claim\n\t */\n\tfunction recoverSignersOfSignedClaim(\n\t\tSignedClaim memory self\n\t) internal pure returns (address[] memory) {\n\t\tbytes memory serialised = serialise(self.claim);\n\t\taddress[] memory signers = new address[](self.signatures.length);\n\t\tfor (uint256 i = 0; i < self.signatures.length; i++) {\n\t\t\tsigners[i] = verifySignature(serialised, self.signatures[i]);\n\t\t}\n\n\t\treturn signers;\n\t}\n\n\t/**\n\t * @dev serialises the credential into a string;\n\t * the string is used to verify the signature\n\t *\n\t * the serialisation is the same as done by the TS library\n\t */\n\tfunction serialise(\n\t\tCompleteClaimData memory self\n\t) internal pure returns (bytes memory) {\n\t\treturn\n\t\t\tabi.encodePacked(\n\t\t\t\tStringUtils.bytes2str(abi.encodePacked(self.identifier)),\n\t\t\t\t\"\\n\",\n\t\t\t\tStringUtils.address2str(self.owner),\n\t\t\t\t\"\\n\",\n\t\t\t\tStringUtils.uint2str(self.timestampS),\n\t\t\t\t\"\\n\",\n\t\t\t\tStringUtils.uint2str(self.epoch)\n\t\t\t);\n\t}\n\n\t/**\n\t * @dev returns the address of the user that generated the signature\n\t */\n\tfunction verifySignature(\n\t\tbytes memory content,\n\t\tbytes memory signature\n\t) internal pure returns (address signer) {\n\t\tbytes32 signedHash = keccak256(\n\t\t\tabi.encodePacked(\n\t\t\t\t\"\\x19Ethereum Signed Message:\\n\",\n\t\t\t\tStringUtils.uint2str(content.length),\n\t\t\t\tcontent\n\t\t\t)\n\t\t);\n\t\treturn ECDSA.recover(signedHash, signature);\n\t}\n\n\tfunction hashClaimInfo(ClaimInfo memory claimInfo) internal pure returns (bytes32) {\n\t\tbytes memory serialised = abi.encodePacked(\n\t\t\tclaimInfo.provider,\n\t\t\t\"\\n\",\n\t\t\tclaimInfo.parameters,\n\t\t\t\"\\n\",\n\t\t\tclaimInfo.context\n\t\t);\n\t\treturn keccak256(serialised);\n\t}\n}\n"
    },
    "@reclaimprotocol/verifier-solidity-sdk/contracts/StringUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * Utilities for string manipulation & conversion\n */\nlibrary StringUtils {\n\tfunction address2str(address x) internal pure returns (string memory) {\n\t\tbytes memory s = new bytes(40);\n\t\tfor (uint i = 0; i < 20; i++) {\n\t\t\tbytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\n\t\t\tbytes1 hi = bytes1(uint8(b) / 16);\n\t\t\tbytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n\t\t\ts[2 * i] = getChar(hi);\n\t\t\ts[2 * i + 1] = getChar(lo);\n\t\t}\n\t\treturn string(abi.encodePacked(\"0x\", s));\n\t}\n\n\tfunction bytes2str(bytes memory buffer) internal pure returns (string memory) {\n\t\t// Fixed buffer size for hexadecimal convertion\n\t\tbytes memory converted = new bytes(buffer.length * 2);\n\t\tbytes memory _base = \"0123456789abcdef\";\n\n\t\tfor (uint256 i = 0; i < buffer.length; i++) {\n\t\t\tconverted[i * 2] = _base[uint8(buffer[i]) / _base.length];\n\t\t\tconverted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\n\t\t}\n\n\t\treturn string(abi.encodePacked(\"0x\", converted));\n\t}\n\n\tfunction getChar(bytes1 b) internal pure returns (bytes1 c) {\n\t\tif (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n\t\telse return bytes1(uint8(b) + 0x57);\n\t}\n\n\tfunction bool2str(bool _b) internal pure returns (string memory _uintAsString) {\n\t\tif (_b) {\n\t\t\treturn \"true\";\n\t\t} else {\n\t\t\treturn \"false\";\n\t\t}\n\t}\n\n\tfunction uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n\t\tif (_i == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tuint j = _i;\n\t\tuint len;\n\t\twhile (j != 0) {\n\t\t\tlen++;\n\t\t\tj /= 10;\n\t\t}\n\t\tbytes memory bstr = new bytes(len);\n\t\tuint k = len;\n\t\twhile (_i != 0) {\n\t\t\tk = k - 1;\n\t\t\tuint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n\t\t\tbytes1 b1 = bytes1(temp);\n\t\t\tbstr[k] = b1;\n\t\t\t_i /= 10;\n\t\t}\n\t\treturn string(bstr);\n\t}\n\n\tfunction areEqual(\n\t\tstring calldata _a,\n\t\tstring storage _b\n\t) internal pure returns (bool) {\n\t\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\n\t}\n\n\tfunction areEqual(string memory _a, string memory _b) internal pure returns (bool) {\n\t\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\n\t}\n\n\tfunction toLower(string memory str) internal pure returns (string memory) {\n\t\tbytes memory bStr = bytes(str);\n\t\tbytes memory bLower = new bytes(bStr.length);\n\t\tfor (uint i = 0; i < bStr.length; i++) {\n\t\t\t// Uppercase character...\n\t\t\tif ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\n\t\t\t\t// So we add 32 to make it lowercase\n\t\t\t\tbLower[i] = bytes1(uint8(bStr[i]) + 32);\n\t\t\t} else {\n\t\t\t\tbLower[i] = bStr[i];\n\t\t\t}\n\t\t}\n\t\treturn string(bLower);\n\t}\n\n\tfunction substring(\n\t\tstring memory str,\n\t\tuint startIndex,\n\t\tuint endIndex\n\t) internal pure returns (string memory) {\n\t\tbytes memory strBytes = bytes(str);\n\t\tbytes memory result = new bytes(endIndex - startIndex);\n\t\tfor (uint i = startIndex; i < endIndex; i++) {\n\t\t\tresult[i - startIndex] = strBytes[i];\n\t\t}\n\t\treturn string(result);\n\t}\n}\n"
    },
    "@zk-email/contracts/utils/StringUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6;\n\n// https://github.com/nalinbhardwaj/ethdosnumber/blob/main/ethdos-contracts/src/HexStrings.sol\nlibrary StringUtils {\n    bytes16 internal constant ALPHABET = \"0123456789abcdef\";\n    uint256 internal constant DEFAULT_PACK_SIZE = 31;\n\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = ALPHABET[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length);\n        for (uint256 i = buffer.length; i > 0; i--) {\n            buffer[i - 1] = ALPHABET[value & 0xf];\n            value >>= 4;\n        }\n        return string(buffer);\n    }\n\n    function toString(uint256 value) internal pure returns (string memory) {\n        return toString(abi.encodePacked(value));\n    }\n\n    function toString(bytes32 value) internal pure returns (string memory) {\n        return toString(abi.encodePacked(value));\n    }\n\n    function toString(address account) internal pure returns (string memory) {\n        return toString(abi.encodePacked(account));\n    }\n\n    function stringEq(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\n    }\n\n    function toString(bytes memory data) internal pure returns (string memory) {\n        bytes memory alphabet = \"0123456789abcdef\";\n\n        bytes memory str = new bytes(2 + data.length * 2);\n        str[0] = \"0\";\n        str[1] = \"x\";\n        for (uint256 i = 0; i < data.length; i++) {\n            str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\n            str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\n        }\n        return string(str);\n    }\n\n    // 1 packed byte = packSize (usually 31) normal bytes, all in one 255/256-bit value\n    // Note that this is not 32 due to the field modulus of circom\n    function convertPackedByteToString(uint256 packedByte, uint256 packSize)\n        internal\n        pure\n        returns (string memory extractedString)\n    {\n        uint256[] memory packedBytes = new uint256[](1);\n        packedBytes[0] = packedByte;\n        return convertPackedBytesToString(packedBytes, packSize, packSize);\n    }\n\n    // Note: This convenience function removes the max string length check, which may cause misalignment with the circom\n    // If using this, then the circom needs to rangecheck packed length in the circuit itself\n    // This defaults to 31 bytes per packed byte\n    function convertPackedBytesToString(uint256[] memory packedBytes) \n        internal\n        pure\n        returns (string memory extractedString)\n    {\n        return convertPackedBytesToString(packedBytes, packedBytes.length * DEFAULT_PACK_SIZE, DEFAULT_PACK_SIZE);\n    }\n\n    // Unpacks uint256s into bytes and then extracts the non-zero characters\n    // Only extracts contiguous non-zero characters and ensures theres only 1 such state\n    // Note that unpackedLen may be more than packedBytes.length * 8 since there may be 0s\n    // signals is the total number of signals (i.e. bytes) packed into the packedBytes. it defaults to packedBytes.length * packSize\n    function convertPackedBytesToString(uint256[] memory packedBytes, uint256 signals, uint256 packSize)\n        internal\n        pure\n        returns (string memory extractedString)\n    {\n        uint8 state = 0;\n        // bytes: 0 0 0 0 y u s h _ g 0 0 0\n        // state: 0 0 0 0 1 1 1 1 1 1 2 2 2\n        bytes memory nonzeroBytesArray = new bytes(packedBytes.length * packSize);\n        uint256 nonzeroBytesArrayIndex = 0;\n        for (uint16 i = 0; i < packedBytes.length; i++) {\n            uint256 packedByte = packedBytes[i];\n            uint8[] memory unpackedBytes = new uint8[](packSize);\n            for (uint256 j = 0; j < packSize; j++) {\n                unpackedBytes[j] = uint8(packedByte >> (j * 8));\n            }\n            for (uint256 j = 0; j < packSize; j++) {\n                uint256 unpackedByte = unpackedBytes[j]; //unpackedBytes[j];\n                if (unpackedByte != 0) {\n                    nonzeroBytesArray[nonzeroBytesArrayIndex] = bytes1(uint8(unpackedByte));\n                    nonzeroBytesArrayIndex++;\n                    if (state % 2 == 0) {\n                        state += 1;\n                    }\n                } else {\n                    if (state % 2 == 1) {\n                        state += 1;\n                    }\n                }\n                packedByte = packedByte >> 8;\n            }\n        }\n        // TODO: You might want to assert that the state is exactly 1 or 2\n        // If not, that means empty bytse have been removed from the middle and things have been concatenated.\n        // We removed due to some tests failing, but this is not ideal and the require should be uncommented as soon as tests pass with it.\n\n        // require(state == 1 || state == 2, \"Invalid final state of packed bytes in email; more than two non-zero regions found!\");\n        require(state >= 1, \"No packed bytes found! Invalid final state of packed bytes in email; value is likely 0!\");\n        require(nonzeroBytesArrayIndex <= signals, \"Packed bytes more than allowed max number of signals!\");\n        string memory returnValue = removeTrailingZeros(string(nonzeroBytesArray));\n        return returnValue;\n        // Have to end at the end of the email -- state cannot be 1 since there should be an email footer\n    }\n\n    function bytes32ToString(bytes32 input) internal pure returns (string memory) {\n        uint256 i;\n        for (i = 0; i < 32 && input[i] != 0; i++) {}\n        bytes memory resultBytes = new bytes(i);\n        for (i = 0; i < 32 && input[i] != 0; i++) {\n            resultBytes[i] = input[i];\n        }\n        return string(resultBytes);\n    }\n\n    // sliceArray is used to slice an array of uint256s from start-end into a new array of uint256s\n    function sliceArray(uint256[] memory input, uint256 start, uint256 end) internal pure returns (uint256[] memory) {\n        require(start <= end && end <= input.length, \"Invalid slice indices\");\n        uint256[] memory result = new uint256[](end - start);\n        for (uint256 i = start; i < end; i++) {\n            result[i - start] = input[i];\n        }\n        return result;\n    }\n\n    // stringToUint is used to convert a string like \"45\" to a uint256 4\n    function stringToUint(string memory s) internal pure returns (uint256) {\n        bytes memory b = bytes(s);\n        uint256 result = 0;\n        for (uint256 i = 0; i < b.length; i++) {\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\n            }\n\n            // TODO: Currently truncates decimals\n            if (b[i] == 0x2E) {\n                return result;\n            }\n        }\n        return result;\n    }\n\n    // getDomainFromEmail is used to extract the domain from an email i.e. the part after the @\n    function getDomainFromEmail(string memory fromEmail) internal pure returns (string memory) {\n        bytes memory emailBytes = bytes(fromEmail);\n        uint256 atIndex;\n        for (uint256 i = 0; i < emailBytes.length; i++) {\n            if (emailBytes[i] == \"@\") {\n                atIndex = i;\n                break;\n            }\n        }\n\n        bytes memory domainBytes = new bytes(emailBytes.length - atIndex - 1);\n        for (uint256 j = 0; j < domainBytes.length; j++) {\n            domainBytes[j] = emailBytes[atIndex + 1 + j];\n        }\n        return bytes32ToString(bytes32(bytes(domainBytes)));\n    }\n\n    function removeTrailingZeros(string memory input) public pure returns (string memory) {\n        bytes memory inputBytes = bytes(input);\n        uint256 endIndex = inputBytes.length;\n\n        for (uint256 i = 0; i < inputBytes.length; i++) {\n            if (inputBytes[i] == 0) {\n                endIndex = i;\n                break;\n            }\n        }\n\n        bytes memory resultBytes = new bytes(endIndex);\n        for (uint256 i = 0; i < endIndex; i++) {\n            resultBytes[i] = inputBytes[i];\n        }\n\n        return string(resultBytes);\n    }\n\n    // Upper/lower string utils from https://github.com/willitscale/solidity-util/blob/master/lib/Strings.sol\n    /**\n     * Upper\n     *\n     * Converts all the values of a string to their corresponding upper case\n     * value.\n     *\n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string base to convert to upper case\n     * @return string\n     */\n    function upper(string memory _base) public pure returns (string memory) {\n        bytes memory _baseBytes = bytes(_base);\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\n            _baseBytes[i] = _upper(_baseBytes[i]);\n        }\n        return string(_baseBytes);\n    }\n\n    /**\n     * Lower\n     *\n     * Converts all the values of a string to their corresponding lower case\n     * value.\n     *\n     * @param _base When being used for a data type this is the extended object\n     *              otherwise this is the string base to convert to lower case\n     * @return string\n     */\n    function lower(string memory _base) public pure returns (string memory) {\n        bytes memory _baseBytes = bytes(_base);\n        for (uint256 i = 0; i < _baseBytes.length; i++) {\n            _baseBytes[i] = _lower(_baseBytes[i]);\n        }\n        return string(_baseBytes);\n    }\n\n    /**\n     * Upper\n     *\n     * Convert an alphabetic character to upper case and return the original\n     * value when not alphabetic\n     *\n     * @param _b1 The byte to be converted to upper case\n     * @return bytes1 The converted value if the passed value was alphabetic\n     *                and in a lower case otherwise returns the original value\n     */\n    function _upper(bytes1 _b1) private pure returns (bytes1) {\n        if (_b1 >= 0x61 && _b1 <= 0x7A) {\n            return bytes1(uint8(_b1) - 32);\n        }\n\n        return _b1;\n    }\n\n    /**\n     * Lower\n     *\n     * Convert an alphabetic character to lower case and return the original\n     * value when not alphabetic\n     *\n     * @param _b1 The byte to be converted to lower case\n     * @return bytes1 The converted value if the passed value was alphabetic\n     *                and in a upper case otherwise returns the original value\n     */\n    function _lower(bytes1 _b1) private pure returns (bytes1) {\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\n            return bytes1(uint8(_b1) + 32);\n        }\n\n        return _b1;\n    }\n}\n"
    },
    "contracts/DomainExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport { Pausable } from \"@openzeppelin/contracts/security/Pausable.sol\";\n\nimport { AddressAllowList } from \"./external/AddressAllowList.sol\";\nimport { Bytes32ArrayUtils } from \"./external/lib/Bytes32ArrayUtils.sol\";\nimport { Uint256ArrayUtils } from \"./external/lib/Uint256ArrayUtils.sol\";\nimport { IKeyHashAdapterV2 } from \"./external/interfaces/IKeyHashAdapterV2.sol\";\n\nimport { ITransferDomainProcessor } from \"./interfaces/ITransferDomainProcessor.sol\";\nimport { IVerifiedDomainRegistry } from \"./interfaces/IVerifiedDomainRegistry.sol\";\n\npragma solidity ^0.8.18;\n\ncontract DomainExchange is AddressAllowList, ReentrancyGuard, Pausable {\n\n    using Address for address payable;\n    using Bytes32ArrayUtils for bytes32[];\n    using Uint256ArrayUtils for uint256[];\n\n    /* ============ Events ============ */\n    \n    event ListingCreated(\n        uint256 indexed listingId, \n        address indexed seller, \n        bytes32 indexed domainId, \n        bytes32 dkimKeyHash,\n        uint256 askPrice,\n        uint256 minBidPrice,\n        address saleEthRecipient\n    );\n    event ListingUpdated(uint256 indexed listingId, address indexed seller, uint256 newAskPrice, address saleEthRecipient);\n    event ListingDeleted(uint256 indexed listingId, address indexed seller);\n    \n    event BidCreated(uint256 indexed bidId, uint256 indexed listingId, address indexed buyer, uint256 price);\n    event BidPriceIncreased(uint256 indexed bidId, address indexed buyer, uint256 newPrice);\n    event RefundInitiated(uint256 indexed bidId, address indexed buyer);\n    event BidWithdrawn(uint256 indexed bidId, address indexed buyer, uint256 amount);\n    \n    event SaleFinalized(uint256 indexed bidId, uint256 indexed listingId, uint256 priceNetFees, uint256 fees);\n    \n    event FeeUpdated(uint256 newFee);\n    event FeeRecipientUpdated(address indexed newFeeRecipient);\n    event BidSettlementPeriodUpdated(uint256 newBidSettlementPeriod);\n    event BidRefundPeriodUpdated(uint256 newBidRefundPeriod);\n    event TransferDomainProcessorUpdated(ITransferDomainProcessor indexed newTransferDomainProcessor);\n    event MailServerKeyHashAdapterUpdated(IKeyHashAdapterV2 indexed newMailServerKeyHashAdapter);\n\n    /* ============ Structs ============ */\n    struct Listing {\n        address seller;\n        address payable saleEthRecipient;       // Must be a contract that can receive ETH or an EOA\n        bytes32 dkimKeyHash;            // Allow for custom DKIM key hash\n        bytes encryptionKey;\n        bytes32 domainId;\n        uint256 createdAt;\n        uint256 askPrice;\n        uint256 minBidPrice;\n        bool isActive;          // false by default, set to true when the listing is created\n        uint256[] bids;\n    }\n\n    struct ListingWithId {\n        uint256 listingId;\n        Listing listing;\n    }\n\n    struct Bid {\n        address buyer;\n        uint256 listingId;\n        string encryptedBuyerId;\n        bytes32 buyerIdHash;\n        uint256 createdAt;\n        uint256 expiryTimestamp;\n        uint256 price;\n        bool refundInitiated;\n    }\n\n    struct BidWithId {\n        uint256 bidId;\n        Bid bid;\n    }\n\n    /* ============ Modifiers ============ */\n    modifier onlyInitialized() {\n        require(isInitialized, \"Contract must be initialized\");\n        _;\n    }\n\n    /* ============ Public Variables ============ */\n\n    mapping(uint256 => Listing) public listings;\n    mapping(address => uint256[]) public userListings;\n    mapping(uint256 => Bid) public bids;\n    mapping(address => uint256[]) public userBids;\n    mapping(bytes32 => uint256) public domainListing;\n\n    uint256 public fee;\n    address payable public feeRecipient;\n    uint256 public bidCounter;\n    uint256 public listingCounter;\n    uint256 public bidSettlementPeriod;\n    uint256 public bidRefundPeriod;\n    \n    bool public isInitialized;\n    \n    ITransferDomainProcessor public transferDomainProcessor;\n    IVerifiedDomainRegistry public verifiedDomainRegistry;\n    IKeyHashAdapterV2 public mailServerKeyHashAdapter;\n\n    /* ============ Constants ============ */\n    uint256 internal constant PRECISE_UNIT = 1e18;\n\n    /* ============ Constructor ============ */\n\n    constructor(\n        address _owner,\n        uint256 _fee,\n        address payable _feeRecipient,\n        uint256 _bidSettlementPeriod,\n        uint256 _bidRefundPeriod,\n        address[] memory _allowedAddresses\n    ) AddressAllowList(_allowedAddresses) {\n        fee = _fee;\n        feeRecipient = _feeRecipient;\n        bidSettlementPeriod = _bidSettlementPeriod;\n        bidRefundPeriod = _bidRefundPeriod;\n        \n        bidCounter = 1;\n        listingCounter = 1;\n        isInitialized = false;\n        \n        transferOwnership(_owner);\n    }\n\n    /* ============ Public Functions ============ */\n\n    /**\n     * @notice Creates listing for a domain. If ownership of domain changes offchain, the new owner\n     * will have to first register the domain on the domain registry contract. Then the new owner\n     * can create a listing for the domain. The old listing will be deleted from the old owner's \n     * listings and the old listing is marked as NOT active, which prevents any new bids from being\n     * created on it and makes the old bids immediately withdrawable. We also allow the seller to\n     * specify a custom DKIM key hash for Namecheap if they want to opt out of using the managed DKIM\n     * key hash set in the transferDomainProcessor contract. The managed DKIM key hash *can* be \n     * updated by us whenever Namecheap rotates their DKIM key.\n     *\n     * Function reverts if:\n     * - Caller is not domain owner on the domain registry contract\n     * - Ask price is less than min bid price\n     * - Sale ETH recipient is the zero address\n     *\n     * @param _domainId         The unique identifier of the domain\n     * @param _askPrice         An asking price for the domain\n     * @param _minBidPrice      The minimum bid price for the domain\n     * @param _saleEthRecipient The address to receive the ETH from the sale; must be a contract that can\n     *                          receive ETH or an EOA\n     * @param _encryptionKey    The encryption key for buyers to encrypt the buyerId to\n     * @param _dkimKeyHash      The custom DKIM key hash. If empty, the managed DKIM key hash will be used\n     */\n    function createListing(\n        bytes32 _domainId, \n        uint256 _askPrice, \n        uint256 _minBidPrice, \n        address payable _saleEthRecipient, \n        bytes memory _encryptionKey,\n        bytes32 _dkimKeyHash\n    ) \n        external\n        onlyAllowed\n        onlyInitialized \n        whenNotPaused\n    {\n        address domainOwner = verifiedDomainRegistry.getDomainOwner(_domainId);\n        require(domainOwner == msg.sender, \"Caller is not domain owner\");\n        require(_minBidPrice > 0, \"Minimum bid price is zero\");\n        require(_askPrice >= _minBidPrice, \"Ask price is less than min bid price\");\n        require(_saleEthRecipient != address(0), \"Invalid sale ETH recipient\");\n\n        uint256 listingId = _updateCreateListingState(\n            _domainId, _askPrice, _minBidPrice, _saleEthRecipient, _encryptionKey, _dkimKeyHash\n        );\n\n        emit ListingCreated(listingId, msg.sender, _domainId, _dkimKeyHash, _askPrice, _minBidPrice, _saleEthRecipient);\n    }\n\n    /**\n     * @notice Creates a new bid for a listing. Transfers ETH from the buyer to the contract. Every buyer\n     * has a unique identifier, for Namecheap it's their username. The seller needs the raw buyerId\n     * to transfer the domain off-chain. To facilitate this, the buyer encrypts their buyerId using the \n     * seller's encryption key and sends it along with the bid. The seller then decrypts the buyerId \n     * using their private key to get the raw buyerId.\n     *\n     * DEV NOTE: We do not check that the encrypted buyerId is the same as the hashed buyerId. This must be\n     * done in the client! This does not affect the security of the protocol as the encrypted buyerId is only \n     * used for communication between the buyer and the seller while maintaining privacy.\n     *\n     * @param _listingId            The unique identifier of the listing to bid on\n     * @param _buyerIdHash          The hashed buyerId which is also output as part of the transfer proof later\n     * @param _encryptedBuyerId     The encrypted buyerId. Should be the same as the buyerId hashed\n     */\n    function createBid(uint256 _listingId, bytes32 _buyerIdHash, string memory _encryptedBuyerId) \n        external \n        payable\n        nonReentrant\n        whenNotPaused\n    {\n        uint256 price = msg.value;\n        Listing storage listing = listings[_listingId];\n\n        _validateCreateBid(listing, price, _buyerIdHash);\n\n        uint256 bidId = _updateCreateBidState(listing, _listingId, price, _buyerIdHash, _encryptedBuyerId);\n\n        emit BidCreated(bidId, _listingId, msg.sender, price);\n    }\n\n    /**\n     * @notice ONLY SELLER: Finalizes a sale by verifying the domain transfer and unlocking bid funds to \n     * the listing owner. The seller can also finalize the sale with bids that have initiated a refund \n     * including the ones that have expired based on timestamp but not withdrawn yet.\n     *\n     * @param _proof The zk-email proof of domain transfer\n     */\n    function finalizeSale(ITransferDomainProcessor.TransferProof calldata _proof) \n        external\n        onlyInitialized\n        nonReentrant\n        whenNotPaused\n    {\n        // Check\n        (\n            bytes32 dkimKeyHash,\n            bytes32 hashedReceiverId, \n            string memory domainName, \n            uint256 bidId\n        ) = transferDomainProcessor.processProof(_proof);\n\n        Bid storage bid = bids[bidId];\n        Listing storage listing = listings[bid.listingId];\n        \n        _validateFinalizeSale(bid, listing, dkimKeyHash, hashedReceiverId, domainName);\n        \n        // Effect\n        uint256 transferValue = bid.price;\n        address payable recipient = listing.saleEthRecipient;\n        uint256 listingId = bid.listingId;\n        _updateFinalizeSaleState(bid, bidId, listing);\n\n        // Interaction\n        uint256 feeAmount = _settleSale(recipient, transferValue);\n        \n        emit SaleFinalized(bidId, listingId, transferValue - feeAmount, feeAmount);\n    }\n\n    /**\n     * @notice ONLY BUYER: Finalize a sale by releasing funds to the seller. Proof of transfer is not required\n     * because it is not in the buyer's interest to release funds unless they have received the domain. Note that the\n     * bid can be in ANY STATE when this function is called. Upon calling this function funds will be transferred to\n     * the seller and fees will be taken by the protocol. The listing and the bid will be deleted. The function will\n     * revert if:\n     * - The bid is not owned by the caller\n     * - The listing is not active (sold or withdrawn)\n     *\n     * @param _bidId The unique identifier of the bid to release funds for\n     */\n    function buyerReleaseFunds(uint256 _bidId) \n        external\n        nonReentrant\n    {\n        // Check\n        Bid storage bid = bids[_bidId];\n        Listing storage listing = listings[bid.listingId];\n\n        require(bid.buyer == msg.sender, \"Caller is not bid owner\");\n        require(listing.isActive, \"Listing not active\");\n\n        // Effect\n        uint256 transferValue = bid.price;\n        address payable recipient = listing.saleEthRecipient;\n        uint256 listingId = bid.listingId;\n        \n        _updateFinalizeSaleState(bid, _bidId, listing);\n\n        // Interaction\n        uint256 feeAmount = _settleSale(recipient, transferValue);\n\n        emit SaleFinalized(_bidId, listingId, transferValue - feeAmount, feeAmount);\n    }\n\n    /**\n     * @notice ONLY SELLER: Updates the asking price of an existing listing. We don't update\n     * the existing bids against the listing because the newAskPrice is an indicative value.\n     * The new ask price must be greater than or equal to the existing min bid price. If seller\n     * wants to update the min bid price, they should delete the listing and create a new one with\n     * the new min bid price.\n     *\n     * @param _listingId        The unique identifier of the listing to update\n     * @param _newAskPrice      The new asking price for the listing\n     * @param _saleEthRecipient The new address to receive the ETH from the sale; must be a contract that can\n     *                          receive ETH or an EOA\n     */\n    function updateListing(uint256 _listingId, uint256 _newAskPrice, address payable _saleEthRecipient) external whenNotPaused {\n        Listing storage listing = listings[_listingId];\n        \n        require(listing.seller == msg.sender, \"Caller is not listing owner\");\n        require(listing.isActive, \"Listing not active\");\n        require(_newAskPrice >= listing.minBidPrice, \"Ask price is less than min bid price\");\n        require(_saleEthRecipient != address(0), \"Invalid sale ETH recipient\");\n        \n        listing.askPrice = _newAskPrice;\n        listing.saleEthRecipient = _saleEthRecipient;\n\n        emit ListingUpdated(_listingId, msg.sender, _newAskPrice, _saleEthRecipient);\n    }\n\n    /**\n     * @notice ONLY SELLER: Marks a listing as NOT active. Removes the listing from the seller's listings array\n     * and domain listing. If the listing has no bids, it is deleted from the exchange. Bids against the listing\n     * are left as is to allow the buyer to withdraw the bid.\n     *\n     * @param _listingId The unique identifier of the listing to delete\n     */\n    function deleteListing(uint256 _listingId) external {\n        Listing storage listing = listings[_listingId];\n        \n        require(listing.seller == msg.sender, \"Caller is not listing owner\");\n        require(listing.isActive, \"Listing not active\");\n        \n        _pruneListing(listing, _listingId);\n\n        emit ListingDeleted(_listingId, msg.sender);\n    }\n\n    /**\n     * @notice ONLY BUYER: Increases the price of an existing bid. The new price can ONLY be higher \n     * than the old price. The buyer must send the additional amount of ETH. The function reverts if\n     * - bid has initiated refund, caller is not bid owner or listing is not active\n     * - the new price is less than old price\n     * - msg.value is NOT STRICTLY EQUAL to than new price - old price\n     *\n     * @param _bidId The unique identifier of the bid to increase the price for\n     * @param _newPrice The new price for the bid\n     */\n    function increaseBidPrice(uint256 _bidId, uint256 _newPrice) \n        external\n        payable\n        nonReentrant\n        whenNotPaused\n    {\n        Bid storage bid = bids[_bidId];\n        Listing storage listing = listings[bid.listingId];\n\n        // Check\n        _validateIncreaseBidPrice(bid, listing, _newPrice);        \n        \n        // Effect\n        bid.price = _newPrice;\n\n        emit BidPriceIncreased(_bidId, msg.sender, _newPrice);\n    }\n\n\n    /**\n     * @notice ONLY BUYER: Initiates the refund process for a bid. Can only be called by the bid owner \n     * after the initial bid expiry period has passed.\n     *\n     * @param _bidId The unique identifier of the bid to initiate refund for\n     */\n    function initiateRefund(uint256 _bidId) external {\n        Bid storage bid = bids[_bidId];\n        Listing storage listing = listings[bid.listingId];\n\n        _validateInitiateRefund(bid, listing);\n\n        bid.expiryTimestamp = block.timestamp + bidRefundPeriod;\n        bid.refundInitiated = true;\n\n        emit RefundInitiated(_bidId, bid.buyer);\n    }\n\n    /**\n     * @notice ONLY BUYER: Withdraws a bid after the refund period has ended. Transfers ETH back to the buyer.\n     *\n     * @param _bidId The unique identifier of the bid to withdraw\n     */\n    function withdrawBid(uint256 _bidId) external nonReentrant {\n        Bid storage bid = bids[_bidId];\n        Listing storage listing = listings[bid.listingId];\n\n        // Check\n        _validateWithdrawBid(bid, listing);\n\n        // Effect\n        uint256 refundAmount = bid.price;\n        _pruneBid(bid, _bidId, listing);\n        \n        // Interaction\n        payable(msg.sender).sendValue(refundAmount);\n\n        emit BidWithdrawn(_bidId, msg.sender, refundAmount);\n    }\n\n    /* ============ Admin Functions ============ */\n\n    /**\n     * @notice Initializes the contract with domain verification and transfer processors. Can \n     * only be called once by the contract owner\n     * \n     * @param _transferDomainProcessor The address of the domain transfer processor contract\n     * @param _verifiedDomainRegistry The address of the verified domain registry contract\n     * @param _mailServerKeyHashAdapter The address of the mail server key hash adapter contract\n     */\n    function initialize(\n        ITransferDomainProcessor _transferDomainProcessor,\n        IVerifiedDomainRegistry _verifiedDomainRegistry,\n        IKeyHashAdapterV2 _mailServerKeyHashAdapter\n    ) external onlyOwner {\n        require(!isInitialized, \"Already initialized\");\n        transferDomainProcessor = _transferDomainProcessor;\n        verifiedDomainRegistry = _verifiedDomainRegistry;\n        mailServerKeyHashAdapter = _mailServerKeyHashAdapter;\n        isInitialized = true;\n    }\n\n    /**\n     * @notice ONLY OWNER: Pauses listing and proof submission functionality for the marketplace. \n     * Functionalites that are paused:\n     * - Listing creation and update\n     * - Bid creation and update\n     * - Sale finalization\n     * \n     * Functinonalites that remain unpaused to allow users to retrieve funds in contract:\n     * - Bid refund initiation and withdrawal\n     * - Listing deletion\n     * - Manual settlement between buyer and seller\n     */\n    function pauseMarketplace() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @notice ONLY OWNER: Restarts paused functionality for the marketplace.\n     */\n    function unpauseMarketplace() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @notice ONLY OWNER: Update the transfer domain processor\n     *\n     * @param _transferDomainProcessor The new transfer domain processor\n     */\n    function updateTransferDomainProcessor(ITransferDomainProcessor _transferDomainProcessor) external onlyOwner {\n        require(address(_transferDomainProcessor) != address(0), \"Invalid address\");\n        \n        transferDomainProcessor = _transferDomainProcessor;\n        emit TransferDomainProcessorUpdated(_transferDomainProcessor);\n    }\n\n    /**\n     * @notice ONLY OWNER: Update the managed mail server key hash adapter\n     *\n     * @param _mailServerKeyHashAdapter The new mail server key hash adapter\n     */\n    function updateMailServerKeyHashAdapter(IKeyHashAdapterV2 _mailServerKeyHashAdapter) external onlyOwner {\n        require(address(_mailServerKeyHashAdapter) != address(0), \"Invalid address\");\n        \n        mailServerKeyHashAdapter = _mailServerKeyHashAdapter;\n        emit MailServerKeyHashAdapterUpdated(_mailServerKeyHashAdapter);\n    }\n\n    /**\n     * @notice ONLY OWNER: Updates the fee percentage for the marketplace\n     *\n     * @param _newFee The new fee percentage (in basis points)\n     */\n    function updateFee(uint256 _newFee) external onlyOwner {\n        fee = _newFee;\n        emit FeeUpdated(_newFee);\n    }\n\n    /**\n     * @notice ONLY OWNER: Updates the fee recipient address\n     *\n     * @param _newFeeRecipient The new address to receive fees\n     */\n    function updateFeeRecipient(address payable _newFeeRecipient) external onlyOwner {\n        require(_newFeeRecipient != address(0), \"Invalid address\");\n        feeRecipient = _newFeeRecipient;\n        emit FeeRecipientUpdated(_newFeeRecipient);\n    }\n\n    /**\n     * @notice ONLY OWNER: Updates the minimum bid active period\n     *\n     * @param _newBidSettlementPeriod The new bid settlement period in seconds\n     */\n    function updateBidSettlementPeriod(uint256 _newBidSettlementPeriod) external onlyOwner {\n        require(_newBidSettlementPeriod > 0, \"Bid settlement period must be greater than 0\");\n        bidSettlementPeriod = _newBidSettlementPeriod;\n        emit BidSettlementPeriodUpdated(_newBidSettlementPeriod);\n    }\n\n    /**\n     * @notice ONLY OWNER: Updates the bid refund period\n     *\n     * @param _newBidRefundPeriod The new bid refund period in seconds\n     */\n    function updateBidRefundPeriod(uint256 _newBidRefundPeriod) external onlyOwner {\n        require(_newBidRefundPeriod > 0, \"Bid refund period must be greater than 0\");\n        bidRefundPeriod = _newBidRefundPeriod;\n        emit BidRefundPeriodUpdated(_newBidRefundPeriod);\n    }\n\n    /* ============ View Functions ============ */    \n\n    /**\n     * @notice Get listing information with listingId for a list of listingIds\n     * @param _listingIds An array of listingIds to fetch details for\n     */\n    function getListings(uint256[] memory _listingIds)\n        external \n        view \n        returns (ListingWithId[] memory listingInfo) \n    {\n        listingInfo = new ListingWithId[](_listingIds.length);\n        for (uint256 i = 0; i < _listingIds.length; i++) {\n            listingInfo[i] = ListingWithId({\n                listingId: _listingIds[i],\n                listing: listings[_listingIds[i]]\n            });\n        }\n    }\n\n    /**\n     * @notice Returns all listings created by a user\n     * @param _user The address of the user to fetch listings for\n     */\n    function getUserListings(address _user) external view returns (ListingWithId[] memory listingInfo) {\n        uint256[] memory userListingIds = userListings[_user];\n        listingInfo = new ListingWithId[](userListingIds.length);\n        for (uint256 i = 0; i < userListingIds.length; i++) {\n            uint256 listingId = userListingIds[i];\n            listingInfo[i] = ListingWithId({\n                listingId: listingId,\n                listing: listings[listingId]\n            });\n        }\n    }\n\n    /**\n     * @notice Returns the bids created by a user\n     * @param _user The address of the user to fetch bids for\n     */\n    function getUserBids(address _user) external view returns (BidWithId[] memory bidInfo) {\n        uint256[] memory userBidIds = userBids[_user];\n        bidInfo = new BidWithId[](userBidIds.length);\n        for (uint256 i = 0; i < userBidIds.length; i++) {\n            uint256 bidId = userBidIds[i];\n            bidInfo[i] = BidWithId({\n                bidId: bidId,\n                bid: bids[bidId]\n            });\n        }\n    }\n\n    /**\n     * @notice Returns the bids for given listingIds\n     * @param _listingIds An array of listingIds to fetch bids for\n     */\n    function getListingBids(uint256[] memory _listingIds) external view returns (BidWithId[][] memory bidInfo) {\n        bidInfo = new BidWithId[][](_listingIds.length);\n        for (uint256 i = 0; i < _listingIds.length; i++) {\n            uint256 listingId = _listingIds[i];\n            uint256[] memory listingBidIds = listings[listingId].bids;\n            bidInfo[i] = new BidWithId[](listingBidIds.length);\n            for (uint256 j = 0; j < listingBidIds.length; j++) {\n                uint256 bidId = listingBidIds[j];\n                bidInfo[i][j] = BidWithId({\n                    bidId: bidId,\n                    bid: bids[bidId]\n                });\n            }\n        }\n    }\n\n    /**\n     * @notice Get all allowed sellers\n     */\n    function getAllowedSellers() external view returns (address[] memory) {\n        return _getAllowedAddresses();\n    }\n\n    /**\n     * @notice Get the active listing for given domain id\n     * @param _domainId The domain id to fetch the active listing for\n     */\n    function getDomainListing(bytes32 _domainId) external view returns (ListingWithId memory) {\n        uint256 listingId = domainListing[_domainId];\n        return ListingWithId({\n            listingId: listingId,\n            listing: listings[listingId]\n        });\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _updateCreateListingState(\n        bytes32 _domainId, \n        uint256 _askPrice, \n        uint256 _minBidPrice,\n        address payable _saleEthRecipient,\n        bytes memory _encryptionKey,\n        bytes32 _dkimKeyHash\n    ) internal returns (uint256 listingId) {\n        \n        // If listing already exists, delete the old listing\n        uint256 oldListingId = domainListing[_domainId];\n        if (oldListingId != 0) {\n            Listing storage listing = listings[oldListingId];\n            _pruneListing(listing, oldListingId);\n        }\n        \n        // New listing\n        listingId = listingCounter;\n        listings[listingId] = Listing({\n            seller: msg.sender,\n            saleEthRecipient: _saleEthRecipient,\n            encryptionKey: _encryptionKey,\n            dkimKeyHash: _dkimKeyHash,\n            askPrice: _askPrice,\n            minBidPrice: _minBidPrice,\n            domainId: _domainId,\n            createdAt: block.timestamp,\n            isActive: true,\n            bids: new uint256[](0)\n        });\n        userListings[msg.sender].push(listingId);\n        domainListing[_domainId] = listingId;\n\n        // Increment listingCounter\n        listingCounter = listingCounter + 1;\n    }\n\n    function _validateCreateBid(Listing storage _listing, uint256 _price, bytes32 _buyerIdHash) internal view {\n        require(_listing.seller != address(0), \"Listing does not exist\");\n        require(_listing.isActive, \"Listing not active\");\n        \n        // Validate inputs\n        require(_price >= _listing.minBidPrice, \"Bid price is less than min bid price\");\n        require(_buyerIdHash != bytes32(0), \"Buyer ID hash cannot be empty\");\n    }\n\n    function _updateCreateBidState(\n        Listing storage _listing, \n        uint256 _listingId, \n        uint256 _price, \n        bytes32 _buyerIdHash, \n        string memory _encryptedBuyerId\n    ) internal returns (uint256 bidId) {\n        bidId = bidCounter;\n        bids[bidId] = Bid({\n            buyer: msg.sender,\n            listingId: _listingId,\n            encryptedBuyerId: _encryptedBuyerId,\n            buyerIdHash: _buyerIdHash,\n            createdAt: block.timestamp,\n            expiryTimestamp: type(uint256).max,\n            price: _price,\n            refundInitiated: false\n        });\n        userBids[msg.sender].push(bidId);\n        _listing.bids.push(bidId);\n\n        // Increment bidCounter\n        bidCounter = bidCounter + 1;\n    }\n\n    function _validateFinalizeSale(\n        Bid storage _bid, \n        Listing storage _listing,\n        bytes32 _dkimKeyHash,\n        bytes32 _hashedReceiverId, \n        string memory _transferredDomainName\n    ) internal view {\n        require(_bid.buyer != address(0), \"Bid does not exist\");\n        require(_listing.seller == msg.sender, \"Caller is not listing owner\");\n        require(_listing.isActive, \"Listing not active\");\n\n        // Validate namecheap DKIM key\n        if (_listing.dkimKeyHash != bytes32(0)) {\n            require(_dkimKeyHash == _listing.dkimKeyHash, \"Invalid custom DKIM key hash\");\n        } else {\n            require(\n                mailServerKeyHashAdapter.isMailServerKeyHash(_dkimKeyHash), \n                \"Invalid managed DKIM key hash\"\n            );\n        }\n\n        // Validate domain and receiver\n        bytes32 transferredDomainId = keccak256(abi.encodePacked(_transferredDomainName));\n        require(_bid.buyerIdHash == _hashedReceiverId, \"Invalid receiver\");\n        require(_listing.domainId == transferredDomainId, \"Invalid domain\");\n    }\n\n    function _updateFinalizeSaleState(Bid storage _bid, uint256 _bidId, Listing storage _listing) internal {\n        uint256 listingId = _bid.listingId;\n        \n        _pruneBid(_bid, _bidId, _listing);\n        _pruneListing(_listing, listingId);\n    }\n\n    function _validateIncreaseBidPrice(\n        Bid storage _bid, \n        Listing storage _listing, \n        uint256 _newPrice\n    ) internal view {\n        require(_bid.buyer == msg.sender, \"Caller is not bid owner\");\n        require(!_bid.refundInitiated, \"Refund already initiated\");\n        require(_listing.isActive, \"Listing not active\");\n\n        // Validate new price\n        require(_newPrice > _bid.price, \"New price not greater than old price\");\n        require(msg.value == _newPrice - _bid.price, \"Incorrect amount of ETH sent\");\n    }\n\n    function _validateInitiateRefund(Bid storage _bid, Listing storage _listing) internal view {\n        require(_bid.buyer == msg.sender, \"Caller is not bid owner\");\n        require(!_bid.refundInitiated, \"Refund already initiated\");\n        require(block.timestamp > bidSettlementPeriod + _bid.createdAt, \"Refund period not started\");\n        require(_listing.isActive, \"Listing expired. Bid can be withdrawn directly\");\n    }\n\n    function _validateWithdrawBid(Bid storage _bid, Listing storage _listing) internal view {\n        require(_bid.buyer == msg.sender, \"Caller is not bid owner\");\n        if (_listing.isActive) {\n            require(_bid.refundInitiated, \"Refund not initiated\");\n            require(block.timestamp >= _bid.expiryTimestamp, \"Refund period not ended\");\n        }\n    }\n\n    function _settleSale(address payable _recipient, uint256 _amount) internal returns (uint256 feeAmount) {\n        feeAmount = (_amount * fee) / PRECISE_UNIT;\n        _recipient.sendValue(_amount - feeAmount);\n\n        if (feeAmount > 0) {\n            feeRecipient.sendValue(feeAmount);\n        }\n    }\n\n    /**\n     * @notice Deletes a bid from the exchange. Removes the bid from the listing's bids array and the buyer's\n     * bids array. Deletes the listing if it is expired and has no bids.\n     */\n    function _pruneBid(Bid storage _bid, uint256 _bidId, Listing storage _listing) internal {\n        userBids[_bid.buyer].removeStorage(_bidId);\n        _listing.bids.removeStorage(_bidId);\n        if (!_listing.isActive && _listing.bids.length == 0) {\n            delete listings[_bid.listingId];\n        }\n        delete bids[_bidId];\n    }\n\n    /**\n     * @notice Marks a listing as expired. Removes the listing from the seller's listings array and domain listing.\n     * If the listing has no bids, it is deleted from the exchange.\n     */\n    function _pruneListing(Listing storage _listing, uint256 _listingId) internal {\n        _listing.isActive = false;\n        userListings[_listing.seller].removeStorage(_listingId);\n        delete domainListing[_listing.domainId];\n        if (_listing.bids.length == 0) {\n            delete listings[_listingId];\n        }\n    }\n}\n"
    },
    "contracts/external/AddressAllowList.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { AddressArrayUtils } from \"./lib/AddressArrayUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract AddressAllowList is Ownable {\n\n    using AddressArrayUtils for address[];\n\n    /* ============ Events ============ */\n    event AddressAddedToAllowlist(address indexed allowedAddress);\n    event AddressRemovedFromAllowlist(address indexed allowedAddress);\n    event AllowlistEnabled();\n    event AllowlistDisabled();\n    \n    /* ============ Modifier ============ */\n    modifier onlyAllowed() {\n        require(isEnabled ? isAllowed[msg.sender] : true, \"Address is not allowed\");\n        _;\n    }\n    \n    /* ============ State Variables ============ */\n    bool public isEnabled;                     // Boolean indicating if the allowlist is enabled\n    address[] public allowedAddresses;         // Array of addresses that are allowed from taking depositors liquidity\n    mapping(address => bool) public isAllowed; // Mapping of address to boolean indicating if the user is allowed\n\n    /* ============ Constructor ============ */\n    constructor(address[] memory _allowedAddresses) Ownable() {\n        for (uint256 i = 0; i < _allowedAddresses.length; i++) {\n            address allowedAddress = _allowedAddresses[i];\n\n            require(!isAllowed[allowedAddress], \"Address is already allowed\");\n            isAllowed[allowedAddress] = true;\n            emit AddressAddedToAllowlist(allowedAddress);\n        }\n        allowedAddresses = _allowedAddresses;\n        isEnabled = true;\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Adds passed addresses to an allow list. Addresses on the allow list are able to call allow listed\n     * functions.\n     *\n     * @param _allowedAddresses   List of addresses allowed to call allow listed functions\n     */\n    function addAddressesToAllowlist(address[] memory _allowedAddresses) external onlyOwner {\n        for(uint256 i = 0; i < _allowedAddresses.length; i++) {\n            address allowedAddress = _allowedAddresses[i];\n\n            require(!isAllowed[allowedAddress], \"Address already on allowlist\");\n\n            isAllowed[allowedAddress] = true;\n            allowedAddresses.push(allowedAddress);\n\n            emit AddressAddedToAllowlist(allowedAddress);\n        }\n    }\n\n    /**\n     * @notice Removes passed addresses from an allow list. Addresses not on the allow list are unable to call\n     * allow listed functions.\n     *\n     * @param _disallowedAddresses   List of addresses being disallowed from calling allow listed functions\n     */\n    function removeAddressesFromAllowlist(address[] memory _disallowedAddresses) external onlyOwner {\n        for(uint256 i = 0; i < _disallowedAddresses.length; i++) {\n            address disallowedAddress = _disallowedAddresses[i];\n\n            require(isAllowed[disallowedAddress], \"Address already disallowed\");\n\n            isAllowed[disallowedAddress] = false;\n            allowedAddresses.removeStorage(disallowedAddress);\n\n            emit AddressRemovedFromAllowlist(disallowedAddress);\n        }\n    }\n\n    /**\n     * @notice Enable the allow list. When the allow list is enabled, only approved addresses are allowed to\n     * functions with onlyAllowed modifier.\n     */\n    function enableAllowlist() external onlyOwner {\n        require(!isEnabled, \"Allow list is already enabled\");\n\n        isEnabled = true;\n        emit AllowlistEnabled();\n    }\n\n    /**\n     * @notice Disable the allow list. When the allow list is disabled, any address is allowed to call functions\n     * with onlyAllowed modifier.\n     */\n    function disableAllowlist() external onlyOwner {\n        require(isEnabled, \"Allow list is already disabled\");\n\n        isEnabled = false;\n        emit AllowlistDisabled();\n    }\n\n    /* ============ View Functions ============ */\n\n    function _getAllowedAddresses() internal view returns (address[] memory) {\n        return allowedAddresses;\n    }\n}\n"
    },
    "contracts/external/ClaimVerifier.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Claims } from \"@reclaimprotocol/verifier-solidity-sdk/contracts/Claims.sol\";\n\npragma solidity ^0.8.18;\n\nlibrary ClaimVerifier {\n\n    /**\n     * Find the end index of target string in the data string. Returns the end index + 1 if\n     * the target string in the data string if found. Returns type(uint256).max if:\n     * - Target is longer than data\n     * - Target is not found\n     * Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code\n     */\n    function findSubstringEndIndex(\n        string memory data,\n        string memory target\n    ) public pure returns (uint256) {\n        bytes memory dataBytes = bytes(data);\n        bytes memory targetBytes = bytes(target);\n\n        if (dataBytes.length < targetBytes.length) {\n            return type(uint256).max;\n        }\n\n        // Find start of target\n        for (uint i = 0; i <= dataBytes.length - targetBytes.length; i++) {\n            bool isMatch = true;\n\n            for (uint j = 0; j < targetBytes.length && isMatch; j++) {\n                if (dataBytes[i + j] != targetBytes[j]) {\n                    isMatch = false;\n                    break;\n                }\n            }\n\n            if (isMatch) {\n                return i + targetBytes.length; // Return end index + 1\n            }\n        }\n\n        return type(uint256).max;\n    }\n\n    /**\n     * Extracts given target field value from context in claims. Extracts only ONE value.\n     * Pass prefix formatted with quotes, for example '\"providerHash\\\":\\\"'\n     * Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code\n     *\n     * @param data      Context string from which target value needs to be extracted\n     * @param prefix    Prefix of the target value that needs to be extracted            \n     */\n    function extractFieldFromContext(\n        string memory data,\n        string memory prefix\n    ) public pure returns (string memory) {\n        // Find end index of prefix; which is the start index of the value\n        uint256 start = findSubstringEndIndex(data, prefix);\n\n        bytes memory dataBytes = bytes(data);\n        if (start == dataBytes.length) {\n            return \"\"; // Prefix not found. Malformed or missing message\n        }\n        \n        // Find the end of the VALUE, assuming it ends with a quote not preceded by a backslash\n        uint256 end = start;\n        while (\n            end < dataBytes.length &&\n            !(dataBytes[end] == '\"' && dataBytes[end - 1] != \"\\\\\")\n        ) {\n            end++;\n        }\n        if (end <= start) {\n            return \"\"; // Malformed or missing message\n        }\n        bytes memory contextMessage = new bytes(end - start);\n        for (uint i = start; i < end; i++) {\n            contextMessage[i - start] = dataBytes[i];\n        }\n        return string(contextMessage);\n    }\n\n\n    /**\n     * Extracts ALL values from context in a single pass. Context is stored as serialized JSON string with \n     * two keys: extractedParameters and providerHash. ExtractedParameters itself is a JSON string with \n     * key-value pairs. This function returns extracted individual values from extractedParameters along \n     * with providerHash (if extractProviderHash is true). Use maxValues to limit the number of expected values\n     * to be extracted from extractedParameters. In most cases, one would need to extract all values from\n     * extractedParameters and providerHash, hence use this function over calling extractFieldFromContext \n     * multiple times.\n     * \n     * @param data                  Context string from which target value needs to be extracted\n     * @param maxValues             Maximum number of values to be extracted from extractedParameters\n     * @param extractProviderHash   Extracts and returns providerHash if true\n     */\n    function extractAllFromContext(\n        string memory data,\n        uint8 maxValues,\n        bool extractProviderHash\n    ) public pure returns (string[] memory) {\n        \n        require(maxValues > 0, \"Max values must be greater than 0\");\n\n        bytes memory dataBytes = bytes(data);\n        uint index = 0;\n\n        bytes memory extractedParametersBytes = bytes('{\\\"extractedParameters\\\":{\\\"');\n        for (uint i = 0; i < extractedParametersBytes.length; i++) {\n            require(dataBytes[index + i] == extractedParametersBytes[i], \"Extraction failed. Malformed extractedParameters\");\n        }\n        index += extractedParametersBytes.length;\n\n        bool isValue = false;       // starts with a key right after '{\\\"extractedParameters\\\":{\\\"'\n        uint valuesFound = 0;\n    \n        uint[] memory valueIndices = new uint[](extractProviderHash ? 2 * (maxValues + 1): 2 * maxValues);\n\n        while (\n            index < dataBytes.length\n        ) {\n            // Keep incrementing until '\"', escaped quotes are not considered\n            if (!(dataBytes[index] == '\"' && dataBytes[index - 1] != \"\\\\\")) {\n                index++;\n                continue;\n            }\n\n            if (!isValue) {\n                // \\\":\\\" (3 chars)\n                require(dataBytes[index + 1] == \":\" && dataBytes[index + 2] == '\\\"', \"Extraction failed. Malformed data 1\");\n                index += 3;     // move it after \\\"\n                isValue = true;\n                valueIndices[2 * valuesFound] = index;      // start index\n            } else {\n                // \\\",\\\" (3 chars) or \\\"}, (3 chars)\n                // \\\"}} is not supported, there should always be a providerHash\n                require(\n                    dataBytes[index + 1] == \",\" && dataBytes[index + 2] == '\\\"' ||  \n                    dataBytes[index + 1] == '}' && dataBytes[index + 2] == \",\",\n                    \"Extraction failed. Malformed data 2\"\n                );\n                valueIndices[2 * valuesFound + 1] = index;      // end index\n                valuesFound++;\n\n                if (dataBytes[index + 1] == \",\") {\n                    // Revert if valuesFound == maxValues and next char is a comma as there will be more values\n                    require(valuesFound != maxValues, \"Extraction failed. Exceeded max values\");\n                    index += 3;\n                    isValue = false;\n                } else {    // index + 1 = \"}\"\n                    index += 3;\n                    break;  // end of extractedParameters\n                }\n            }\n        }\n\n        if (extractProviderHash) {\n            bytes memory providerHashParamBytes = bytes(\"\\\"providerHash\\\":\\\"\");\n            for (uint i = 0; i < providerHashParamBytes.length; i++) {\n                require(dataBytes[index + i] == providerHashParamBytes[i], \"Extraction failed. Malformed providerHash\");\n            }\n            index += providerHashParamBytes.length;\n            \n            // final indices tuple in valueIndices will be for star and end indices of provider hash\n            valueIndices[2 * valuesFound] = index;\n            // Keep incrementing until '\"'\n            while (\n                index < dataBytes.length && dataBytes[index] != '\"'\n            ) {\n                index++;\n            }\n            valueIndices[2 * valuesFound + 1] = index;\n            valuesFound++;\n        }   \n        \n        string[] memory values = new string[](valuesFound);\n        \n        for (uint i = 0; i < valuesFound; i++) {\n            uint startIndex = valueIndices[2 * i];\n            uint endIndex = valueIndices[2 * i + 1];\n            bytes memory contextValue = new bytes(endIndex - startIndex);\n            for (uint j = startIndex; j < endIndex; j++) {\n                contextValue[j - startIndex] = dataBytes[j];\n            }\n            values[i] = string(contextValue);\n        }\n\n        return values;\n    }\n}\n"
    },
    "contracts/external/interfaces/IKeyHashAdapterV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IKeyHashAdapterV2 {\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external;\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external;\n    function getMailServerKeyHashes() external view returns (bytes32[] memory);\n    function isMailServerKeyHash(bytes32 _mailserverKeyHash) external view returns (bool);\n}\n"
    },
    "contracts/external/interfaces/INullifierRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface INullifierRegistry {\n    function addNullifier(bytes32 _nullifier) external;\n    function isNullified(bytes32 _nullifier) external view returns(bool);\n}\n"
    },
    "contracts/external/interfaces/IProxyBaseProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Claims } from \"@reclaimprotocol/verifier-solidity-sdk/contracts/Claims.sol\";\n\npragma solidity ^0.8.18;\n\ninterface IProxyBaseProcessor {\n    \n    struct Proof {\n        Claims.ClaimInfo claimInfo;\n        Claims.SignedClaim signedClaim;\n    }\n}\n"
    },
    "contracts/external/lib/AddressArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: MIT\n*/\n\npragma solidity ^0.8.17;\n\n/**\n * @title AddressArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle Address Arrays\n *\n * CHANGELOG:\n * - 4/21/21: Added validatePairsWithArray methods\n */\nlibrary AddressArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(address[] memory A, address a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n    * Returns true if there are 2 elements that are the same in an array\n    * @param A The input array to search\n    * @return Returns boolean for the first occurrence of a duplicate\n    */\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\n        require(A.length > 0, \"A is empty\");\n\n        for (uint256 i = 0; i < A.length - 1; i++) {\n            address current = A[i];\n            for (uint256 j = i + 1; j < A.length; j++) {\n                if (current == A[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The address to remove\n     * @return Returns the array with the object removed.\n     */\n    function remove(address[] memory A, address a)\n        internal\n        pure\n        returns (address[] memory)\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"Address not in array.\");\n        } else {\n            (address[] memory _A,) = pop(A, index);\n            return _A;\n        }\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The address to remove\n     */\n    function removeStorage(address[] storage A, address a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"Address not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n\n    /**\n    * Removes specified index from array\n    * @param A The input array to search\n    * @param index The index to remove\n    * @return Returns the new array and the removed entry\n    */\n    function pop(address[] memory A, uint256 index)\n        internal\n        pure\n        returns (address[] memory, address)\n    {\n        uint256 length = A.length;\n        require(index < A.length, \"Index must be < A length\");\n        address[] memory newAddresses = new address[](length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newAddresses[i] = A[i];\n        }\n        for (uint256 j = index + 1; j < length; j++) {\n            newAddresses[j - 1] = A[j];\n        }\n        return (newAddresses, A[index]);\n    }\n}\n"
    },
    "contracts/external/lib/Bytes32ArrayUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\n/**\n * @title Bytes32ArrayUtils\n * @author ZKP2P\n *\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\n */\nlibrary Bytes32ArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n    * Returns true if there are 2 elements that are the same in an array\n    * @param A The input array to search\n    * @return Returns boolean for the first occurrence of a duplicate\n    */\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\n        require(A.length > 0, \"A is empty\");\n\n        for (uint256 i = 0; i < A.length - 1; i++) {\n            bytes32 current = A[i];\n            for (uint256 j = i + 1; j < A.length; j++) {\n                if (current == A[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     * @return Returns the array with the object removed.\n     */\n    function remove(bytes32[] memory A, bytes32 a)\n        internal\n        pure\n        returns (bytes32[] memory)\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"bytes32 not in array.\");\n        } else {\n            (bytes32[] memory _A,) = pop(A, index);\n            return _A;\n        }\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     */\n    function removeStorage(bytes32[] storage A, bytes32 a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"bytes32 not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n\n    /**\n    * Removes specified index from array\n    * @param A The input array to search\n    * @param index The index to remove\n    * @return Returns the new array and the removed entry\n    */\n    function pop(bytes32[] memory A, uint256 index)\n        internal\n        pure\n        returns (bytes32[] memory, bytes32)\n    {\n        uint256 length = A.length;\n        require(index < A.length, \"Index must be < A length\");\n        bytes32[] memory newBytes = new bytes32[](length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newBytes[i] = A[i];\n        }\n        for (uint256 j = index + 1; j < length; j++) {\n            newBytes[j - 1] = A[j];\n        }\n        return (newBytes, A[index]);\n    }\n}\n"
    },
    "contracts/external/lib/DateTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// ----------------------------------------------------------------------------\n// DateTime Library v2.0\n//\n// A gas-efficient Solidity date and time library\n//\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n//\n// Tested date range 1970/01/01 to 2345/12/31\n//\n// Conventions:\n// Unit      | Range         | Notes\n// :-------- |:-------------:|:-----\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n// year      | 1970 ... 2345 |\n// month     | 1 ... 12      |\n// day       | 1 ... 31      |\n// hour      | 0 ... 23      |\n// minute    | 0 ... 59      |\n// second    | 0 ... 59      |\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n//\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n//\n// NOTE: This library has been pruned to keep only functions needed by zkp2p\n// ----------------------------------------------------------------------------\n\nlibrary DateTime {\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\n    uint256 constant SECONDS_PER_MINUTE = 60;\n    int256 constant OFFSET19700101 = 2440588;\n\n    uint256 constant DOW_MON = 1;\n    uint256 constant DOW_TUE = 2;\n    uint256 constant DOW_WED = 3;\n    uint256 constant DOW_THU = 4;\n    uint256 constant DOW_FRI = 5;\n    uint256 constant DOW_SAT = 6;\n    uint256 constant DOW_SUN = 7;\n\n    // ------------------------------------------------------------------------\n    // Calculate the number of days from 1970/01/01 to year/month/day using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // days = day\n    //      - 32075\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\n    //      - offset\n    // ------------------------------------------------------------------------\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\n        require(year >= 1970);\n        int256 _year = int256(year);\n        int256 _month = int256(month);\n        int256 _day = int256(day);\n\n        int256 __days = _day - 32075 + (1461 * (_year + 4800 + (_month - 14) / 12)) / 4\n            + (367 * (_month - 2 - ((_month - 14) / 12) * 12)) / 12\n            - (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) / 4 - OFFSET19700101;\n\n        _days = uint256(__days);\n    }\n\n    function timestampFromDateTime(\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    )\n        internal\n        pure\n        returns (uint256 timestamp)\n    {\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR\n            + minute * SECONDS_PER_MINUTE + second;\n    }\n}\n"
    },
    "contracts/external/lib/StringArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache-2.0\n*/\n\npragma solidity ^0.8.18;\n\n/**\n * @title StringArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle String Arrays\n */\nlibrary StringArrayUtils {\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input string to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(string[] memory A, string memory a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (keccak256(bytes(A[i])) == keccak256(bytes(a))) {\n                return (i, true);\n            }\n        }\n        return (type(uint256).max, false);\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The string to remove\n     */\n    function removeStorage(string[] storage A, string memory a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"String not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n}"
    },
    "contracts/external/lib/StringConversionUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\n// Building on zk-email's StringUtils library we add the ability to handle decimals when\n// converting from string to Uint\nlibrary StringConversionUtils {\n    \n    /**\n     * @notice Function that parses numbers returned as strings including floating point numbers. Returned floating point\n     * numbers are to have the desired amount of decimal specified. If the stringified version of the floating point\n     * number has more decimal places than desired then the function will revert in order to be maximally safe. If\n     * the returned number has multiple floating points then the function will revert.\n     *\n     * Examples: _s = \"12.34\", _expectedDecimals = 6 => 12340000\n     *           _s = \"12.34\", _expectedDecimals = 2 => 1234\n     *           _s = \"12.34\", _expectedDecimals = 1 => REVERT (we never want loss of precision only addition)\n     *           _s = \"12.34.56\", _expectedDecimals = 6 => REVERT (Invalid number)\n     *\n     * @param _s                    String being processed\n     * @param _desiredDecimals      Desired amount of decimal places\n     */\n    function stringToUint(string memory _s, uint256 _desiredDecimals) internal pure returns (uint256) {\n        return stringToUint(_s, 0x2E, _desiredDecimals);\n    }\n\n    function stringToUint(\n        string memory _s,\n        bytes1 _decimalCharacter,\n        uint256 _desiredDecimals\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        bytes memory b = bytes(_s);\n\n        uint256 result = 0;\n        uint256 decimalPlaces = 0;\n\n        bool decimals = false;\n        for (uint256 i = 0; i < b.length; i++) {\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\n            }\n\n            if (decimals) {\n                decimalPlaces++;\n            }\n\n            if (b[i] == _decimalCharacter) {\n                require(decimals == false, \"String has multiple decimals\");\n                decimals = true;\n            }\n        }\n\n        require(decimalPlaces <= _desiredDecimals, \"String has too many decimal places\");\n        return result * (10 ** (_desiredDecimals - decimalPlaces));\n    }\n\n    /**\n     * @notice Function that returns a substring from _startIndex to _endIndex (non-inclusive).\n     *\n     * @param _str           String being processed\n     * @param _startIndex    Index to start parsing from\n     * @param _endIndex      Index to stop parsing at (index not included in result)\n     */\n    function substring(string memory _str, uint _startIndex, uint _endIndex) internal pure returns (string memory ) {\n        bytes memory strBytes = bytes(_str);\n        bytes memory result = new bytes(_endIndex-_startIndex);\n        for(uint i = _startIndex; i < _endIndex; i++) {\n            result[i-_startIndex] = strBytes[i];\n        }\n        return string(result);\n    }\n\n    function replaceString(\n        string memory _str,\n        string memory _lookupValue,\n        string memory _replaceValue\n    )\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory strBytes = bytes(_str);\n        bytes memory lookupBytes = bytes(_lookupValue);\n\n        uint256 lookupIndex = indexOf(_str, _lookupValue);\n        if (lookupIndex == type(uint256).max) {\n            return _str;\n        }\n\n        // Split the original string into two parts: before and after the keyword\n        string memory beforeKeyword = substring(_str, 0, lookupIndex);\n        string memory afterKeyword = substring(_str, lookupIndex + lookupBytes.length, strBytes.length);\n        \n        return string.concat(beforeKeyword, _replaceValue, afterKeyword);\n    }\n\n    function indexOf(string memory str, string memory substr) internal pure returns (uint) {\n        bytes memory strBytes = bytes(str);\n        bytes memory substrBytes = bytes(substr);\n        \n        if (strBytes.length < substrBytes.length) return type(uint256).max;\n        \n        for (uint i = 0; i <= strBytes.length - substrBytes.length; i++) {\n            bool found = true;\n            for (uint j = 0; j < substrBytes.length; j++) {\n                if (strBytes[i + j] != substrBytes[j]) {\n                    found = false;\n                    break;\n                }\n            }\n            if (found) return i;\n        }\n        \n        return type(uint256).max;\n    }\n\n    function stringComparison(string memory _a, string memory _b) internal pure returns (bool) {\n        return (keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b)));\n    }\n}\n"
    },
    "contracts/external/lib/Uint256ArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache-2.0\n*/\n\npragma solidity ^0.8.18;\n\n/**\n * @title Uint256ArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle Uint256 Arrays\n */\nlibrary Uint256ArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(uint256[] memory A, uint256 a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n     * Returns the combination of the two arrays\n     * @param A The first array\n     * @param B The second array\n     * @return Returns A extended by B\n     */\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\n        uint256 aLength = A.length;\n        uint256 bLength = B.length;\n        uint256[] memory newUints = new uint256[](aLength + bLength);\n        for (uint256 i = 0; i < aLength; i++) {\n            newUints[i] = A[i];\n        }\n        for (uint256 j = 0; j < bLength; j++) {\n            newUints[aLength + j] = B[j];\n        }\n        return newUints;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     */\n    function removeStorage(uint256[] storage A, uint256 a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"uint256 not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n}\n"
    },
    "contracts/external/ManagedKeyHashAdapterV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { IKeyHashAdapterV2 } from \"./interfaces/IKeyHashAdapterV2.sol\";\nimport { Bytes32ArrayUtils } from \"./lib/Bytes32ArrayUtils.sol\";\n\npragma solidity ^0.8.18;\n\ncontract ManagedKeyHashAdapterV2 is Ownable, IKeyHashAdapterV2 {\n    \n    using Bytes32ArrayUtils for bytes32[];\n\n    /* ============ Events ============ */\n    event MailServerKeyHashAdded(bytes32 mailserverKeyHash);\n    event MailServerKeyHashRemoved(bytes32 mailserverKeyHash);\n\n    /* ============ State Variables ============ */\n\n    mapping(bytes32 => bool) public isMailServerKeyHash;\n    bytes32[] public mailServerKeyHashes;\n\n    /* ============ Constructor ============ */\n\n    constructor(\n        bytes32[] memory _mailServerKeyHashes\n    )\n        Ownable()\n    {\n        for (uint256 i = 0; i < _mailServerKeyHashes.length; i++) {\n            bytes32 mailserverKeyHash = _mailServerKeyHashes[i];\n            require(!isMailServerKeyHash[mailserverKeyHash], \"Key hash already added\");\n            \n            isMailServerKeyHash[mailserverKeyHash] = true;\n            mailServerKeyHashes.push(mailserverKeyHash);\n        }\n    }\n\n    /* ============ External Functions ============ */\n\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external onlyOwner {\n        require(!isMailServerKeyHash[_mailserverKeyHash], \"Key hash already added\");\n\n        isMailServerKeyHash[_mailserverKeyHash] = true;\n        mailServerKeyHashes.push(_mailserverKeyHash);\n\n        emit MailServerKeyHashAdded(_mailserverKeyHash);\n    }\n\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external onlyOwner {\n        require(isMailServerKeyHash[_mailserverKeyHash], \"Key hash not added\");\n\n        isMailServerKeyHash[_mailserverKeyHash] = false;\n        mailServerKeyHashes.removeStorage(_mailserverKeyHash);\n\n        emit MailServerKeyHashRemoved(_mailserverKeyHash);\n    }\n\n    /* ============ External Getter Functions ============ */\n\n    function getMailServerKeyHashes() external view override returns (bytes32[] memory) {\n        return mailServerKeyHashes;\n    }\n}\n"
    },
    "contracts/external/NullifierRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { AddressArrayUtils } from \"./lib/AddressArrayUtils.sol\";\nimport { INullifierRegistry } from \"./interfaces/INullifierRegistry.sol\";\n\npragma solidity ^0.8.18;\n\ncontract NullifierRegistry is Ownable, INullifierRegistry {\n\n    using AddressArrayUtils for address[];\n    \n    /* ============ Events ============ */\n    event NullifierAdded(bytes32 nullifier, address indexed writer);\n    event WriterAdded(address writer);\n    event WriterRemoved(address writer);\n\n    /* ============ Modifiers ============ */\n    modifier onlyWriter() {\n        require(isWriter[msg.sender], \"Only addresses with write permissions can call\");\n        _;\n    }\n\n    /* ============ State Variables ============ */\n    mapping(bytes32 => bool) public isNullified;\n    mapping(address => bool) public isWriter;\n    address[] public writers;\n\n    /* ============ Constructor ============ */\n    constructor() Ownable() {}\n    \n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY WRITER: Only addresses with permission to write to this contract can call. Stores a nullifier for an email.\n     *\n     * @param _nullifier    The nullifier to store\n     */\n    function addNullifier(bytes32 _nullifier) external onlyWriter {\n        require(!isNullified[_nullifier], \"Nullifier already exists\");\n\n        isNullified[_nullifier] = true;\n\n        emit NullifierAdded(_nullifier, msg.sender);\n    }\n\n    /* ============ Admin Functions ============ */\n\n    /**\n     * ONLY OWNER: Add address that has write permissions to the registry. Writer must not have been previously added.\n     *\n     * @param _newWriter    The nullifier to store\n     */\n    function addWritePermission(address _newWriter) external onlyOwner {\n        require(!isWriter[_newWriter], \"Address is already a writer\");\n\n        isWriter[_newWriter] = true;\n        writers.push(_newWriter);\n\n        emit WriterAdded(_newWriter);\n    }\n\n    /**\n     * ONLY OWNER: Remove address that has write permissions to the registry. Writer must have been previously added.\n     *\n     * @param _removedWriter    The nullifier to store\n     */\n    function removeWritePermission(address _removedWriter) external onlyOwner {\n        require(isWriter[_removedWriter], \"Address is not a writer\");\n\n        isWriter[_removedWriter] = false;\n        writers.removeStorage(_removedWriter);\n\n        emit WriterRemoved(_removedWriter);\n    }\n\n    /* ============ External View Functions ============ */\n\n    function getWriters() external view returns(address[] memory) {\n       return writers;\n    }\n}\n"
    },
    "contracts/external/processors/EmailBaseProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { IKeyHashAdapterV2 } from \"../interfaces/IKeyHashAdapterV2.sol\";\nimport { INullifierRegistry } from \"../interfaces/INullifierRegistry.sol\";\n\npragma solidity ^0.8.18;\n\ncontract EmailBaseProcessor is Ownable {\n\n    /* ============ Modifiers ============ */\n    modifier onlyExchange() {\n        require(msg.sender == exchange, \"Only exchange can call this function\");\n        _;\n    }\n\n    /* ============ State Variables ============ */\n    address public immutable exchange;\n    INullifierRegistry public nullifierRegistry;\n    bytes public emailFromAddress;\n    uint256 public timestampBuffer;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _exchange,\n        INullifierRegistry _nullifierRegistry,\n        string memory _emailFromAddress,\n        uint256 _timestampBuffer\n    )\n        Ownable()\n    {\n        exchange = _exchange;\n        nullifierRegistry = _nullifierRegistry;\n        emailFromAddress = bytes(_emailFromAddress);\n        timestampBuffer = _timestampBuffer;\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice ONLY OWNER: Sets the from email address for validated emails. Check that email address is properly\n     * padded (if necessary). Padding will be dependent on if unpacking functions cut trailing 0s or not.\n     *\n     * @param _emailFromAddress    The from email address for validated emails, MUST BE PROPERLY PADDED\n     */\n    function setEmailFromAddress(string memory _emailFromAddress) external onlyOwner {\n        emailFromAddress = bytes(_emailFromAddress);\n    }\n\n    /**\n     * @notice ONLY OWNER: Sets the timestamp buffer for validated emails. This is the amount of time in seconds\n     * that the timestamp can be off by and still be considered valid. Necessary to build in flexibility with L2\n     * timestamps.\n     *\n     * @param _timestampBuffer    The timestamp buffer for validated emails\n     */\n    function setTimestampBuffer(uint256 _timestampBuffer) external onlyOwner {\n        timestampBuffer = _timestampBuffer;\n    }\n\n    /* ============ External Getters ============ */\n\n    function getEmailFromAddress() external view returns (bytes memory) {\n        return emailFromAddress;\n    }\n\n\n    /* ============ Internal Functions ============ */\n\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\n        require(!nullifierRegistry.isNullified(_nullifier), \"Nullifier has already been used\");\n        nullifierRegistry.addNullifier(_nullifier);\n    }\n}\n"
    },
    "contracts/external/processors/ProxyBaseProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Claims } from \"@reclaimprotocol/verifier-solidity-sdk/contracts/Claims.sol\";\n\nimport { AddressArrayUtils } from \"../lib/AddressArrayUtils.sol\";\nimport { StringArrayUtils } from \"../lib/StringArrayUtils.sol\";\nimport { INullifierRegistry } from \"../interfaces/INullifierRegistry.sol\";\nimport { IProxyBaseProcessor } from \"../interfaces/IProxyBaseProcessor.sol\";\nimport { ClaimVerifier } from \"../ClaimVerifier.sol\";\n\npragma solidity ^0.8.18;\n\ncontract ProxyBaseProcessor is IProxyBaseProcessor, Ownable {\n\n    using AddressArrayUtils for address[];\n    using StringArrayUtils for string[];\n\n    /* ============ State Variables ============ */\n    mapping(address => bool) public isWitness;\n    address[] public witnesses;\n    mapping(string => bool) public isProviderHash;\n    string[] public providerHashes;                         // Set of provider hashes that these proofs should be for\n    INullifierRegistry public immutable nullifierRegistry;\n\n    /* ============ Events ============ */\n    event WitnessAdded(address witness);\n    event WitnessRemoved(address witness);\n    event ProviderHashAdded(string providerHash);\n    event ProviderHashRemoved(string providerHash);\n\n    /* ============ Constructor ============ */\n    constructor(\n        INullifierRegistry _nulliferRegistry,\n        string[] memory _providerHashes\n    )\n        Ownable()\n    {\n        nullifierRegistry = _nulliferRegistry;\n\n        for (uint256 i = 0; i < _providerHashes.length; i++) {\n            require(!isProviderHash[_providerHashes[i]], \"Provider hash already added\");\n            isProviderHash[_providerHashes[i]] = true;\n            providerHashes.push(_providerHashes[i]);\n\n            emit ProviderHashAdded(_providerHashes[i]);\n        }\n    }\n\n    /* ============ Admin Functions ============ */\n\n    /**\n     * ONLY OWNER: Add witness address. Witness must not have been previously added.\n     *\n     * @param _newWitness    Address of the new witness\n     */\n    function addWitness(address _newWitness) external onlyOwner {\n        require(!isWitness[_newWitness], \"Address is already a witness\");\n\n        isWitness[_newWitness] = true;\n        witnesses.push(_newWitness);\n\n        emit WitnessAdded(_newWitness);\n    }\n\n    /**\n     * ONLY OWNER: Remove witness address. Witness must have been previously added.\n     *\n     * @param _removeWitness    Address of witness to be removed\n     */\n    function removeWitness(address _removeWitness) external onlyOwner {\n        require(isWitness[_removeWitness], \"Address is not a witness\");\n\n        delete isWitness[_removeWitness];\n        witnesses.removeStorage(_removeWitness);\n\n        emit WitnessRemoved(_removeWitness);\n    }\n\n    /**\n     * ONLY OWNER: Add provider hash string. Provider hash must not have been previously added.\n     *\n     * @param _newProviderHash    New provider hash to be added\n     */\n    function addProviderHash(string memory _newProviderHash) external onlyOwner {\n        require(!isProviderHash[_newProviderHash], \"Provider hash already added\");\n\n        isProviderHash[_newProviderHash] = true;\n        providerHashes.push(_newProviderHash);\n\n        emit ProviderHashAdded(_newProviderHash);\n    }\n\n    /**\n     * ONLY OWNER: Remove provider hash string. Provider hash must have been previously added.\n     *\n     * @param _removeProviderHash    Provider hash to be removed\n     */\n    function removeProviderHash(string memory _removeProviderHash) external onlyOwner {\n        require(isProviderHash[_removeProviderHash], \"Provider hash not found\");\n\n        delete isProviderHash[_removeProviderHash];\n        providerHashes.removeStorage(_removeProviderHash);\n\n        emit ProviderHashRemoved(_removeProviderHash);\n    }\n\n    /* ============ Public Functions ============ */\n    \n    /**\n     * Verify proof generated by witnesses. Claim is constructed by hashing claimInfo (provider, context, parameters)\n     * to get the identifier. And then signing on (identifier, owner, timestamp, epoch) to get claim signature. \n     * This function verifies a claim by performing the following checks on the claim\n     * - Calculates the hash of the claimInfo and checks if it matches the identifier in the claim\n     * - Checks if the signatures are valid and from the witnesses\n     * This function reverts if\n     * - No signatures are found on the proof\n     * - Number of signatures is not equal to the number of witnesses\n     * - ClaimInfo hash does not match the identifier in the claim\n     * - Signatures are invalid (not from the witnesses)\n     * \n     * DEV NOTE: This function does NOT validate that the claim provider hash is valid. That is the \n     * responsibility of the caller.\n     * \n     * Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code\n     *    \n     * @param proof                 Proof to be verified\n     */\n    function verifyProofSignatures(Proof memory proof) public view returns (bool) {\n\n        // create signed claim using claimData and signature.\n        require(proof.signedClaim.signatures.length > 0, \"No signatures\");\n        Claims.SignedClaim memory signed = Claims.SignedClaim(\n            proof.signedClaim.claim,\n            proof.signedClaim.signatures\n        );\n\n        // check if the hash from the claimInfo is equal to the infoHash in the claimData\n        bytes32 hashed = Claims.hashClaimInfo(proof.claimInfo);\n        require(proof.signedClaim.claim.identifier == hashed, \"ClaimInfo hash doesn't match\");\n\n        // Recover signers of the signed claim\n        address[] memory signedWitnesses = Claims.recoverSignersOfSignedClaim(signed);\n\n        // check if the number of signatures is equal to the number of witnesses\n        require(\n            signedWitnesses.length == witnesses.length,\n            \"Number of signatures not equal to number of witnesses\"\n        );\n\n        // Check signatures are from witnesses\n        for (uint256 i = 0; i < signed.signatures.length; i++) {\n            bool found = false;\n            for (uint j = 0; j < witnesses.length; j++) {\n                if (signedWitnesses[i] == witnesses[j]) {\n                    found = true;\n                    break;\n                }\n            }\n            require(found, \"Signature not appropriate\");\n        }\n\n        return true;\n    }\n\n\n    /* ============ View Functions ============ */\n\n    function getWitnesses() external view returns (address[] memory) {\n        return witnesses;\n    }\n\n    function getProviderHashes() external view returns (string[] memory) {\n        return providerHashes;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _validateProviderHash(string memory _providerHash) internal view returns (bool) {\n        return isProviderHash[_providerHash];\n    }\n    \n    function _validateAndAddNullifier(bytes[] memory _sigArray) internal {\n        bytes32 nullifier = keccak256(abi.encode(_sigArray));\n        require(!nullifierRegistry.isNullified(nullifier), \"Nullifier has already been used\");\n        nullifierRegistry.addNullifier(nullifier);\n    }\n}\n"
    },
    "contracts/external/TicketmasterDataParsing.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { DateTime } from \"./lib/DateTime.sol\";\n\nimport { StringConversionUtils } from \"./lib/StringConversionUtils.sol\";\nimport { ClaimVerifier } from \"./ClaimVerifier.sol\";\n\npragma solidity ^0.8.18;\n\nlibrary TicketmasterDataParsing {\n    \n    using StringConversionUtils for string;\n\n    /**\n     * @notice Iterates through every character in the date string and splits the string at each dash, \"T\", or colon. Function will revert\n     * if there are not 6 substrings formed from the split. The substrings are then converted to uints and passed to the DateTime lib\n     * to get the unix timestamp. This function is SPECIFIC TO THE DATE FORMAT USED BY Ticketmaster, not suitable for use with other date\n     * formats. Ticketmaster date format is: \"YYYY-MM-DDTHH:MM:SS\" and returns UTC timestamps.\n     *\n     * @param _dateString       Date string to be converted to a UTC timestamp\n     */\n    function _dateStringToTimestamp(string memory _dateString) internal pure returns (uint256 utcTimestamp) {\n        string[6] memory extractedStrings;\n        uint256 breakCounter;\n        uint256 lastBreak;\n        for (uint256 i = 0; i < bytes(_dateString).length; i++) {\n            if (bytes(_dateString)[i] == 0x2d || bytes(_dateString)[i] == 0x3a || bytes(_dateString)[i] == 0x54) {\n                extractedStrings[breakCounter] = _dateString.substring(lastBreak, i);\n                lastBreak = i + 1;\n                breakCounter++;\n            }\n        }\n        // Add last substring to array\n        extractedStrings[breakCounter] = _dateString.substring(lastBreak, bytes(_dateString).length);\n\n        // Check that exactly 6 substrings were found (string is split at 5 different places)\n        require(breakCounter == 5, \"Invalid date string\");\n\n        utcTimestamp = DateTime.timestampFromDateTime(\n            extractedStrings[0].stringToUint(0),    // year\n            extractedStrings[1].stringToUint(0),    // month\n            extractedStrings[2].stringToUint(0),    // day\n            extractedStrings[3].stringToUint(0),    // hour\n            extractedStrings[4].stringToUint(0),    // minute\n            0                                       // we don't need to the second granularity\n        );\n    }\n\n    /**\n     * Extract event ID from URL by finding the last slash and taking the substring after it. We assume the\n     * URL is formulated something like: {domainRoot}/.../event/EVENT_ID\n     *\n     * @param _url          URL to extract event ID from\n     * @return              Event ID extracted from URL\n     */\n    function _extractEventIdFromUrl(string memory _url) internal pure returns (string memory) {\n        string memory prefix = \"event/\";\n        bytes memory urlBytes = bytes(_url);\n        uint256 urlLength = urlBytes.length;\n\n        uint256 startIndex = ClaimVerifier.findSubstringEndIndex(_url, prefix);\n        // If the start index is the max value or the URL length, then the event ID was not found\n        if (startIndex == type(uint256).max || startIndex == urlLength) {\n            revert(\"Event ID not found in URL\");\n        }\n\n        bytes memory contextMessage = new bytes(urlLength - startIndex);\n        for (uint i = startIndex; i < urlLength; i++) {\n            contextMessage[i - startIndex] = urlBytes[i];\n        }\n        return string(contextMessage);\n    }\n\n    /**\n     * Parse tickets out of a ticket string of the format: '[\"ticket1\", \"ticket2\", \"ticket3\"]'.\n     * We start by getting the number of tickets in a string by counting the number of commas and adding 1.\n     * Then we iterate through the string and find the ticket IDs by looking for the quotes. We need to extract\n     * from quote to quote so we look for all even-numbered quotes then extract the string between that and the\n     * previous quote index.\n     *\n     * @param _ticketString          Stringified array of tickets\n     */\n     function _parseTicketString(string memory _ticketString) internal pure returns (string[] memory ticketIds) {\n        // Assume there is at least one ticket (which means array would not have a comma)\n        // If there is no ticket then the transaction will end up reverting\n        uint256 ticketCount = 1;\n        for (uint256 i = 0; i < bytes(_ticketString).length; i++) {\n            if (bytes(_ticketString)[i] == 0x2C) {\n                ticketCount++;\n            }\n        }\n\n        ticketIds = new string[](ticketCount);\n        uint256 breakCounter;\n        uint256 lastBreak;\n        for (uint256 i = 0; i < bytes(_ticketString).length; i++) {\n            if (bytes(_ticketString)[i] == 0x22) {\n                breakCounter++;\n                if (breakCounter % 2 == 0) {\n                    ticketIds[(breakCounter/2)-1] = _ticketString.substring(lastBreak, i-1);\n                }\n                lastBreak = i + 1;\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ITransferDomainProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n\ninterface ITransferDomainProcessor {\n\n    struct TransferProof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[10] signals;\n    }\n\n    function processProof(\n        TransferProof calldata _proof\n    ) \n        external \n        returns (\n            bytes32 dkimKeyHash, \n            bytes32 hashedReceiverId, \n            string memory domainName, \n            uint256 bidId\n        );\n}"
    },
    "contracts/interfaces/IVerifiedDomainRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { IVerifyDomainProcessor } from \"./IVerifyDomainProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ninterface IVerifiedDomainRegistry {\n\n    struct Domain {\n        address owner;\n        string name;\n        uint256 expiryTime;\n    }\n\n    struct DomainWithId {\n        bytes32 domainId;\n        Domain domain;\n    }\n\n    function verifyDomains(IVerifyDomainProcessor.Proof[] memory _proofs) external;\n    function getDomainId(string memory _domainName) external pure returns (bytes32);\n    function getDomainOwner(bytes32 _domainId) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IVerifyDomainProcessor.sol": {
      "content": "//SPDX-License-Identifier: MIT\nimport { IProxyBaseProcessor } from \"../external/interfaces/IProxyBaseProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ninterface IVerifyDomainProcessor is IProxyBaseProcessor {\n    \n    struct DomainRaw {\n        string name;\n        uint256 expiryTime;\n    }\n\n    function verifyProofs(\n        Proof[] memory _proofs\n    ) \n        external  \n        returns (DomainRaw[] memory domains);\n}"
    },
    "contracts/mocks/TransferDomainProcessorMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { ITransferDomainProcessor } from \"../interfaces/ITransferDomainProcessor.sol\";\nimport { StringUtils } from \"@zk-email/contracts/utils/StringUtils.sol\";\n\n\npragma solidity ^0.8.18;\n\ncontract TransferDomainProcessorMock is ITransferDomainProcessor {\n\n    using StringUtils for uint256;\n\n    /* ============ State Variables ============ */\n    string storedDomainName;\n\n    /* ============ Constructor ============ */\n    constructor() {}\n\n    /* ============ External Functions ============ */\n\n    function setDomainName(string memory _domainName) external {\n        storedDomainName = _domainName;\n    }\n\n    function processProof(TransferProof memory _proof)\n        external\n        view\n        override\n        returns (bytes32 dkimKeyHash, bytes32 hashedReceiverId, string memory domainName, uint256 bidId)\n    {\n        dkimKeyHash = bytes32(_proof.signals[0]);\n        hashedReceiverId = bytes32(_proof.signals[1]);\n        domainName = storedDomainName;\n        bidId = _proof.signals[3];\n    }\n}\n\n\n"
    },
    "contracts/mocks/USDCMock.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\npragma solidity ^0.8.18;\n\ncontract USDCMock is ERC20 {\n\n    constructor(\n        uint256 _mintAmount,\n        string memory name,\n        string memory symbol\n    )\n        ERC20(name, symbol)\n    {\n        _mint(msg.sender, _mintAmount);\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/mocks/VerifyDomainProcessorMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { ClaimVerifier } from \"../external/ClaimVerifier.sol\";\nimport { StringConversionUtils } from \"../external/lib/StringConversionUtils.sol\";\nimport { TicketmasterDataParsing } from \"../external/TicketmasterDataParsing.sol\";\n\nimport { IVerifyDomainProcessor } from \"../interfaces/IVerifyDomainProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract VerifyDomainProcessorMock is IVerifyDomainProcessor {\n\n    using StringConversionUtils for string;\n\n    uint8 constant MAX_EXTRACT_VALUES = 5;\n\n    function verifyProofs(Proof[] memory _proofs)\n        external\n        pure\n        returns (DomainRaw[] memory domains)\n    {\n        domains = new DomainRaw[](_proofs.length);\n\n        for (uint256 i = 0; i < _proofs.length; i++) {\n            domains[i] = DomainRaw({\n                name: string(_proofs[i].signedClaim.signatures[0]),\n                // The TicketmasterDataParsing library's date parsing logic is pretty generic, and works for domain \n                // expiry dates as well. Similar to Ticketmaster dates, the expiry time is of the format \"YYYY-MM-DDTHH:MM:SS\"\n                // and returns UTC timestamps.\n                expiryTime: TicketmasterDataParsing._dateStringToTimestamp(string(_proofs[i].signedClaim.signatures[1]))\n            });\n        }\n\n        return domains;\n    }\n}\n"
    },
    "contracts/TransferDomainProcessor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { StringUtils } from \"@zk-email/contracts/utils/StringUtils.sol\";\n\nimport { EmailBaseProcessor } from \"./external/processors/EmailBaseProcessor.sol\";\nimport { INullifierRegistry } from \"./external/interfaces/INullifierRegistry.sol\";\nimport { StringConversionUtils } from \"./external/lib/StringConversionUtils.sol\";\n\nimport { Groth16Verifier } from \"./verifiers/namecheap_transfer_verifier.sol\";\nimport { ITransferDomainProcessor } from \"./interfaces/ITransferDomainProcessor.sol\";\n\npragma solidity ^0.8.18;\n\ncontract TransferDomainProcessor is Groth16Verifier, ITransferDomainProcessor, EmailBaseProcessor {\n    \n    using StringUtils for uint256[];\n    using StringConversionUtils for string;\n\n    /* ============ Constants ============ */\n    uint256 constant PACK_SIZE = 31;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _exchange,\n        INullifierRegistry _nullifierRegistry,\n        string memory _emailFromAddress,\n        uint256 _timestampBuffer\n    )\n        Groth16Verifier()\n        EmailBaseProcessor(\n            _exchange,\n            _nullifierRegistry,\n            _emailFromAddress,\n            _timestampBuffer\n        )\n    {}\n    \n    /* ============ External Functions ============ */\n\n    function processProof(\n        TransferProof calldata _proof\n    )\n        external\n        override\n        onlyExchange\n        returns (\n            bytes32 dkimKeyHash,\n            bytes32 hashedReceiverId,\n            string memory domainName, \n            uint256 bidId\n        )\n    {\n        require(this.verifyProof(_proof.a, _proof.b, _proof.c, _proof.signals), \"Invalid Proof\");\n\n        // Signal [0] is the DKIM key hash\n        dkimKeyHash = bytes32(_proof.signals[0]);\n\n        // Signals [1:2] are the packed from email address\n        string memory fromEmail = _parseSignalArray(_proof.signals, 1, 2);\n        require(\n            keccak256(abi.encodePacked(fromEmail)) == keccak256(emailFromAddress), \n            \"Invalid email from address\"\n        );\n        \n        // Signals [2:7] are packed domain name\n        domainName = _parseSignalArray(_proof.signals, 2, 7);\n\n        // Signal [7] is packed hashed namecheap id to which domain was transferred\n        hashedReceiverId = bytes32(_proof.signals[7]);\n\n        // Check if email has been used previously, if not nullify it so it can't be used again\n        _validateAndAddNullifier(bytes32(_proof.signals[8]));\n\n        // Signal [9] is bidId\n        bidId = _proof.signals[9];\n    }\n    \n    /* ============ Internal Functions ============ */\n\n    function _parseSignalArray(uint256[10] calldata _signals, uint8 _from, uint8 _to) \n        internal \n        pure \n        returns (string memory) \n    {\n        uint256[] memory signalArray = new uint256[](_to - _from);\n        for (uint256 i = _from; i < _to; i++) {\n            signalArray[i - _from] = _signals[i];\n        }\n\n        return signalArray.convertPackedBytesToString(signalArray.length * PACK_SIZE, PACK_SIZE);\n    }\n}\n"
    },
    "contracts/VerifiedDomainRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Bytes32ArrayUtils } from \"./external/lib/Bytes32ArrayUtils.sol\";\n\nimport { IVerifiedDomainRegistry } from \"./interfaces/IVerifiedDomainRegistry.sol\";\nimport { IVerifyDomainProcessor } from \"./interfaces/IVerifyDomainProcessor.sol\";\n\n\npragma solidity ^0.8.18;\n\ncontract VerifiedDomainRegistry is IVerifiedDomainRegistry, Ownable {\n\n    using Bytes32ArrayUtils for bytes32[];\n\n    /* ============ Events ============ */\n    event DomainVerified(\n        bytes32 indexed domainId,\n        address indexed owner,\n        string domainName,\n        uint256 expiryTime\n    );\n\n    event VerifyDomainProcessorUpdated(\n        IVerifyDomainProcessor indexed newVerifyDomainProcessor\n    );\n\n    /* ============ Modifiers ============ */\n    modifier onlyInitialized() {\n        require(isInitialized, \"Contract must be initialized\");\n        _;\n    }\n\n    /* ============ Public Variables ============ */\n    IVerifyDomainProcessor public verifyDomainProcessor;\n\n    bool public isInitialized;\n\n    mapping(bytes32 => Domain) public domains;\n    mapping(address => bytes32[]) public userDomains;\n\n    /* ============ Constructor ============ */\n    \n    constructor() Ownable() {}\n\n    /* ============ Public Functions ============ */\n\n    /**\n     * @notice Verify domains and add them to the registry. If domain is transferred off-chain to another party \n     * then they can re-verify the domain and claim ownership of the domain and previous ownership is removed.\n     * The existing owner can re-verify the domain, say after the domain has expired to update the expiry time on\n     * the domain. Function reverts if:\n     * - Domain ownership TLS proofs are invalid\n     * \n     * @param _proofs           Array of domain ownership TLS proofs\n     */\n    function verifyDomains(IVerifyDomainProcessor.Proof[] memory _proofs) external override\n        onlyInitialized\n    {\n        IVerifyDomainProcessor.DomainRaw[] memory rawDomains = verifyDomainProcessor.verifyProofs(\n            _proofs\n        );\n\n        for (uint256 i = 0; i < rawDomains.length; i++) {\n            IVerifyDomainProcessor.DomainRaw memory rawDomain = rawDomains[i];\n            bytes32 domainId = getDomainId(rawDomain.name);\n\n            Domain storage domain = domains[domainId];\n            if (domain.owner == address(0)) {\n                // Case 1.1: Domain has no owner\n                // Add caller as owner\n                userDomains[msg.sender].push(domainId);\n            } else {\n                // Case 2: Domain has owner\n                // Case 2.1: Caller is owner; skip\n                // Case 2.2: Caller is NOT owner\n                if (domain.owner != msg.sender) {\n                    // Remove ownership from old owner and add caller as new owner\n                    userDomains[domain.owner].removeStorage(domainId);\n                    userDomains[msg.sender].push(domainId);\n                }\n            }\n\n            domains[domainId] = Domain({\n                owner: msg.sender,\n                name: rawDomain.name,\n                expiryTime: rawDomain.expiryTime\n            });\n            \n            emit DomainVerified(domainId, msg.sender, rawDomain.name, rawDomain.expiryTime);\n        }\n    }\n\n    /* ============ Admin Functions ============ */\n\n    /**\n     * @notice ONLY OWNER: Initialize the contract with the VerifyDomainProcessor and exchange contracts.\n     * This can only be called once.\n     *\n     * @param _verifyDomainProcessor    Address of the VerifyDomainProcessor contract\n     */\n    function initialize(\n        IVerifyDomainProcessor _verifyDomainProcessor\n    )\n        external\n        onlyOwner\n    {\n        require(!isInitialized, \"Already initialized\");\n\n        verifyDomainProcessor = _verifyDomainProcessor;\n\n        isInitialized = true;\n\n        emit VerifyDomainProcessorUpdated(_verifyDomainProcessor);\n    }\n\n    /**\n     * @notice ONLY OWNER: Update the verify domain processor\n     *\n     * @param _verifyDomainProcessor    Address of the new VerifyDomainProcessor contract\n     */\n    function updateVerifyDomainProcessor(IVerifyDomainProcessor _verifyDomainProcessor) external onlyOwner {\n        require(address(_verifyDomainProcessor) != address(0), \"Invalid address\");\n\n        verifyDomainProcessor = _verifyDomainProcessor;\n        emit VerifyDomainProcessorUpdated(_verifyDomainProcessor);\n    }\n\n    /* ============ View Functions ============ */\n\n    function getDomainId(string memory _domainName) public pure override returns (bytes32) {\n        return keccak256(abi.encodePacked(_domainName));\n    }\n\n    function getDomainOwner(bytes32 _domainId) external view override returns (address) {        \n        return domains[_domainId].owner;\n    }\n\n    function getUserDomains(address _user) external view returns (DomainWithId[] memory domainInfo) {\n        bytes32[] memory domainIds = userDomains[_user];\n        \n        domainInfo = new DomainWithId[](domainIds.length);\n        for (uint256 i = 0; i < domainIds.length; i++) {\n            bytes32 domainId = domainIds[i];\n            domainInfo[i] = DomainWithId({\n                domainId: domainId,\n                domain: domains[domainId]\n            });\n        }\n    }\n\n    function getDomains(bytes32[] memory _domains) external view returns (DomainWithId[] memory domainInfo) {\n        domainInfo = new DomainWithId[](_domains.length);\n        for (uint256 i = 0; i < _domains.length; i++) {\n            bytes32 domainId = _domains[i];\n            domainInfo[i] = DomainWithId({\n                domainId: domainId,\n                domain: domains[domainId]\n            });\n        }\n    }\n}"
    },
    "contracts/verifiers/namecheap_transfer_verifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n/*\n    Copyright 2021 0KIMS association.\n\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Groth16Verifier {\n    // Scalar field size\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    // Base field size\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    // Verification Key data\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n\n\n    uint256 constant IC0x = 12140764414809439171579073747096628005611143888739021778142114438725209856911;\n    uint256 constant IC0y = 18380664008722994554410246598515713804368408809139402801410617352473294938101;\n\n    uint256 constant IC1x = 16287270730688090110441256630912972881096977102957363147237538512209615075930;\n    uint256 constant IC1y = 2449016754858987854593324887044687327196932594716827949199487058237499016691;\n\n    uint256 constant IC2x = 12290000746054008145532172012836689239677528072347882111559847558608807494030;\n    uint256 constant IC2y = 14308358318183304542626969831757608989020288980497492892592599563043422576641;\n\n    uint256 constant IC3x = 17109205409157997740951972967816433882944148152574672952222919864324056429618;\n    uint256 constant IC3y = 9961558237149244928391169779496769511791942854258198694890294984589871243856;\n\n    uint256 constant IC4x = 12885622983359679040345794541760667584938087103345731492334670493606961282700;\n    uint256 constant IC4y = 18397333374263242470546340955330845415543534978510188436756186606821028634481;\n\n    uint256 constant IC5x = 8251971901226176941314060074725743834337466028961811325874949093602610929902;\n    uint256 constant IC5y = 16257777857146800480589260332284762827173712873310789777823130626151679328406;\n\n    uint256 constant IC6x = 7755902890727928430969631143079950108469618570373249456222008624592630122217;\n    uint256 constant IC6y = 10757977250154075642155615103618917172698106635999924885067022788329148453826;\n\n    uint256 constant IC7x = 9229565613389027758694089669374665969186485724568040364429447974425840672975;\n    uint256 constant IC7y = 8522685561456236376873601057738356653321521861001626828091657280469196217906;\n\n    uint256 constant IC8x = 21276732369738095771663301979590133243106197446584260397744418605720907267683;\n    uint256 constant IC8y = 7293000518568388677473960035761983204180608786522452828815102825735261508468;\n\n    uint256 constant IC9x = 9116173570523657214485637140779662063231707742648921986441734490858993965489;\n    uint256 constant IC9y = 20125316561678768525824986864877835211109013619593406972323904438419789772526;\n\n    uint256 constant IC10x = 14220475398513461434883329515056365002533036699993990374428625877488131891870;\n    uint256 constant IC10y = 12173247053801606963174627761051371553685163525039542034195810636700588930659;\n\n\n    // Memory data\n    uint16 constant pVk = 0;\n    uint16 constant pPairing = 128;\n\n    uint16 constant pLastMem = 896;\n\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[10] calldata _pubSignals) public view returns (bool) {\n        assembly {\n            function checkField(v) {\n                if iszero(lt(v, r)) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            // G1 function to multiply a G1 value(x,y) to value in an address\n            function g1_mulAccC(pR, x, y, s) {\n                let success\n                let mIn := mload(0x40)\n                mstore(mIn, x)\n                mstore(add(mIn, 32), y)\n                mstore(add(mIn, 64), s)\n\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n\n                mstore(add(mIn, 64), mload(pR))\n                mstore(add(mIn, 96), mload(add(pR, 32)))\n\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\n\n                if iszero(success) {\n                    mstore(0, 0)\n                    return(0, 0x20)\n                }\n            }\n\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\n                let _pPairing := add(pMem, pPairing)\n                let _pVk := add(pMem, pVk)\n\n                mstore(_pVk, IC0x)\n                mstore(add(_pVk, 32), IC0y)\n\n                // Compute the linear combination vk_x\n\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\n\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\n\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\n\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\n\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\n\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\n\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\n\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\n\n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\n\n                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))\n\n\n                // -A\n                mstore(_pPairing, calldataload(pA))\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\n\n                // B\n                mstore(add(_pPairing, 64), calldataload(pB))\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\n\n                // alpha1\n                mstore(add(_pPairing, 192), alphax)\n                mstore(add(_pPairing, 224), alphay)\n\n                // beta2\n                mstore(add(_pPairing, 256), betax1)\n                mstore(add(_pPairing, 288), betax2)\n                mstore(add(_pPairing, 320), betay1)\n                mstore(add(_pPairing, 352), betay2)\n\n                // vk_x\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\n\n\n                // gamma2\n                mstore(add(_pPairing, 448), gammax1)\n                mstore(add(_pPairing, 480), gammax2)\n                mstore(add(_pPairing, 512), gammay1)\n                mstore(add(_pPairing, 544), gammay2)\n\n                // C\n                mstore(add(_pPairing, 576), calldataload(pC))\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\n\n                // delta2\n                mstore(add(_pPairing, 640), deltax1)\n                mstore(add(_pPairing, 672), deltax2)\n                mstore(add(_pPairing, 704), deltay1)\n                mstore(add(_pPairing, 736), deltay2)\n\n\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\n\n                isOk := and(success, mload(_pPairing))\n            }\n\n            let pMem := mload(0x40)\n            mstore(0x40, add(pMem, pLastMem))\n\n            // Validate that all evaluations ∈ F\n\n            checkField(calldataload(add(_pubSignals, 0)))\n\n            checkField(calldataload(add(_pubSignals, 32)))\n\n            checkField(calldataload(add(_pubSignals, 64)))\n\n            checkField(calldataload(add(_pubSignals, 96)))\n\n            checkField(calldataload(add(_pubSignals, 128)))\n\n            checkField(calldataload(add(_pubSignals, 160)))\n\n            checkField(calldataload(add(_pubSignals, 192)))\n\n            checkField(calldataload(add(_pubSignals, 224)))\n\n            checkField(calldataload(add(_pubSignals, 256)))\n\n            checkField(calldataload(add(_pubSignals, 288)))\n\n            checkField(calldataload(add(_pubSignals, 320)))\n\n\n            // Validate all evaluations\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\n\n            mstore(0, isValid)\n             return(0, 0x20)\n         }\n     }\n }"
    },
    "contracts/VerifyDomainProcessor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport { ClaimVerifier } from \"./external/ClaimVerifier.sol\";\nimport { INullifierRegistry } from \"./external/interfaces/INullifierRegistry.sol\";\nimport { ProxyBaseProcessor } from \"./external/processors/ProxyBaseProcessor.sol\";\nimport { StringConversionUtils } from \"./external/lib/StringConversionUtils.sol\";\nimport { TicketmasterDataParsing } from \"./external/TicketmasterDataParsing.sol\";\n\nimport { IVerifyDomainProcessor } from \"./interfaces/IVerifyDomainProcessor.sol\";\n\npragma solidity ^0.8.18;\n\n\ncontract VerifyDomainProcessor is IVerifyDomainProcessor, ProxyBaseProcessor {\n\n    using StringConversionUtils for string;\n\n    /* ============ Constants ============ */\n    uint8 constant MAX_EXTRACT_VALUES = 5;\n\n    /* ============ State Variables ============ */\n    address public immutable registry;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _registry,\n        INullifierRegistry _nullifierRegistry,\n        string[] memory _providerHashes\n    )   \n        ProxyBaseProcessor(_nullifierRegistry, _providerHashes)\n    {\n        registry = _registry;\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY REGISTRY: Verifies proofs. Extracts values and formats them into Domain structs.\n     *\n     * @param _proofs        Proofs to be verified\n     * @return domains       Array of Domain structs\n     */\n    function verifyProofs(\n        Proof[] memory _proofs\n    ) \n        external \n        override\n        returns (DomainRaw[] memory domains)\n    {\n        require(msg.sender == registry, \"Only registry can call\");\n\n        domains = new DomainRaw[](_proofs.length);\n\n        for (uint256 i = 0; i < _proofs.length; i++) {\n            Proof memory proof = _proofs[i];\n\n            verifyProofSignatures(proof);\n\n            (\n                string memory domainName,\n                string memory expiryTimeStr,\n                string memory providerHash\n            ) = _extractValues(proof);\n\n            // Check provider hash\n            require(_validateProviderHash(providerHash), \"No valid providerHash\");\n\n            _validateAndAddNullifier(proof.signedClaim.signatures);\n\n            domains[i] = DomainRaw({\n                name: domainName,\n                // The TicketmasterDataParsing library's date parsing logic is pretty generic, and works for domain \n                // expiry dates as well. Similar to Ticketmaster dates, the expiry time is of the format \"YYYY-MM-DDTHH:MM:SS\"\n                // and returns UTC timestamps.\n                expiryTime: TicketmasterDataParsing._dateStringToTimestamp(expiryTimeStr)\n            });\n        }\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * Extracts all values from the proof context.\n     *\n     * @param _proof The proof containing the context to extract values from.\n     */\n    function _extractValues(Proof memory _proof) internal pure returns (\n        string memory domainName,\n        string memory expiryTime,\n        string memory providerHash\n    ) {\n        string[] memory values = ClaimVerifier.extractAllFromContext(\n            _proof.claimInfo.context, \n            MAX_EXTRACT_VALUES, \n            true\n        );\n\n        return (\n            values[0], // domainName\n            values[1], // expiryTime\n            values[2]  // providerHash\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yulDetails": {
          "optimizerSteps": "u"
        }
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}