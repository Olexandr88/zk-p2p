{
  "address": "0x462e1CB14dC8eb4b4940F7EB91CD1589eF0cbFE6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_mailServerKeyHashes",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "mailserverKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "MailServerKeyHashAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "mailserverKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "MailServerKeyHashRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_mailserverKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "addMailServerKeyHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMailServerKeyHashes",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isMailServerKeyHash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mailServerKeyHashes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_mailserverKeyHash",
          "type": "bytes32"
        }
      ],
      "name": "removeMailServerKeyHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x78cbddc528629face0d2cc9786db104ec03558ade8f1e8270fe87f8372329c90",
  "receipt": {
    "to": null,
    "from": "0x84e113087C97Cd80eA9D78983D4B8Ff61ECa1929",
    "contractAddress": "0x462e1CB14dC8eb4b4940F7EB91CD1589eF0cbFE6",
    "transactionIndex": 78,
    "gasUsed": "766431",
    "logsBloom": "0x
    "blockHash": "0xa37809ce0532f5b7438afab09ecdc2069f7c052587eb57544d911e9e1eaea377",
    "transactionHash": "0x78cbddc528629face0d2cc9786db104ec03558ade8f1e8270fe87f8372329c90",
    "logs": [
      {
        "transactionIndex": 78,
        "blockNumber": 6644701,
        "transactionHash": "0x78cbddc528629face0d2cc9786db104ec03558ade8f1e8270fe87f8372329c90",
        "address": "0x462e1CB14dC8eb4b4940F7EB91CD1589eF0cbFE6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084e113087c97cd80ea9d78983d4b8ff61eca1929"
        ],
        "data": "0x",
        "logIndex": 78,
        "blockHash": "0xa37809ce0532f5b7438afab09ecdc2069f7c052587eb57544d911e9e1eaea377"
      }
    ],
    "blockNumber": 6644701,
    "cumulativeGasUsed": "8101416",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0db7730bdd90c823601ed32395c8b2f3307fd4adc477ca22bf3ed406c1b3ae4a"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "2d5447dc2e8fb3a2517c08b948266497",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_mailServerKeyHashes\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mailserverKeyHash\",\"type\":\"bytes32\"}],\"name\":\"MailServerKeyHashAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mailserverKeyHash\",\"type\":\"bytes32\"}],\"name\":\"MailServerKeyHashRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_mailserverKeyHash\",\"type\":\"bytes32\"}],\"name\":\"addMailServerKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMailServerKeyHashes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isMailServerKeyHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mailServerKeyHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_mailserverKeyHash\",\"type\":\"bytes32\"}],\"name\":\"removeMailServerKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/ManagedKeyHashAdapterV2.sol\":\"ManagedKeyHashAdapterV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"u:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/external/ManagedKeyHashAdapterV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IKeyHashAdapterV2 } from \\\"./interfaces/IKeyHashAdapterV2.sol\\\";\\nimport { Bytes32ArrayUtils } from \\\"./lib/Bytes32ArrayUtils.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract ManagedKeyHashAdapterV2 is Ownable, IKeyHashAdapterV2 {\\n    \\n    using Bytes32ArrayUtils for bytes32[];\\n\\n    /* ============ Events ============ */\\n    event MailServerKeyHashAdded(bytes32 mailserverKeyHash);\\n    event MailServerKeyHashRemoved(bytes32 mailserverKeyHash);\\n\\n    /* ============ State Variables ============ */\\n\\n    mapping(bytes32 => bool) public isMailServerKeyHash;\\n    bytes32[] public mailServerKeyHashes;\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        bytes32[] memory _mailServerKeyHashes\\n    )\\n        Ownable()\\n    {\\n        for (uint256 i = 0; i < _mailServerKeyHashes.length; i++) {\\n            bytes32 mailserverKeyHash = _mailServerKeyHashes[i];\\n            require(!isMailServerKeyHash[mailserverKeyHash], \\\"Key hash already added\\\");\\n            \\n            isMailServerKeyHash[mailserverKeyHash] = true;\\n            mailServerKeyHashes.push(mailserverKeyHash);\\n        }\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external onlyOwner {\\n        require(!isMailServerKeyHash[_mailserverKeyHash], \\\"Key hash already added\\\");\\n\\n        isMailServerKeyHash[_mailserverKeyHash] = true;\\n        mailServerKeyHashes.push(_mailserverKeyHash);\\n\\n        emit MailServerKeyHashAdded(_mailserverKeyHash);\\n    }\\n\\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external onlyOwner {\\n        require(isMailServerKeyHash[_mailserverKeyHash], \\\"Key hash not added\\\");\\n\\n        isMailServerKeyHash[_mailserverKeyHash] = false;\\n        mailServerKeyHashes.removeStorage(_mailserverKeyHash);\\n\\n        emit MailServerKeyHashRemoved(_mailserverKeyHash);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    function getMailServerKeyHashes() external view override returns (bytes32[] memory) {\\n        return mailServerKeyHashes;\\n    }\\n}\\n\",\"keccak256\":\"0x13d60704c96e0d88380cc2db7367cf17848b03fcd410fade3ba7161046cabeac\",\"license\":\"MIT\"},\"contracts/external/interfaces/IKeyHashAdapterV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IKeyHashAdapterV2 {\\n    function addMailServerKeyHash(bytes32 _mailserverKeyHash) external;\\n    function removeMailServerKeyHash(bytes32 _mailserverKeyHash) external;\\n    function getMailServerKeyHashes() external view returns (bytes32[] memory);\\n    function isMailServerKeyHash(bytes32 _mailserverKeyHash) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc849f2dc34e4463550b8e0a16541bde429cb1adf43776b2c4179e9d4e4e656a2\",\"license\":\"MIT\"},\"contracts/external/lib/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523462000030576200001e620000186200013d565b620002d7565b604051610aed620004718239610aed90f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200006d57604052565b62000035565b906200008a6200008260405190565b92836200004b565b565b6001600160401b0381116200006d5760208091020190565b90929192620000bd620000b7826200008c565b62000073565b93818552602080860192028301928184116200003057915b838310620000e35750505050565b8251815260209283019201620000d5565b9080601f83011215620000305781516200011192602001620000a4565b90565b90602082820312620000305781516001600160401b0381116200003057620001119201620000f4565b6200011162000f5e80380380620001548162000073565b92833981019062000114565b6200011162000111620001119290565b634e487b7160e01b600052601160045260246000fd5b6000198114620001965760010190565b62000170565b634e487b7160e01b600052603260045260246000fd5b90620001bc825190565b811015620001ce576020809102010190565b6200019c565b15620001dc57565b60405162461bcd60e51b815260206004820152601660248201527f4b6579206861736820616c7265616479206164646564000000000000000000006044820152606490fd5b9060ff905b9181191691161790565b9062000243620001116200024b92151590565b825462000221565b9055565b8054821015620001ce576200026b600191600052602060002090565b91020190600090565b9160001960089290920291821b911b62000226565b91906200029b620001116200024b9390565b90835462000274565b90815491680100000000000000008310156200006d5782620002d09160016200008a950181556200024f565b9062000289565b90620002e26200038c565b620002ee600062000160565b620002fb62000111845190565b8110156200038757806200037b620003206200031c620003819487620001b2565b5190565b62000373600162000358620003526200034e62000347868590600052602052604060002090565b5460ff1690565b1590565b620001d4565b6200036d838290600052602052604060002090565b62000230565b6002620002a4565b62000186565b620002ee565b509050565b6200008a80336200040e565b62000111905b6001600160a01b031690565b62000111905462000398565b906001600160a01b039062000226565b62000111906200039e906001600160a01b031682565b6200011190620003c6565b6200011190620003dc565b9062000406620001116200024b92620003e7565b8254620003b6565b6200041a6000620003aa565b9062000428816000620003f2565b6200045f620004587f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093620003e7565b91620003e7565b916200046a60405190565b600090a356fe6080604052600436101561001257600080fd5b60003560e01c806319d091521461009257806361ba662a1461008d578063687bc0ab14610088578063715018a6146100835780638da5cb5b1461007e578063a26c04ee14610079578063b86e2d72146100745763f2fde38b036100a057610339565b6102dd565b610247565b610208565b6101e4565b6101bd565b61012e565b6100fd565b805b036100a057565b600080fd5b905035906100b282610097565b565b906020828203126100a0576100c8916100a5565b90565b6100c8916008021c5b60ff1690565b906100c891546100cb565b60009081526001602052604081206100c891906100da565b346100a05761012a6101186101133660046100b4565b6100e5565b60405191829182901515815260200190565b0390f35b346100a0576101466101413660046100b4565b6106e8565b604051005b60009103126100a057565b9061017661016f610165845190565b8084529260200190565b9260200190565b9060005b8181106101875750505090565b9091926101a461019d6001928651815260200190565b9460200190565b92910161017a565b60208082526100c892910190610156565b346100a0576101cd36600461014b565b61012a6101d861087e565b604051918291826101ac565b346100a0576101f436600461014b565b610146610389565b6001600160a01b031690565b346100a05761021836600461014b565b61012a61022d6000546001600160a01b031690565b604051918291826001600160a01b03909116815260200190565b346100a05761014661025a3660046100b4565b6107b6565b634e487b7160e01b600052603260045260246000fd5b80548210156102985761028f600191600052602060002090565b91020190600090565b61025f565b6100c8916008021c81565b906100c8915461029d565b600260006102bf825490565b8310156102da57506100c8916102d491610275565b906102a8565b80fd5b346100a05761012a6102f86102f33660046100b4565b6102b3565b6040515b9182918290815260200190565b6001600160a01b038116610099565b905035906100b282610309565b906020828203126100a0576100c891610318565b346100a05761014661034c366004610325565b6104aa565b6103596103e5565b6100b2610377565b6101fc6100c86100c89290565b6100c890610361565b6100b2610384600061036e565b610509565b6100b2610351565b1561039857565b60405162461bcd60e51b8152806103e1600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6100b26103fa6000546001600160a01b031690565b610413610406336101fc565b916001600160a01b031690565b14610391565b6100b2906104256103e5565b610485565b1561043157565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6100b2906103846104996101fc600061036e565b6001600160a01b038316141561042a565b6100b290610419565b906001600160a01b03905b9181191691161790565b6100c8906101fc906001600160a01b031682565b6100c8906104c8565b6100c8906104dc565b906104fe6100c8610505926104e5565b82546104b3565b9055565b6000546001600160a01b0316906105218160006104ee565b61055461054e7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936104e5565b916104e5565b9161055e60405190565b600090a3565b6100b2906105706103e5565b610661565b6100c8906100d4565b6100c89054610575565b1561058f57565b60405162461bcd60e51b815260206004820152601660248201527512d95e481a185cda08185b1c9958591e48185919195960521b6044820152606490fd5b9060ff906104be565b906105e66100c861050592151590565b82546105cd565b634e487b7160e01b600052604160045260246000fd5b9160001960089290920291821b911b6104be565b91906106266100c86105059390565b908354610603565b908154916801000000000000000083101561065c57826106569160016100b295018155610275565b90610617565b6105ed565b6106aa600161069161068c610688610683868590600052602052604060002090565b61057e565b1590565b610588565b6106a5838290600052602052604060002090565b6105d6565b6106b581600261062e565b6106e37fc1674d5f4b3c1397f7aad948ab8fb7adfb24a8f170f8c07349d880c342da030b916102fc60405190565b0390a1565b6100b290610564565b6100b2906106fd6103e5565b610743565b1561070957565b60405162461bcd60e51b815260206004820152601260248201527112d95e481a185cda081b9bdd08185919195960721b6044820152606490fd5b61077d6001610767610762610683858490600052602052604060002090565b610702565b6106a58360009290600052602052604060002090565b610788816002610971565b6106e37f57f03401c03965ea5770efca656f696bdaa598efbaa2c899de9c70749634fabd916102fc60405190565b6100b2906106f1565b6100c89081565b6100c890546107bf565b906107eb6107df610165845490565b92600052602060002090565b9060005b8181106107fc5750505090565b909192610820610819600192610811876107c6565b815260200190565b9460010190565b9291016107ef565b906100c8916107d0565b90601f01601f1916810190811067ffffffffffffffff82111761065c57604052565b906100b261086e9261086560405190565b93848092610828565b0383610832565b6100c890610854565b6100c86002610875565b906108976107df610165845490565b9060005b8181106108a85750505090565b9091926108bd610819600192610811876107c6565b92910161089b565b906100c891610888565b906100b261086e926108e060405190565b938480926108c5565b6100c8906108cf565b6100c86100c86100c89290565b634e487b7160e01b600052601160045260246000fd5b9190820391821161092257565b6108ff565b634e487b7160e01b600052603160045260246000fd5b6100b291600091610617565b8054801561096c5760001901906109696109638383610275565b9061093d565b55565b610927565b61098661098d92610981836108e9565b610a53565b9092901590565b156109cf5760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b6044820152606490fd5b6100b2916109ee6109de835490565b6109e860016108f2565b90610915565b908181036109fe575b5050610949565b610656610a116102d4610a189486610275565b9184610275565b38806109f7565b60001981146109225760010190565b90610a37825190565b811015610298576020809102010190565b6100c86000196108f2565b91908251926000610a63816108f2565b855b811015610aaa57610a7d610a798285610a2e565b5190565b8490610a88565b9190565b14610aa057610a99610a6591610a1f565b9050610a63565b9450505050600190565b5093505050610a84610a4856fea2646970667358221220cea7059c06059b0cdd2bc4094fb91f900abb58ad31de2b8f44a6d19c080e596264736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806319d091521461009257806361ba662a1461008d578063687bc0ab14610088578063715018a6146100835780638da5cb5b1461007e578063a26c04ee14610079578063b86e2d72146100745763f2fde38b036100a057610339565b6102dd565b610247565b610208565b6101e4565b6101bd565b61012e565b6100fd565b805b036100a057565b600080fd5b905035906100b282610097565b565b906020828203126100a0576100c8916100a5565b90565b6100c8916008021c5b60ff1690565b906100c891546100cb565b60009081526001602052604081206100c891906100da565b346100a05761012a6101186101133660046100b4565b6100e5565b60405191829182901515815260200190565b0390f35b346100a0576101466101413660046100b4565b6106e8565b604051005b60009103126100a057565b9061017661016f610165845190565b8084529260200190565b9260200190565b9060005b8181106101875750505090565b9091926101a461019d6001928651815260200190565b9460200190565b92910161017a565b60208082526100c892910190610156565b346100a0576101cd36600461014b565b61012a6101d861087e565b604051918291826101ac565b346100a0576101f436600461014b565b610146610389565b6001600160a01b031690565b346100a05761021836600461014b565b61012a61022d6000546001600160a01b031690565b604051918291826001600160a01b03909116815260200190565b346100a05761014661025a3660046100b4565b6107b6565b634e487b7160e01b600052603260045260246000fd5b80548210156102985761028f600191600052602060002090565b91020190600090565b61025f565b6100c8916008021c81565b906100c8915461029d565b600260006102bf825490565b8310156102da57506100c8916102d491610275565b906102a8565b80fd5b346100a05761012a6102f86102f33660046100b4565b6102b3565b6040515b9182918290815260200190565b6001600160a01b038116610099565b905035906100b282610309565b906020828203126100a0576100c891610318565b346100a05761014661034c366004610325565b6104aa565b6103596103e5565b6100b2610377565b6101fc6100c86100c89290565b6100c890610361565b6100b2610384600061036e565b610509565b6100b2610351565b1561039857565b60405162461bcd60e51b8152806103e1600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b6100b26103fa6000546001600160a01b031690565b610413610406336101fc565b916001600160a01b031690565b14610391565b6100b2906104256103e5565b610485565b1561043157565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6100b2906103846104996101fc600061036e565b6001600160a01b038316141561042a565b6100b290610419565b906001600160a01b03905b9181191691161790565b6100c8906101fc906001600160a01b031682565b6100c8906104c8565b6100c8906104dc565b906104fe6100c8610505926104e5565b82546104b3565b9055565b6000546001600160a01b0316906105218160006104ee565b61055461054e7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936104e5565b916104e5565b9161055e60405190565b600090a3565b6100b2906105706103e5565b610661565b6100c8906100d4565b6100c89054610575565b1561058f57565b60405162461bcd60e51b815260206004820152601660248201527512d95e481a185cda08185b1c9958591e48185919195960521b6044820152606490fd5b9060ff906104be565b906105e66100c861050592151590565b82546105cd565b634e487b7160e01b600052604160045260246000fd5b9160001960089290920291821b911b6104be565b91906106266100c86105059390565b908354610603565b908154916801000000000000000083101561065c57826106569160016100b295018155610275565b90610617565b6105ed565b6106aa600161069161068c610688610683868590600052602052604060002090565b61057e565b1590565b610588565b6106a5838290600052602052604060002090565b6105d6565b6106b581600261062e565b6106e37fc1674d5f4b3c1397f7aad948ab8fb7adfb24a8f170f8c07349d880c342da030b916102fc60405190565b0390a1565b6100b290610564565b6100b2906106fd6103e5565b610743565b1561070957565b60405162461bcd60e51b815260206004820152601260248201527112d95e481a185cda081b9bdd08185919195960721b6044820152606490fd5b61077d6001610767610762610683858490600052602052604060002090565b610702565b6106a58360009290600052602052604060002090565b610788816002610971565b6106e37f57f03401c03965ea5770efca656f696bdaa598efbaa2c899de9c70749634fabd916102fc60405190565b6100b2906106f1565b6100c89081565b6100c890546107bf565b906107eb6107df610165845490565b92600052602060002090565b9060005b8181106107fc5750505090565b909192610820610819600192610811876107c6565b815260200190565b9460010190565b9291016107ef565b906100c8916107d0565b90601f01601f1916810190811067ffffffffffffffff82111761065c57604052565b906100b261086e9261086560405190565b93848092610828565b0383610832565b6100c890610854565b6100c86002610875565b906108976107df610165845490565b9060005b8181106108a85750505090565b9091926108bd610819600192610811876107c6565b92910161089b565b906100c891610888565b906100b261086e926108e060405190565b938480926108c5565b6100c8906108cf565b6100c86100c86100c89290565b634e487b7160e01b600052601160045260246000fd5b9190820391821161092257565b6108ff565b634e487b7160e01b600052603160045260246000fd5b6100b291600091610617565b8054801561096c5760001901906109696109638383610275565b9061093d565b55565b610927565b61098661098d92610981836108e9565b610a53565b9092901590565b156109cf5760405162461bcd60e51b8152602060048201526015602482015274313cba32b99999103737ba1034b71030b93930bc9760591b6044820152606490fd5b6100b2916109ee6109de835490565b6109e860016108f2565b90610915565b908181036109fe575b5050610949565b610656610a116102d4610a189486610275565b9184610275565b38806109f7565b60001981146109225760010190565b90610a37825190565b811015610298576020809102010190565b6100c86000196108f2565b91908251926000610a63816108f2565b855b811015610aaa57610a7d610a798285610a2e565b5190565b8490610a88565b9190565b14610aa057610a99610a6591610a1f565b9050610a63565b9450505050600190565b5093505050610a84610a4856fea2646970667358221220cea7059c06059b0cdd2bc4094fb91f900abb58ad31de2b8f44a6d19c080e596264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/external/ManagedKeyHashAdapterV2.sol:ManagedKeyHashAdapterV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8398,
        "contract": "contracts/external/ManagedKeyHashAdapterV2.sol:ManagedKeyHashAdapterV2",
        "label": "isMailServerKeyHash",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 8401,
        "contract": "contracts/external/ManagedKeyHashAdapterV2.sol:ManagedKeyHashAdapterV2",
        "label": "mailServerKeyHashes",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}